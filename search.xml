<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h1><ul><li><a href="https://mp.weixin.qq.com/s/H2c7bMoWIkkiaLWsxQyNwQ">纯ipv6云服务器下玩ipv4和docker (qq.com)</a></li><li><a href="https://mp.weixin.qq.com/s/VSemRrx5-THdCcHK4CXTMA">9.9元&#x2F;年的云服务器H2G3M（适合学生党&#x2F;开发者）</a></li><li><a href="https://mp.weixin.qq.com/s/WPN1yPeydxdR-UiLvD290Q"># 胎教级教程！一步到胃！免费白嫖10年VPS服务器！不限流量，可搭建ip代理节点，建站！无任何套路！建议收藏！</a></li></ul><h1 id="服务器上创建一个新的用户，并赋予-root-权限"><a href="#服务器上创建一个新的用户，并赋予-root-权限" class="headerlink" title="服务器上创建一个新的用户，并赋予 root 权限"></a>服务器上创建一个新的用户，并赋予 root 权限</h1><p><a href="https://blog.csdn.net/m0_38128647/article/details/101078765">服务器上创建一个新的用户，并赋予root权限_登录到您的服务器并root创建用户lab:-CSDN博客</a></p><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><h2 id="ssh-挖洞代理"><a href="#ssh-挖洞代理" class="headerlink" title="ssh 挖洞代理"></a>ssh 挖洞代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CqTnNf -D 1080 -4 root@2602:294:0:dc:1234:1234:46cd:0001</span><br></pre></td></tr></table></figure><p>其中 <code>-C</code> 为压缩数据，<code>-q</code> 安静模式，<code>-T</code> 禁止远程分配终端，<code>-n</code> 关闭标准输入，<code>-N</code> 不执行远程命令。此外视需要还可以增加 <code>-f</code> 参数，把 ssh 放到后台运行。这些 ssh 代理没有短线重连功能，链接断了命令就退出了，所以需要些脚本监控重启，或者使用 autossh 之类的工具保持链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ALL_PROXY=socks5h://localhost:1080</span><br></pre></td></tr></table></figure><h2 id="VRAY-代理"><a href="#VRAY-代理" class="headerlink" title="VRAY 代理"></a>VRAY 代理</h2><ul><li><a href="https://v2raya.org/docs/prologue/installation/debian/#%E5%AE%89%E8%A3%85-v2raya">v2raya安装</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/apt/keyrings</span><br><span class="line"><span class="built_in">touch</span> /etc/apt/keyrings/v2raya.asc</span><br><span class="line">wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo <span class="built_in">tee</span> /etc/apt/keyrings/v2raya.asc</span><br><span class="line"><span class="built_in">touch</span> /etc/apt/sources.list.d/v2raya.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/v2raya.list </span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install v2raya v2ray</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable --now v2raya</span><br></pre></td></tr></table></figure><h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><p>.bashrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:20171</span><br><span class="line">export https_proxy=http://127.0.0.1:20171</span><br></pre></td></tr></table></figure><p>ssh 代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install netcat</span><br><span class="line"></span><br><span class="line">#.ssh/config</span><br><span class="line">Host *</span><br><span class="line">    ProxyCommand nc -X 5 -x 127.0.0.1:20170 %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    Port 22</span><br><span class="line">    Hostname github.com</span><br><span class="line">    IdentityFile /home/robot/.ssh/id_rsa</span><br><span class="line">    TCPKeepAlive yes</span><br><span class="line">  </span><br><span class="line">Host ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    Port 443</span><br><span class="line">    Hostname ssh.github.com</span><br><span class="line">    IdentityFile /home/robot/.ssh/id_rsa</span><br><span class="line">    TCPKeepAlive yes</span><br></pre></td></tr></table></figure><h2 id="脚本代理"><a href="#脚本代理" class="headerlink" title="脚本代理"></a>脚本代理</h2><ul><li><a href="https://github.com/yonggekkk/sing-box_hysteria2_tuic_argo_reality?tab=readme-ov-file">GitHub - yonggekkk&#x2F;sing-box_hysteria2_tuic_argo_reality: sing-box精装桶一键脚本【Hysteria2、Tuic5、Vless-reality、Vmess-ws&#x2F;argo】：支持alpine系统，多端口跳跃、自签&#x2F;acme双证书切换、Argo固定临时双隧道三模式；附singbox电脑网页客户端下载</a></li><li><a href="https://github.com/eooce/Sing-box">eooce&#x2F;Sing-box: 既然来了，就留下你的Star吧！Serv00 | CT8 | VPS | 游戏机 | sing-box(reality + hy2 + vmess-argo +tuic5)四合一无交互一键安装脚本(已适配Alpine)，支持纯V6 vps，默认解锁GPT和奈飞</a></li><li><a href="https://bs.openface.cc/2023/09/hysteria-2.html">使用一键脚本，部署 Hysteria 2（歇斯底里）协议节点-尚未完成小火煎的配置 (openface.cc)</a></li></ul><h2 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h2><ul><li><a href="https://bulianglin.com/archives/ws.html">永不被墙的vmess+ws，突破白名单限制的免费域前置CDN，无需域名和证书，快速优选gcore和fastly的IP，0-RTT的WS配置，HTTPUpgrade与WebSocket的区别 - 科学上网 技术分享</a></li><li><a href="https://bulianglin.com/archives/cdn.html">最佳的CDN节点优选IP工具 - 科学上网 技术分享</a></li></ul><h1 id="1panel"><a href="#1panel" class="headerlink" title="1panel"></a>1panel</h1><ul><li><a href="https://1panel.cn/docs/installation/online_installation/">https://1panel.cn/docs/installation/online_installation/</a></li><li><a href="https://bbs.fit2cloud.com/t/topic/6697">IPV6主机识别地区不太准 - 1Panel - 社区论坛 - FIT2CLOUD 飞致云</a></li></ul><h1 id="openp2p"><a href="#openp2p" class="headerlink" title="openp2p"></a>openp2p</h1><ul><li><a href="https://gitee.com/szq19980627/openp2p#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">openp2p: OpenP2P是一个轻量级的P2P共享网络。支持锥体，对称（NAT1-NAT4），UPNP，IPv6，UDP和TCP打孔。您可以建立私有共享网络，或使用公共共享网络 (gitee.com)</a></li></ul><h1 id="vps-网速加速"><a href="#vps-网速加速" class="headerlink" title="vps 网速加速"></a>vps 网速加速</h1><ul><li><a href="https://www.taurusxin.com/linux-network-optimize/">大幅度优化你的 VPS 网速 (taurusxin.com)</a></li></ul><h1 id="免费节点"><a href="#免费节点" class="headerlink" title="免费节点"></a>免费节点</h1><ul><li><a href="https://singboxgithub.github.io/free-nodes/">https://singboxgithub.github.io/free-nodes/</a></li></ul><h1 id="docker-代理"><a href="#docker-代理" class="headerlink" title="docker 代理"></a>docker 代理</h1><ul><li><a href="https://github.com/gebangfeng/docker-mirror/blob/main/dockerproxy">docker-mirror&#x2F;dockerproxy&#x2F;README.md at main · gebangfeng&#x2F;docker-mirror</a></li></ul><h1 id="检测-ip"><a href="#检测-ip" class="headerlink" title="检测 ip"></a>检测 ip</h1><ul><li><a href="https://www.itdog.cn/">ITDOG - 在线ping_在线tcping_网站测速_HTTP测速_API测速_路由追踪_在线MTR_DNS查询_ITDOG-云邦畅想</a></li></ul><h1 id="机场推荐"><a href="#机场推荐" class="headerlink" title="机场推荐"></a>机场推荐</h1><ul><li><a href="https://www.ermao.net/posts/vpn/">2024年10月便宜好用的翻墙机场推荐评测(长期更新 欢迎推荐)</a></li><li><a href="https://limbopro.com/laopaijichang.html">老牌机场推荐（2024年10月27日更新） - 毒奶 - 欢迎使用代理访问本站。</a></li><li><a href="https://www.totyun.org/#/dashboard">仪表盘 | TOTYUN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nix包管理器</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/nix%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/nix%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Nix"><a href="#安装-Nix" class="headerlink" title="安装 Nix"></a>安装 Nix</h1><p>nix 是一个函数式的包管理器，想像成 apt-get 或者 homevrew 这种的，或者 npm。</p><p>在命令行执行 <code>curl -L https://nixos.org/nix/install | sh</code> 就可以自动安装 nix</p><p>如果被墙，也可以使用清华镜像站的 <code>sh &lt;(curl https://mirrors.tuna.tsinghua.edu.cn/nix/latest/install)</code></p><h2 id="更换镜像-可选"><a href="#更换镜像-可选" class="headerlink" title="更换镜像 (可选)"></a>更换镜像 (可选)</h2><p>目前已知的有清华镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/nix/">https://mirrors.tuna.tsinghua.edu.cn/help/nix/</a></p><p>可以通过在 <code>~/.config/nix/nix.conf</code> 文件中写入以下内容，获得安装加速</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substituters = https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store https://cache.nixos.org/</span><br></pre></td></tr></table></figure><p>并且执行以下命令获得源码下载加速</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nix-channel --add https://mirrors.tuna.tsinghua.edu.cn/nix-channels/nixpkgs-unstable nixpkgs</span><br><span class="line">nix-channel --update</span><br></pre></td></tr></table></figure><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><h2 id="搜索并安装包"><a href="#搜索并安装包" class="headerlink" title="搜索并安装包"></a>搜索并安装包</h2><p>安装 Nix 包管理器后，下一步是搜索包。</p><p>首先，<a href="https://search.nixos.org/packages">访问 Nix 搜索的官方页面</a> 并输入你要安装的软件包的名称。</p><p>从给定的描述中，你可以找到所需的软件包，然后选择 <code>nix-env</code> 进行永久安装。</p><p>在这里，你可以添加一些额外的关键字以获得更好的搜索结果。例如，在这里，我搜索 “Firefox browser”：</p><p><img src="/../../img/blog/7accd62ac8fdfa5dfab86af10bcc804a_MD5.png"></p><p>我上面提到的最后一步（” 复制命令 “）什么也不做，只是为你提供了一个用于安装的命令。</p><p>现在，你所要做的就是在终端中执行该命令。</p><p>就我而言，它给了我以下命令来安装 Firefox：</p><p> <code>nix-env -iA nixpkgs.firefox</code></p><p>完成后，你可以使用以下命令列出已安装的软件包：</p><p> <code>nix-env -q</code></p><h3 id="安装旧版包"><a href="#安装旧版包" class="headerlink" title="安装旧版包"></a>安装旧版包</h3><p>在 nix 中，官方的 Channel 是 <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a>，这个 Channel 是通过 git 管理的。</p><p>通过 <code>nix-env -qaP go</code> 可以看到，目前最新版本提交的 nixpkgs 的 Go 只有最新的三个版本 1.18、1.19 和 1.20。</p><p>上文对于 Go 的安装，使用的是最新 commit 的 nixpkgs （通过 nix-channel 配置）。</p><p>而 <code>nix-env</code> 还提供了基于某个特殊版本的 nixpkgs 的安装机制。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -iA go -f https://github.com/NixOS/nixpkgs/archive/d1c3fea7ecbed758168787fe4e4a3157e52bc808.tar.gz</span><br></pre></td></tr></table></figure><p>很多时候，我们希望，安装更旧版本的依赖时，就需要获取到包含更旧 Go 的配置的 nixpkgs 那个 commit 的快照。</p><p>因此，现在的问题是，如何通过包名查询历史版本对应的 commit，然后通过上文的类似于 <code>https://github.com/NixOS/nixpkgs/archive/$commitID.tar.gz</code> 的方式即可安装旧版本的包。</p><p>nixpkgs 官方并未提供该能力，但是幸运的是 nix 社区有一个站点可以查询这些信息： <a href="https://lazamar.co.uk/nix-versions/">https://lazamar.co.uk/nix-versions/</a> 。</p><p>其原理可以参见：<a href="https://lazamar.github.io/download-specific-package-version-with-nix/">该站点作者博客</a>。</p><p>此外，该项目已开源，参见： <a href="https://github.com/lazamar/nix-package-versions">lazamar&#x2F;nix-package-versions</a>。</p><p>nixpkgs 官方关于安装旧版包的讨论参见：<a href="https://github.com/NixOS/nixpkgs/issues/9682">No way to install&#x2F;use a specific package version? #9682</a>。</p><p>注意：</p><ul><li>中国大陆地区，建议先通过科学上网，clone 下整个 <a href="https://github.com/NixOS/nixpkgs">https://github.com/NixOS/nixpkgs</a> 仓库（几个 G 大小），然后 checkout 到指定版本，然后在通过 <code>nix-env -f</code> 指定到 nixpkgs 根目录目录。</li><li>从多个历史 commit 的 nixpkgs 安装包会导致磁盘占用快速上升。</li></ul><h2 id="使用包而不安装它们"><a href="#使用包而不安装它们" class="headerlink" title="使用包而不安装它们"></a>使用包而不安装它们</h2><p>到目前为止，这是 Nix 包管理器的最佳功能，因为你可以使用&#x2F;测试包甚至不用安装它！</p><p>为此，你可以使用 Nix Shell，它允许你将交互式 Shell 与指定的包一起使用，关闭后，你将无法再访问该包。</p><p>要使用 nix-shell 访问你喜欢的软件包，请使用以下命令语法：</p><p><code>nix-shell -p &lt;package_name&gt;</code></p><p>例如，我想使用一次 <code>neofetch</code>，所以我使用了以下命令：</p><p><code>nix-shell -p neofetch</code></p><p><img src="/../../img/blog/1bb0cda327dc537bcd941f3cb0c62447_MD5.png"></p><p>要退出 Shell，你所要做的就是执行 <code>exit</code> 命令：</p><h2 id="使用-Nix-包管理器更新包"><a href="#使用-Nix-包管理器更新包" class="headerlink" title="使用 Nix 包管理器更新包"></a>使用 Nix 包管理器更新包</h2><p>使用 Nix 包管理器更新包非常简单。</p><p>要更新软件包，首先，你需要使用以下命令更新频道：</p><p> <code>nix-channel --update</code></p><p>接下来，你可以通过试运行更新命令来列出过时的软件包：</p><p> <code>nix-env --upgrade --dry-run</code></p><p><img src="/../../img/blog/eaba90663a964c56bdcc715813bc86f2_MD5.png"></p><p>要更新单个包，请使用以下命令：</p><p> <code>nix-env -u &lt;Package_name&gt;</code></p><p>如果你想一次更新所有软件包，请使用以下命令：</p><p> <code>nix-env -u</code></p><h2 id="使用-Nix-包管理器删除包"><a href="#使用-Nix-包管理器删除包" class="headerlink" title="使用 Nix 包管理器删除包"></a>使用 Nix 包管理器删除包</h2><p>要删除软件包，你只需按以下方式执行 <code>nix-env</code> 命令即可：</p><p> <code>nix-env --uninstall [package_name]</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.rectcircle.cn/posts/nix-1-package-manager/">Nix 详解（一） 像传统包管理器一样使用 Nix :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-2-project-external-dependencies-manager/">Nix 详解（二） 项目外部依赖管理 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-3-nix-dsl/">Nix 详解（三） nix 领域特定语言 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-4-http-binary-cache/">Nix 详解（四） HTTP 二进制缓存详解 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-5-how-to-use-in-rd-group/">Nix 详解（五）在研发团队中落地设计 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-6-cheat-sheet/">Nix 详解（六） 备忘单 :: Rectcircle Blog</a></li></ul><h1 id="devbox"><a href="#devbox" class="headerlink" title="devbox"></a>devbox</h1><ul><li><a href="https://github.com/jetify-com/devbox">https://github.com/jetify-com/devbox</a></li><li><a href="https://www.nixhub.io/">https://www.nixhub.io/</a></li></ul><h1 id="通过-NixOS-释放其全部潜力"><a href="#通过-NixOS-释放其全部潜力" class="headerlink" title="通过 NixOS 释放其全部潜力"></a>通过 NixOS 释放其全部潜力</h1><p>如果你喜欢 Nix 包管理器背后的想法，请相信我，你一定会喜欢 <a href="https://nixos.org/">NixOS</a>。</p><p>仅使用一个配置文件来复制整个系统就足以说服我切换到 NixOS，但还有更多原因：</p><p>我喜欢 NixOS。以至于我写了整个系列，这样你就不必阅读文档（基础知识）：</p><blockquote><p><strong><a href="https://linux.cn/article-15606-1.html">NixOS 系列</a></strong><br><strong><a href="https://www.rectcircle.cn/posts/nixos/">NixOS 指南 :: Rectcircle Blog</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接服务器</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-RSA-密钥来免密登录"><a href="#使用-RSA-密钥来免密登录" class="headerlink" title="使用 RSA 密钥来免密登录"></a>使用 RSA 密钥来免密登录</h1><ol><li><p>使你的服务器支持密钥登陆，如果已经设置过的可以跳到下一步</p><ol><li><p>可以去 <a href="https://www.runoob.com/w3cnote/set-ssh-login-key.html">这里</a> 看一看菜鸟教程的教学，我把主要过程摘录如下：</p></li><li><p>登陆你打算使用密钥登录的账户，执行以下指令：</p></li></ol> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ &amp; ssh-keygen</span><br></pre></td></tr></table></figure><ol start="3"><li>然后一路回车，不要设置密钥锁码！否则登陆的时候还得再输这个码，直接回车就行</li></ol> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure><ol start="4"><li><p>用 FTP 把 ~&#x2F;. ssh&#x2F;id_rsa（就是刚生成的私钥）下下来，我的建议是重命名（起个有意义的名字）后放进 <code>%USERPROFILE%/.ssh/</code> 目录下，因为自机生成的密钥也会放在这个文件夹, 可修改相应的 <code>config</code> 文件</p></li><li><p>编辑 &#x2F;etc&#x2F;ssh&#x2F;sshd_config, 增加（修改&#x2F;去除注释化&#x2F;检查）的设置如下</p></li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line"></span><br><span class="line"># 如果希望的话，可以用下面的设置禁止使用密码登陆</span><br><span class="line"># 记得先测试了可以用密钥再改</span><br><span class="line">PasswordAuthentication no</span><br></pre></td></tr></table></figure><ol start="6"><li>测试可以使用密钥连接后，重启 SSH 服务</li></ol> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></li><li><p>将 Windows Terminal 的配置中 “ 命令行 “ 的值更改一下</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -i [私钥路径] -p [端口] [用户名]@[服务器ip]</span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line">ssh -i <span class="string">&quot;C:/Users/usr/.ssh/id_rsa_server&quot;</span> -p 2342 example@114.514.114.514</span><br></pre></td></tr></table></figure></li><li><p>如果你是跟着别人的教程或者官方文档走的，在 settings.json 中写路径的时候记得转义引号，使用 &#x2F; 而非 ,或者你也可以转义。如：</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ssh -i \&quot;C:\\Users\\usr\\.ssh\\id_rsa_server\&quot; -p 1145 example@114.514.114.514&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>贴上微软官方文档的链接 <a href="https://learn.microsoft.com/zh-cn/windows/terminal/tutorials/ssh">Windows 终端 SSH | Microsoft Learn</a></p><h1 id="x2F-ssh-x2F-config-配置实现"><a href="#x2F-ssh-x2F-config-配置实现" class="headerlink" title="~&#x2F;.ssh&#x2F;config 配置实现"></a>~&#x2F;.ssh&#x2F;config 配置实现</h1><p><a href="https://blog.csdn.net/qq_26189301/article/details/111051245?ops_request_misc=&request_id=&biz_id=102&utm_term=~/.ssh/config%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-111051245.142%5Ev11%5Epc_search_result_control_group,157%5Ev13%5Econtrol&spm=1018.2226.3001.4187">参考</a></p><p>最常用的登陆方法是 <code>ssh username@server -p port</code></p><p>通过 <code>~/.ssh/confg</code> 配置文件，实现免密、更改名称的登陆方法，不论你的 username、server address、port 是什么，都可以不用输入，只需要输入一个替换的名称即可登陆该服务器。像这样 <code>ssh &lt;any name here&gt;</code></p><h2 id="将公钥-rsa-pub-上传到服务器"><a href="#将公钥-rsa-pub-上传到服务器" class="headerlink" title="将公钥 rsa. pub 上传到服务器"></a>将公钥 rsa. pub 上传到服务器</h2><p>使用 ssh-copy-id 命令将生成的公钥上传到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub username@server -p 22</span><br></pre></td></tr></table></figure><p>ssh-copy-id 的本质是把你本地的公钥添加到服务器&#x2F;远程机的 <code>~/.ssh/authorized_keys</code> 文件里<br>powershell 不给力，那我们自己 Ctrl CV 就好了</p><p><code>ssh-keygen</code> 生成密钥后，家目录&#x2F;.ssh 就会多两个文件</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p><strong>注意权限</strong>：<code>chmod 600 ~/.ssh/config</code></p><h2 id="常用的-SSH-配置项"><a href="#常用的-SSH-配置项" class="headerlink" title="常用的 SSH 配置项"></a>常用的 SSH 配置项</h2><p>1、config 文件配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host 别名</span><br><span class="line">HostName 主机名</span><br><span class="line">Port 端口</span><br><span class="line">User 用户名</span><br><span class="line">IdentityFile 密钥文件的路径</span><br><span class="line">IdentitiesOnly 只接受SSH key 登录</span><br><span class="line">PreferredAuthentications 强制使用Public Key验证</span><br></pre></td></tr></table></figure><p>2、Host 配置</p><p>Host 配置项标识了一个配置区段。<br>SSH 配置项参数值可以使用通配符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;*&#x27; 代表 0～n 个非空白字符。</span><br><span class="line">&#x27;?&#x27; 代表一个非空白字符。</span><br><span class="line">&#x27;!&#x27; 表示例外通配。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dot语言</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/dot%E8%AF%AD%E8%A8%80.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/dot%E8%AF%AD%E8%A8%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="UML-绘制-dot-语言"><a href="#UML-绘制-dot-语言" class="headerlink" title="UML 绘制 -dot 语言"></a>UML 绘制 -dot 语言</h1><h2 id="DOT-语言基础"><a href="#DOT-语言基础" class="headerlink" title="DOT 语言基础"></a>DOT 语言基础</h2><h3 id="基本的-DOT-文件"><a href="#基本的-DOT-文件" class="headerlink" title="基本的 DOT 文件"></a>基本的 DOT 文件</h3><p>demo01.dot</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">digraph demo&#123;</span><br><span class="line">    A-&gt;B[dir<span class="operator">=</span>both]<span class="comment">;</span></span><br><span class="line">    B-&gt;C[dir<span class="operator">=</span>none]<span class="comment">;</span></span><br><span class="line">    C-&gt;D[dir<span class="operator">=</span>back]<span class="comment">;</span></span><br><span class="line">    D-&gt;A[dir<span class="operator">=</span>forward]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从-DOT-文件生成图像"><a href="#从-DOT-文件生成图像" class="headerlink" title="从 DOT 文件生成图像"></a>从 DOT 文件生成图像</h3><p><code>dot demo01.dot –Tpng –o demo01.png</code></p><p><img src="/../../img/blog/74874464eb38dc31e7f31a7b7d592c80_MD5.png" alt="渲染结果" title="渲染结果"></p><h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><p>PlantUML 是基于 Graphviz 的一个开源项目，并支持快速绘制：</p><ul><li>时序图</li><li>用例图</li><li>类图</li><li>活动图 (here is the new syntax),</li><li>组件图</li><li>状态图</li><li>Deployment diagram,</li><li>对象图</li><li>wireframe graphical interface</li></ul><p>可以生成 png,svg,Latex 格式的图片，可以作为插件使用：</p><ul><li>Intellij idea</li><li>Eclipse</li><li>NetBeans</li><li>Ckeditor</li><li>TinyMCE Editor</li><li>Sublime Text Editor</li><li>Vim</li><li>Emacs</li><li>Atom</li><li>….</li></ul><p>下面说一下 Sublime Text 安装 PlantUML 的过程：</p><ul><li>下载 PlantUML for Sublime 插件，并解压</li><li>通过 Preferences -&gt; Browse Packages … 打开 sublime 的 Packages 目录，解压后的插件放在 Packages 目录下</li><li>重启 Sublime</li><li>为了简化使用，可以在 Sublime 里配置个快捷键。打开 Preferences -&gt; Key Binding - User，添加一个快捷键：<br>  { “keys”: [“alt+d”], “command”: “display_diagrams”}</li></ul><p>上面的代码配置成按住 Alt + d 来生成 PlantUML 图片，你可以修改成你自己喜欢的按键。</p><p>参考自使用 Sublime + PlantUML 高效地画图</p><h2 id="画状态图"><a href="#画状态图" class="headerlink" title="画状态图"></a>画状态图</h2><blockquote><p>我这里以状态图为例，如果你需要画其他图，到 PlantUML 查看</p></blockquote><h3 id="简单状态图"><a href="#简单状态图" class="headerlink" title="简单状态图"></a>简单状态图</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"></span><br><span class="line">[*] --&gt; State1</span><br><span class="line">State1 --&gt; [*]</span><br><span class="line"><span class="attribute">State1 </span>: this is a string</span><br><span class="line"><span class="attribute">State1 </span>: this is another string</span><br><span class="line"></span><br><span class="line">State1 -&gt; State2</span><br><span class="line">State2 --&gt; [*]</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><p>快捷键 <code>alt+d</code></p><p><img src="/../../img/blog/14dfa837bb59e55fd868092f1f8ee21f_MD5.png" alt="简单状态图" title="简单状态图"></p><h3 id="合成状态"><a href="#合成状态" class="headerlink" title="合成状态"></a>合成状态</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale <span class="number">350</span> width</span><br><span class="line">[*] --&gt; NotShooting</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span> NotShooting &#123;</span><br><span class="line">  [*] --&gt; Idle</span><br><span class="line">  Idle --&gt; Configuring : EvConfig</span><br><span class="line">  Configuring --&gt; Idle : EvConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span> Configuring &#123;</span><br><span class="line">  [*] --&gt; NewValueSelection</span><br><span class="line">  NewValueSelection --&gt; NewValuePreview : EvNewValue</span><br><span class="line">  NewValuePreview --&gt; NewValueSelection : EvNewValueRejected</span><br><span class="line">  NewValuePreview --&gt; NewValueSelection : EvNewValueSaved</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">state</span> NewValuePreview &#123;</span><br><span class="line">     State1 -&gt; State2</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><ul><li>scale 350 width,指定图的宽度为 350，等比例缩放</li></ul><p><img src="/../../img/blog/8889e96d393176baca71128ae43a3f8c_MD5.png" alt="合成状态图" title="合成状态图"></p><h2 id="长名字"><a href="#长名字" class="headerlink" title="长名字"></a>长名字</h2><p>如果状态的名称过长，使用 state 关键字</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale <span class="number">600</span> width</span><br><span class="line"></span><br><span class="line">[*] -&gt; State1</span><br><span class="line">S<span class="function"><span class="title">tate1</span> --&gt;</span> State2 : Succeeded</span><br><span class="line">S<span class="function"><span class="title">tate1</span> --&gt;</span> [*] : Aborted</span><br><span class="line">S<span class="function"><span class="title">tate2</span> --&gt;</span> State3 : Succeeded</span><br><span class="line">S<span class="function"><span class="title">tate2</span> --&gt;</span> [*] : Aborted</span><br><span class="line">state State3 &#123;</span><br><span class="line">  state <span class="string">&quot;Accumulate Enough Data\nLong State Name&quot;</span> <span class="keyword">as</span> long1</span><br><span class="line">  long1 : Just a test</span><br><span class="line">  [*] --&gt; long1</span><br><span class="line">  <span class="function"><span class="title">long1</span> --&gt;</span> long1 : New Data</span><br><span class="line">  <span class="function"><span class="title">long1</span> --&gt;</span> ProcessData : Enough Data</span><br><span class="line">&#125;</span><br><span class="line">S<span class="function"><span class="title">tate3</span> --&gt;</span> State3 : Failed</span><br><span class="line">S<span class="function"><span class="title">tate3</span> --&gt;</span> [*] : Succeeded / Save Result</span><br><span class="line">S<span class="function"><span class="title">tate3</span> --&gt;</span> [*] : Aborted</span><br><span class="line"> </span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/57d3a5dd32692daa220db432b336e265_MD5.png" alt="长名字" title="长名字"></p><h2 id="并发状态"><a href="#并发状态" class="headerlink" title="并发状态"></a>并发状态</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line">[*] --&gt; Active</span><br><span class="line"></span><br><span class="line">state Active &#123;</span><br><span class="line">  <span class="selector-attr">[*]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">NumLockOff</span></span><br><span class="line">  <span class="selector-tag">NumLockOff</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">NumLockOn</span> : <span class="selector-tag">EvNumLockPressed</span></span><br><span class="line">  <span class="selector-tag">NumLockOn</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">NumLockOff</span> : <span class="selector-tag">EvNumLockPressed</span></span><br><span class="line">  <span class="selector-tag">--</span></span><br><span class="line">  <span class="selector-attr">[*]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">CapsLockOff</span></span><br><span class="line">  <span class="selector-tag">CapsLockOff</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">CapsLockOn</span> : <span class="selector-tag">EvCapsLockPressed</span></span><br><span class="line">  <span class="selector-tag">CapsLockOn</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">CapsLockOff</span> : <span class="selector-tag">EvCapsLockPressed</span></span><br><span class="line">  <span class="selector-tag">--</span></span><br><span class="line">  <span class="selector-attr">[*]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">ScrollLockOff</span></span><br><span class="line">  <span class="selector-tag">ScrollLockOff</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">ScrollLockOn</span> : <span class="selector-tag">EvCapsLockPressed</span></span><br><span class="line">  <span class="selector-tag">ScrollLockOn</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">ScrollLockOff</span> : <span class="selector-tag">EvCapsLockPressed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><ul><li>用 – 作为分隔符来合成并发状态。</li></ul><p><img src="/../../img/blog/caefc3b72183028882bff59b4e6c746f_MD5.png" alt="并发状态" title="并发状态"></p><h2 id="箭头方向"><a href="#箭头方向" class="headerlink" title="箭头方向"></a>箭头方向</h2><ul><li>使用 -&gt;定义水平箭头，也可以使用下列格式强制设置箭头方向：<br>1)-down-&gt; (default arrow)<br>2)-right-&gt; or -&gt;<br>3)-left-&gt;<br>4)-up-&gt;</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line">[*] -up-&gt; First</span><br><span class="line">First -&gt; Second</span><br><span class="line">Second --&gt; Third</span><br><span class="line">Third --&gt; Fourth</span><br><span class="line">Fourth -left-&gt; Last</span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/73cca000c91a0ff919c227bd1fe40b37_MD5.png" alt="箭头方向" title="箭头方向"></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>关键字：</p><ul><li>note left of</li><li>note right of</li><li>note top of</li><li>note bottom of</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"></span><br><span class="line">[*] --&gt; Active</span><br><span class="line">Active --&gt; Inactive</span><br><span class="line"></span><br><span class="line">note left of <span class="attribute">Active </span>: this is a short\nnote</span><br><span class="line"></span><br><span class="line">note right of Inactive</span><br><span class="line">  A note can also</span><br><span class="line">  be defined on</span><br><span class="line">  several lines</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/70c94bcabe4036a70541501974ccd747_MD5.png"></p><ul><li>浮动注释</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"></span><br><span class="line">state foo</span><br><span class="line">note <span class="string">&quot;This is a floating note&quot;</span> as N1</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/13f5a6ff290b369a2105fb5c2956c6db_MD5.png"></p><ul><li>合成状态的注释</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">[*] --&gt; NotShooting</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span> <span class="string">&quot;Not Shooting State&quot;</span> as NotShooting &#123;</span><br><span class="line">  <span class="keyword">state</span> <span class="string">&quot;Idle mode&quot;</span> as Idle</span><br><span class="line">  <span class="keyword">state</span> <span class="string">&quot;Configuring mode&quot;</span> as Configuring</span><br><span class="line">  [*] --&gt; Idle</span><br><span class="line">  Idle --&gt; Configuring : EvConfig</span><br><span class="line">  Configuring --&gt; Idle : EvConfig</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">note right of NotShooting : This is a note <span class="keyword">on</span> a composite <span class="keyword">state</span></span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/5f2c463f9e29caf59e32adbeaaaa326d_MD5.png"></p><h2 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h2><ul><li>使用 skinparam 命令改变字体和颜色。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">skinparam backgroundColor LightYellow</span><br><span class="line">skinparam state &#123;</span><br><span class="line">  StartColor MediumBlue</span><br><span class="line">  EndColor Red</span><br><span class="line">  BackgroundColor #e0f</span><br><span class="line">  BackgroundColor<span class="symbol">&lt;&lt;Warning&gt;&gt;</span> #aaa</span><br><span class="line">  FontColor<span class="symbol">&lt;&lt;Warning&gt;&gt;</span> Orange</span><br><span class="line">  BorderColor Orange</span><br><span class="line">  FontName Monaco</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[*] <span class="comment">--&gt; NotShooting</span></span><br><span class="line"></span><br><span class="line">state &quot;Not Shooting State&quot; <span class="keyword">as</span> NotShooting &#123;</span><br><span class="line">  state &quot;Idle mode&quot; <span class="keyword">as</span> Idle <span class="symbol">&lt;&lt;Warning&gt;&gt;</span></span><br><span class="line">  state &quot;Configuring mode&quot; <span class="keyword">as</span> Configuring</span><br><span class="line">  [*] <span class="comment">--&gt; Idle</span></span><br><span class="line">  Idle <span class="comment">--&gt; Configuring : EvConfig</span></span><br><span class="line">  Configuring <span class="comment">--&gt; Idle : EvConfig</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NotShooting <span class="comment">--&gt; [*]</span></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/081500d0764e88c7966714f64c229846_MD5.png"></p><p>有一个网站，可以实时预览 <a href="https://www.planttext.com/">PlantText UML Editor</a></p><h1 id="使用-graphviz-绘图"><a href="#使用-graphviz-绘图" class="headerlink" title="使用 graphviz 绘图"></a>使用 graphviz 绘图</h1><h2 id="Graphviz-简介"><a href="#Graphviz-简介" class="headerlink" title="Graphviz 简介"></a>Graphviz 简介</h2><p>本文介绍一个高效而简洁的绘图工具 <code>graphviz</code>。<code>graphviz</code> 是贝尔实验室开发的一个开源的工具包，它使用一个特定的 <code>DSL</code> (领域特定语言): <code>dot</code> 作为脚本语言，然后使用布局引擎来解析此脚本，并完成自动布局。<code>graphviz</code> 提供丰富的导出格式，如常用的图片格式，SVG，PDF 格式等。<br><code>graphviz</code> 中包含了众多的布局器：</p><ul><li><code>dot</code> 默认布局方式，主要用于有向图</li><li><code>neato</code> 基于 spring-model (又称 force-based) 算法</li><li><code>twopi</code> 径向布局</li><li><code>circo</code> 圆环布局</li><li><code>fdp</code> 用于无向图</li></ul><p><code>graphviz</code> 的设计初衷是对 <code>有向图/无向图</code> 等进行自动布局，开发人员使用 dot 脚本定义图形元素，然后选择算法进行布局，最终导出结果。<br>首先，在 dot 脚本中定义图的顶点和边，顶点和边都具有各自的属性，比如形状，颜色，填充模式，字体，样式等。然后使用合适的布局算法进行布局。布局算法除了绘制各个顶点和边之外，需要尽可能的将顶点均匀的分布在画布上，并且尽可能的减少边的交叉 (如果交叉过多，就很难看清楚顶点之间的关系了)。所以使用 <code>graphviz</code> 的一般流程为：</p><ul><li>定义一个图，并向图中添加需要的顶点和边</li><li>为顶点和边添加样式</li><li>使用布局引擎进行绘制</li></ul><p>一旦熟悉这种开发模式，就可以快速的将你的想法绘制出来。配合一个良好的编辑器 (vim&#x2F;emacs) 等，可以极大的提高开发效率，与常见的 GUI 应用的所见即所得模式对应，此模式称为所思即所得。比如在我的机器上，使用 Sublime Text 编辑 <code>dot</code> 脚本，然后将 <code>F7/Cmd-B</code> 映射为调用 <code>dot引擎</code> 去绘制当前脚本，并打开一个新的窗口来显示运行结果：<br><img src="/../../img/blog/7ad541744727621ce1e239645f0b0789_MD5.png"><br>对于开发人员而言，经常会用到的图形绘制可能包括：函数调用关系，一个复杂的数据结构，系统的模块组成，抽象语法树等。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>graphviz 包含 3 中元素，<code>图</code>，<code>顶点</code> 和 <code>边</code>。每个元素都可以具有各自的属性，用来定义字体，样式，颜色，形状等。下面是一些简单的示例，可以帮助我们快速的了解 graphviz 的基本用法。</p><h3 id="第一个-Graphviz-图"><a href="#第一个-Graphviz-图" class="headerlink" title="第一个 Graphviz 图"></a>第一个 Graphviz 图</h3><p>比如，要绘制一个有向图，包含 4 个节点 <code>a,b,c,d</code>。其中 <code>a</code> 指向 <code>b</code>，<code>b</code> 和 <code>c</code> 指向 <code>d</code>。可以定义下列脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">a;</span><br><span class="line">b;</span><br><span class="line">c;</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>dot</code> 布局方式，绘制出来的效果如下：<br><img src="/../../img/blog/b99b503eb30fd8f4f804167926fd2b0d_MD5.gif"><br>默认的顶点中的文字为定义顶点变量的名称，形状为椭圆。边的默认样式为黑色实线箭头，我们可以在脚本中做一下修改，将顶点改为 <code>方形</code>，边改为 <code>虚线</code>。</p><h3 id="定义顶点和边的样式"><a href="#定义顶点和边的样式" class="headerlink" title="定义顶点和边的样式"></a>定义顶点和边的样式</h3><p>在 <code>digraph</code> 的花括号内，添加顶点和边的新定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br></pre></td></tr></table></figure><p>则绘制的效果如下：<br><img src="/../../img/blog/4e52eacca5026225fd829601d6f697fb_MD5.gif"></p><h3 id="进一步修改顶点和边样式"><a href="#进一步修改顶点和边样式" class="headerlink" title="进一步修改顶点和边样式"></a>进一步修改顶点和边样式</h3><p>进一步，我们将顶点 <code>a</code> 的颜色改为 <code>淡绿色</code>，并将 <code>c</code> 到 <code>d</code> 的边改为 <code>红色</code>，脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line">c;</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制的结果如下：<br><img src="/../../img/blog/771137c47d5a0770518f7162af0ae504_MD5.gif"><br>应当注意到，顶点和边都接受属性的定义，形式为在顶点和边的定义之后加上一个由方括号括起来的 <code>key-value</code> 列表，每个 <code>key-value</code> 对由逗号隔开。如果图中顶点和边采用统一的风格，则可以在图定义的首部定义 <code>node</code>, <code>edge</code> 的属性。比如上图中，定义所有的顶点为方框，所有的边为虚线，在具体的顶点和边之后定义的属性将覆盖此全局属性。如特定与 <code>a</code> 的绿色，<code>c</code> 到 <code>d</code> 的边的红色。</p><h3 id="以图片为节点"><a href="#以图片为节点" class="headerlink" title="以图片为节点"></a>以图片为节点</h3><p>除了颜色，节点还可以使用图片。不过需要注意的是，在使用图片作为节点的时候，需要将本来的形状设置为 <code>none</code>，并且将 <code>label</code> 置为空字符串，避免出现文字对图片的干扰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line">c [shape=&quot;none&quot;, image=&quot;logos/browser-icon-chrome-resized.png&quot;, label=&quot;&quot;];</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/e673f5edaf4987f14a187fc08892d72d_MD5.png"></p><h2 id="子图的绘制"><a href="#子图的绘制" class="headerlink" title="子图的绘制"></a>子图的绘制</h2><p>graphviz 支持子图，即图中的部分节点和边相对对立 (软件的模块划分经常如此)。比如，我们可以将顶点 c 和 d 归为一个子图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_cd&#123;</span><br><span class="line">    label=&quot;c and d&quot;;</span><br><span class="line">    bgcolor=&quot;mintcream&quot;;</span><br><span class="line">    c;</span><br><span class="line">    d;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>c</code> 和 <code>d</code> 划分到 <code>cluster_cd</code> 这个子图中，标签为 <code>c and d</code>, 并添加背景色，以方便与主图区分开，绘制结果如下：<br><img src="/../../img/blog/fe829a415f4567d8294e30b6d54ec7ba_MD5.gif"><br>应该注意的是，子图的名称必须以 <code>cluster</code> 开头，否则 <code>graphviz</code> 无法设别。</p><h3 id="数据结构的可视化"><a href="#数据结构的可视化" class="headerlink" title="数据结构的可视化"></a>数据结构的可视化</h3><p>实际开发中，经常要用到的是对复杂数据结构的描述，<code>graphviz</code> 提供完善的机制来绘制此类图形。</p><h4 id="一个-Hash-表的数据结构"><a href="#一个-Hash-表的数据结构" class="headerlink" title="一个 Hash 表的数据结构"></a>一个 Hash 表的数据结构</h4><p>比如一个 hash 表的内容，可能具有下列结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st_hash_type</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> (*compare) ();</span><br><span class="line">    <span class="type">int</span> (*hash) ();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st_table_entry</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> hash;</span><br><span class="line">    <span class="type">char</span> *key;</span><br><span class="line">    <span class="type">char</span> *record;</span><br><span class="line">    st_table_entry *next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st_table</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">st_hash_type</span> *<span class="title">type</span>;</span></span><br><span class="line">    <span class="type">int</span> num_bins; <span class="comment">/* slot count */</span></span><br><span class="line">    <span class="type">int</span> num_entries; <span class="comment">/* total number of entries */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">st_table_entry</span> **<span class="title">bins</span>;</span> <span class="comment">/* slot */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="绘制-Hash-表的数据结构"><a href="#绘制-Hash-表的数据结构" class="headerlink" title="绘制 Hash 表的数据结构"></a>绘制 Hash 表的数据结构</h4><p>从代码上看，由于结构体存在引用关系，不够清晰，如果层次较多，则很难以记住各个结构之间的关系，我们可以通过下图来更清楚的展示：<br><img src="/../../img/blog/12a33ca70cb0bcf5621219fe4cec1a0a_MD5.gif"><br>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph st2&#123;</span><br><span class="line">fontname = &quot;Verdana&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line">rankdir=TB;</span><br><span class="line"> </span><br><span class="line">node [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;skyblue&quot;, shape=&quot;record&quot;];</span><br><span class="line"> </span><br><span class="line">edge [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;crimson&quot;, style=&quot;solid&quot;];</span><br><span class="line"> </span><br><span class="line">st_hash_type [label=&quot;&#123;&lt;head&gt;st_hash_type|(*compare)|(*hash)&#125;&quot;];</span><br><span class="line">st_table_entry [label=&quot;&#123;&lt;head&gt;st_table_entry|hash|key|record|&lt;next&gt;next&#125;&quot;];</span><br><span class="line">st_table [label=&quot;&#123;st_table|&lt;type&gt;type|num_bins|num_entries|&lt;bins&gt;bins&#125;&quot;];</span><br><span class="line"> </span><br><span class="line">st_table:bins -&gt; st_table_entry:head;</span><br><span class="line">st_table:type -&gt; st_hash_type:head;</span><br><span class="line">st_table_entry:next -&gt; st_table_entry:head [style=&quot;dashed&quot;, color=&quot;forestgreen&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该注意到，在顶点的形状为 <code>record</code> 的时候，<code>label</code> 属性的语法比较奇怪，但是使用起来非常灵活。比如，用竖线 “|” 隔开的串会在绘制出来的节点中展现为一条分隔符。用 <code>&lt;&gt;</code> 括起来的串称为锚点，当一个节点具有多个锚点的时候，这个特性会非常有用，比如节点 <code>st_table</code> 的 <code>type</code> 属性指向 <code>st_hash_type</code>，第 4 个属性指向 <code>st_table_entry</code> 等，都是通过锚点来实现的。<br>我们发现，使用默认的 <code>dot</code> 布局后，绿色的这条边覆盖了数据结构 <code>st_table_entry</code>，并不美观，因此可以使用别的布局方式来重新布局，如使用 <code>circo</code> 算法：<br><img src="/../../img/blog/e3cb870ad854cb6d856c765d6b256ca0_MD5.gif"><br>则可以得到更加合理的布局结果。</p><h3 id="Hash-表的实例"><a href="#Hash-表的实例" class="headerlink" title="Hash 表的实例"></a>Hash 表的实例</h3><p>另外，这个 hash 表的一个实例如下：<br><img src="/../../img/blog/3809051b78163ea25b528cdf8d5026e3_MD5.gif"><br>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">digraph st&#123;</span><br><span class="line">fontname = &quot;Verdana&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line">rankdir = LR;</span><br><span class="line">rotate = 90;</span><br><span class="line"> </span><br><span class="line">node [ shape=&quot;record&quot;, width=.1, height=.1];</span><br><span class="line">node [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;skyblue&quot;, shape=&quot;record&quot;];</span><br><span class="line"> </span><br><span class="line">edge [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;crimson&quot;, style=&quot;solid&quot;];</span><br><span class="line">node [shape=&quot;plaintext&quot;];</span><br><span class="line"> </span><br><span class="line">st_table [label=&lt;</span><br><span class="line">    &lt;table border=&quot;0&quot; cellborder=&quot;1&quot; cellspacing=&quot;0&quot; align=&quot;left&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;st_table&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;num_bins=5&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;num_entries=3&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td port=&quot;bins&quot;&gt;bins&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&gt;];</span><br><span class="line"> </span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">num_bins [label=&quot; &lt;b1&gt; | &lt;b2&gt; | &lt;b3&gt; | &lt;b4&gt; | &lt;b5&gt; &quot;, height=2];</span><br><span class="line">node[ width=2 ];</span><br><span class="line"> </span><br><span class="line">entry_1 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;next&#125;&quot;];</span><br><span class="line">entry_2 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;null&#125;&quot;];</span><br><span class="line">entry_3 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;null&#125;&quot;];</span><br><span class="line"> </span><br><span class="line">st_table:bins -&gt; num_bins:b1;</span><br><span class="line">num_bins:b1 -&gt; entry_1:e;</span><br><span class="line">entry_1:next -&gt; entry_2:e;</span><br><span class="line">num_bins:b3 -&gt; entry_3:e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中可以看到，节点的 <code>label</code> 属性支持类似于 <code>HTML</code> 语言中的 TABLE 形式的定义，通过行列的数目来定义节点的形状，从而使得节点的组成更加灵活。</p><h3 id="软件模块组成图"><a href="#软件模块组成图" class="headerlink" title="软件模块组成图"></a>软件模块组成图</h3><p>Apache httpd 模块关系<br><img src="/../../img/blog/2befb398276e7bdfba84ff65de32a786_MD5.gif"><br>在实际的开发中，随着系统功能的完善，软件整体的结构会越来越复杂，通常开发人员会将软件划分为可理解的多个子模块，各个子模块通过协作，完成各种各样的需求。<br>下面有个例子，是某软件设计时的一个草稿：<br><img src="/../../img/blog/9f04472ca0960627d840020534ab1397_MD5.gif"><br>IDP 支持层为一个相对独立的子系统，其中包括如数据库管理器，配置信息管理器等模块，另外为了提供更大的灵活性，将很多其他的模块抽取出来作为外部模块，而支持层提供一个模块管理器，来负责加载&#x2F;卸载这些外部的模块集合。<br>这些模块间的关系较为复杂，并且有部分模块关系密切，应归类为一个子系统中，上图对应的 <code>dot</code> 脚本为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">digraph idp_modules&#123;</span><br><span class="line"> </span><br><span class="line">rankdir = TB;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 12;</span><br><span class="line"> </span><br><span class="line">node [ fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, shape = &quot;record&quot; ]; </span><br><span class="line">edge [ fontname = &quot;Microsoft YaHei&quot;, fontsize = 12 ];</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_sl&#123;</span><br><span class="line">        label=&quot;IDP支持层&quot;;</span><br><span class="line">        bgcolor=&quot;mintcream&quot;;</span><br><span class="line">        node [shape=&quot;Mrecord&quot;, color=&quot;skyblue&quot;, style=&quot;filled&quot;];</span><br><span class="line">        network_mgr [label=&quot;网络管理器&quot;];</span><br><span class="line">        log_mgr [label=&quot;日志管理器&quot;];</span><br><span class="line">        module_mgr [label=&quot;模块管理器&quot;];</span><br><span class="line">        conf_mgr [label=&quot;配置管理器&quot;];</span><br><span class="line">        db_mgr [label=&quot;数据库管理器&quot;];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_md&#123;</span><br><span class="line">        label=&quot;可插拔模块集&quot;;</span><br><span class="line">        bgcolor=&quot;lightcyan&quot;;</span><br><span class="line">        node [color=&quot;chartreuse2&quot;, style=&quot;filled&quot;];</span><br><span class="line">        mod_dev [label=&quot;开发支持模块&quot;];</span><br><span class="line">        mod_dm [label=&quot;数据建模模块&quot;];</span><br><span class="line">        mod_dp [label=&quot;部署发布模块&quot;];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">mod_dp -&gt; mod_dev [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dp -&gt; mod_dm [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dp -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">mod_dev -&gt; mod_dm [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dev -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">mod_dm -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h3><p>有限自动机示意图<br><img src="/../../img/blog/4524e3fd3dbec4dc95770ca17e113fcc_MD5.gif"><br>上图是一个简易有限自动机，接受 <code>a</code> 及 <code>a</code> 结尾的任意长度的串。其脚本定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">digraph automata_0 &#123;</span><br><span class="line">size = &quot;8.5, 11&quot;;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line"> </span><br><span class="line">node [shape = circle, fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line"> </span><br><span class="line">0 [ style = filled, color=lightgrey ];</span><br><span class="line">2 [ shape = doublecircle ];</span><br><span class="line"> </span><br><span class="line">0 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">0 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line">1 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">1 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line">2 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">2 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line"> </span><br><span class="line">&quot;Machine: a&quot; [ shape = plaintext ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形状值为 plaintext 的表示不用绘制边框，仅展示纯文本内容，这个在绘图中，绘制指示性的文本时很有用，如上图中的 <code>Machine: a</code>。</p><h3 id="OSGi-中模块的生命周期图"><a href="#OSGi-中模块的生命周期图" class="headerlink" title="OSGi 中模块的生命周期图"></a>OSGi 中模块的生命周期图</h3><p>OSGi 中，模块具有生命周期，从安装到卸载，可能的状态具有已安装，已就绪，正在启动，已启动，正在停止，已卸载等。如下图所示：<br><img src="/../../img/blog/7447c00aa1d954a54cf4e9f277959905_MD5.gif"><br>对应的脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">digraph module_lc&#123;</span><br><span class="line">rankdir=TB;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 12;</span><br><span class="line"> </span><br><span class="line">node [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, shape = &quot;Mrecord&quot;, color=&quot;skyblue&quot;, style=&quot;filled&quot;]; </span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, color=&quot;darkgreen&quot; ];</span><br><span class="line"> </span><br><span class="line">installed [label=&quot;已安装状态&quot;];</span><br><span class="line">resolved [label=&quot;已就绪状态&quot;];</span><br><span class="line">uninstalled [label=&quot;已卸载状态&quot;];</span><br><span class="line">starting [label=&quot;正在启动&quot;];</span><br><span class="line">active [label=&quot;已激活(运行)状态&quot;];</span><br><span class="line">stopping [label=&quot;正在停止&quot;];</span><br><span class="line">start [label=&quot;&quot;, shape=&quot;circle&quot;, width=0.5, fixedsize=true, style=&quot;filled&quot;, color=&quot;black&quot;];</span><br><span class="line"> </span><br><span class="line">start -&gt; installed [label=&quot;安装&quot;];</span><br><span class="line">installed -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">installed -&gt; resolved [label=&quot;准备&quot;];</span><br><span class="line">installed -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">resolved -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">resolved -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">resolved -&gt; starting [label=&quot;启动&quot;];</span><br><span class="line">starting -&gt; active [label=&quot;&quot;];</span><br><span class="line">active -&gt; stopping [label=&quot;停止&quot;];</span><br><span class="line">stopping -&gt; resolved [label=&quot;&quot;]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h2><p>一棵简单的抽象语法树 (AST)<br>表达式 <code>(3+4)*5</code> 在编译时期，会形成一棵语法树，一边在计算时，先计算 <code>3+4</code> 的值，最后与 5 相乘。<br><img src="/../../img/blog/0b07148c9b17e090e58a50cc7abbcf9d_MD5.gif"><br>对应的脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">digraph ast&#123;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line"> </span><br><span class="line">node [shape = circle, fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">node [shape=&quot;plaintext&quot;];</span><br><span class="line"> </span><br><span class="line">mul [label=&quot;mul(*)&quot;];</span><br><span class="line">add [label=&quot;add(+)&quot;];</span><br><span class="line"> </span><br><span class="line">add -&gt; 3</span><br><span class="line">add -&gt; 4;</span><br><span class="line">mul -&gt; add;</span><br><span class="line">mul -&gt; 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的-UML-类图"><a href="#简单的-UML-类图" class="headerlink" title="简单的 UML 类图"></a>简单的 UML 类图</h3><p>下面是一简单的 UML 类图，<code>Dog</code> 和 <code>Cat</code> 都是 <code>Animal</code> 的子类，<code>Dog</code> 和 <code>Cat</code> 同属一个包，且有可能有联系 <code>(0..n)</code>。<br><img src="/../../img/blog/e5cfa1d03e1920983c78f7e753014b20_MD5.gif"><br>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line"> </span><br><span class="line">fontname = &quot;Courier New&quot;</span><br><span class="line">fontsize = 10</span><br><span class="line"> </span><br><span class="line">node [ fontname = &quot;Courier New&quot;, fontsize = 10, shape = &quot;record&quot; ];</span><br><span class="line">edge [ fontname = &quot;Courier New&quot;, fontsize = 10 ];</span><br><span class="line"> </span><br><span class="line">Animal [ label = &quot;&#123;Animal |+ name : String\l+ age : int\l|+ die() : void\l&#125;&quot; ];</span><br><span class="line"> </span><br><span class="line">    subgraph clusterAnimalImpl&#123;</span><br><span class="line">        bgcolor=&quot;yellow&quot;</span><br><span class="line">        Dog [ label = &quot;&#123;Dog||+ bark() : void\l&#125;&quot; ];</span><br><span class="line">        Cat [ label = &quot;&#123;Cat||+ meow() : void\l&#125;&quot; ];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">edge [ arrowhead = &quot;empty&quot; ];</span><br><span class="line"> </span><br><span class="line">Dog-&gt;Animal;</span><br><span class="line">Cat-&gt;Animal;</span><br><span class="line">Dog-&gt;Cat [arrowhead=&quot;none&quot;, label=&quot;0..*&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态图-1"><a href="#状态图-1" class="headerlink" title="状态图"></a>状态图</h3><p><img src="/../../img/blog/ad495299eb1919018e96a0f6f47882a8_MD5.gif"><br>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">digraph finite_state_machine &#123;</span><br><span class="line">rankdir = LR;</span><br><span class="line">size = &quot;8,5&quot;</span><br><span class="line"> </span><br><span class="line">node [shape = doublecircle]; </span><br><span class="line"> </span><br><span class="line">LR_0 LR_3 LR_4 LR_8;</span><br><span class="line"> </span><br><span class="line">node [shape = circle];</span><br><span class="line"> </span><br><span class="line">LR_0 -&gt; LR_2 [ label = &quot;SS(B)&quot; ];</span><br><span class="line">LR_0 -&gt; LR_1 [ label = &quot;SS(S)&quot; ];</span><br><span class="line">LR_1 -&gt; LR_3 [ label = &quot;S($end)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_6 [ label = &quot;SS(b)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_5 [ label = &quot;SS(a)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_4 [ label = &quot;S(A)&quot; ];</span><br><span class="line">LR_5 -&gt; LR_7 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_5 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_6 -&gt; LR_6 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_6 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_7 -&gt; LR_8 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_7 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_8 -&gt; LR_6 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_8 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123; </span><br><span class="line">    rankdir=&quot;LR&quot;; </span><br><span class="line">    node[shape=&quot;point&quot;, width=0, height=0]; </span><br><span class="line">    edge[arrowhead=&quot;none&quot;, style=&quot;dashed&quot;] </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        LC[shape=&quot;plaintext&quot;]; </span><br><span class="line">        LC -&gt; step00 -&gt; step01 -&gt; step02 -&gt; step03 -&gt; step04 -&gt; step05; </span><br><span class="line">    &#125; </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        Agency[shape=&quot;plaintext&quot;];</span><br><span class="line">        Agency -&gt; step10 -&gt; step11 -&gt; step12 -&gt; step13 -&gt; step14 -&gt; step15; </span><br><span class="line">    &#125; </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        Agent[shape=&quot;plaintext&quot;];</span><br><span class="line">        Agent -&gt; step20 -&gt; step21 -&gt; step22 -&gt; step23 -&gt; step24 -&gt; step25; </span><br><span class="line">    &#125; </span><br><span class="line">    step00 -&gt; step10 [label=&quot;sends email new custumer&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step11 -&gt; step01 [label=&quot;declines&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step12 -&gt; step02 [label=&quot;accepts&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step13 -&gt; step23 [label=&quot;forward to&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step24 -&gt; step14; </span><br><span class="line">    step14 -&gt; step04 [arrowhead=&quot;normal&quot;]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rankdir=&quot;LR&quot;</code> 表示，布局从左 <code>L</code> 到右 <code>R</code>。可以看到，在代码中有 <code>&#123;&#125;</code> 括起来的部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    rank=&quot;same&quot;; </span><br><span class="line">    edge[style=&quot;solided&quot;];</span><br><span class="line">    Agency[shape=&quot;plaintext&quot;];</span><br><span class="line">    Agency -&gt; step10 -&gt; step11 -&gt; step12 -&gt; step13 -&gt; step14 -&gt; step15; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个 <code>rank=&quot;same&quot;</code> 的 block 中的所有节点都会在同一条线上。我们设置了所有的线为虚线，但是在该 block 中，将线改为 <code>solided</code>。<br><img src="/../../img/blog/e2e975df8269fb35db1608ded52aa67f_MD5.png"></p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://max.book118.com/html/2017/0513/106648582.shtm">Graphviz中文教程指南.pdf (book118.com)</a></p><p>事实上，从 <code>dot</code> 的语法及上述的示例中，很容易看出，dot 脚本很容易被其他语言生成。比如，使用一些简单的数据库查询就可以生成数据库中的 ER 图的 dot 脚本。<br>如果你追求高效的开发速度，并希望快速的将自己的想法画出来，那么 <code>graphviz</code> 是一个很不错的选择。<br>当然，<code>graphviz</code> 也有一定的局限，比如绘制时序图 (序列图) 就很难实现。<code>graphviz</code> 的节点出现在画布上的位置事实上是不确定的，依赖于所使用的布局算法，而不是在脚本中出现的位置，这可能使刚开始接触 <code>graphviz</code> 的开发人员有点不适应。<code>graphviz</code> 的强项在于自动布局，当图中的顶点和边的数目变得很多的时候，才能很好的体会这一特性的好处：<br><img src="/../../img/blog/afab2574c523235e7ade49f26ccb1580_MD5.gif"><br>比如上图，或者较上图更复杂的图，如果采用手工绘制显然是不可能的，只能通过 <code>graphviz</code> 提供的自动布局引擎来完成。如果仅用于展示模块间的关系，子模块与子模块间通信的方式，模块的逻辑位置等，<code>graphviz</code> 完全可以胜任，但是如果图中对象的物理位置必须是准确的，如节点 A 必须位于左上角，节点 B 必须与 A 相邻等特性，使用 <code>graphviz</code> 则很难做到。毕竟，它的强项是自动布局，事实上，所有的节点对与布局引擎而言，权重在初始时都是相同的，只是在渲染之后，节点的大小，形状等特性才会影响权重。<br>本文只是初步介绍了 <code>graphviz</code> 的简单应用，如图的定义，顶点&#x2F;边的属性定义，如果运行等，事实上还有很多的属性，如画布的大小，字体的选择，颜色列表等，大家可以通过 <code>graphviz</code> 的官网来找到更详细的资料。<br>文中的代码都已经在 <a href="https://github.com/abruzzi/graphviz-scripts">Github</a> 上。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/dot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git相关</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/Git%E7%9B%B8%E5%85%B3.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/Git%E7%9B%B8%E5%85%B3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-常用命令和介绍"><a href="#Git-常用命令和介绍" class="headerlink" title="Git 常用命令和介绍"></a>Git 常用命令和介绍</h1><p><a href="https://mp.weixin.qq.com/s/I4VIT0aj_WMiEbVfHhhqpA">我看还有谁不动Git (qq.com)</a></p><h1 id="Git-提交规范引入指南"><a href="#Git-提交规范引入指南" class="headerlink" title="Git 提交规范引入指南"></a>Git 提交规范引入指南</h1><p><a href="https://juejin.cn/post/6844903793033756680">超详细的Git提交规范引入指南 - 掘金 (juejin.cn)</a><br><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/">约定式提交 (conventionalcommits.org)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">feat - 新功能 feature  </span><br><span class="line">fix - 修复 bug  </span><br><span class="line">docs - 文档注释  </span><br><span class="line">style - 代码格式(不影响代码运行的变动)  </span><br><span class="line">refactor - 重构、优化(既不增加新功能，也不是修复bug)  </span><br><span class="line">perf - 性能优化  </span><br><span class="line">test - 增加测试  </span><br><span class="line">chore - 构建过程或辅助工具的变动  </span><br><span class="line">revert - 回退  </span><br><span class="line">build - 打包</span><br></pre></td></tr></table></figure><h1 id="在-Terminal-中通过代理访问-GitHub"><a href="#在-Terminal-中通过代理访问-GitHub" class="headerlink" title="在 Terminal 中通过代理访问 GitHub"></a>在 Terminal 中通过代理访问 GitHub</h1><h2 id="设置-Git-局部代理"><a href="#设置-Git-局部代理" class="headerlink" title="设置 Git 局部代理"></a>设置 Git 局部代理</h2><p>如果你想在本地已有的仓库中，让 <code>pull</code> 或者 <code>push</code> 命令经过代理，就需要将 git 工具的代理设置为上一步中输入的端口（我的端口是 41091）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> path/to/your/repo/</span><br><span class="line">$ git config http.proxy http://127.0.0.1:41091</span><br><span class="line">$ git config https.proxy https://127.0.0.1:41091</span><br><span class="line">$ git config --list <span class="comment"># 查看设置结果</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>这里使用的是 git 工具的 <strong>局部代理</strong>（没有 <code>--global</code> 标示），所以仅该目录下的 git 命令会经过代理。</li><li>127.0.0.1 是 localhost 的 IP 地址，如果你的代理不在同一个计算机上，就需要输入对应的 IP 地址。</li><li>如果上一步选择了 SOCKS5 协议，使用以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config http.proxy socks5://127.0.0.1:1090</span><br><span class="line">$ git config https.proxy socks5://127.0.0.1:1090</span><br></pre></td></tr></table></figure><ul><li>如果想要停用代理，输入以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --unset http.proxy</span><br><span class="line">$ git config --unset https.proxy</span><br></pre></td></tr></table></figure><h2 id="设置-Git-全局代理"><a href="#设置-Git-全局代理" class="headerlink" title="设置 Git 全局代理"></a>设置 Git 全局代理</h2><p>如果你想让 <code>clone</code> 命令经过代理，首先需要设置 git 工具的 <strong>全局代理</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy http://127.0.0.1:41091</span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:41091</span><br></pre></td></tr></table></figure><p>在 <code>clone</code> 完成之后，记得停用全局代理，否则之后所有的 git 命令都会经过代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --unset http.proxy</span><br><span class="line">$ git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>如果想要在克隆的文件夹中打开局部代理，可以参照第一种情况。</p><h1 id="下载单个-Github-文件夹（实际下载整个文件夹，速度还行）"><a href="#下载单个-Github-文件夹（实际下载整个文件夹，速度还行）" class="headerlink" title="下载单个 Github 文件夹（实际下载整个文件夹，速度还行）"></a>下载单个 Github 文件夹（实际下载整个文件夹，速度还行）</h1><p>刚写了个库 <a href="https://link.zhihu.com/?target=https://github.com/ykfe/dclone">dclone</a>,看了一眼应该是 github 上最简单的实现其他的库实现都写的特别复杂，可以让你只下载单个文件夹提升你的下载速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g dclone</span><br><span class="line">$ dclone <span class="attr">https</span>:<span class="comment">//github.com/ykfe/egg-react-ssr/tree/dev/example/ssr-with-loadable</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/flutter.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/flutter.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><ul><li><a href="https://book.flutterchina.club/">第二版序 | 《Flutter实战·第二版》 (flutterchina.club)</a></li></ul><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ul><li><a href="https://isar.dev/zh/">主页 | Isar 数据库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端编辑器配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="helix"><a href="#helix" class="headerlink" title="helix"></a>helix</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://docs.helix-editor.com/configuration.html">Configuration (helix-editor.com)</a></li><li><a href="https://zjp-cn.github.io/helix-book/title-page.html">Helix - Helix Book 中文翻译 (较旧)</a></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><ul><li><a href="https://github.com/helix-editor/helix/discussions/6209">Using PowerShell core as shell</a></li><li><a href="https://github.com/helix-editor/helix/discussions/7455">shell编码问题</a></li><li><a href="https://github.com/helix-editor/helix/discussions/8776">使用nushell</a></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>即使 Helix 在零配置下也可以使用，如果想要更加符合自己的习惯还是需要一些配置。 <a href="https://link.zhihu.com/?target=https://github.com/erasin/helix-config">erasin&#x2F;helix-config</a> 是我自己正在使用的配置文件。</p><p>在 Helix 中,加载配置的顺序是 <code>默认配置</code> –&gt;&gt; <code>.config/helix/</code> 中自定义配置 –&gt; <code>self-project/.helix/</code> 项目文件夹下自定义配置。在三层配置这种常规设计基本上可以满足各种使用的情况了。</p><p>配置文件结构主要有：</p><ul><li>config.toml &lt;– 编辑器配置</li><li>language.toml &lt;– 语言支持配置</li><li>themes&#x2F; &lt;– 自定义主题<ul><li>self-theme1.toml</li></ul></li><li>icons&#x2F; &lt;– 自定义图标<ul><li>self-icons.toml</li></ul></li></ul><h3 id="config-toml"><a href="#config-toml" class="headerlink" title="config.toml"></a>config.toml</h3><p>配置主要提供 true-color 支持,自定义显示,以及自定义键盘布局。在编辑器器中使用 <code>:set-option</code> 可以看到配置选项,或者阅读官方文档配置。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span> = <span class="string">&quot;zed_onedark&quot;</span></span><br><span class="line"><span class="comment"># icons = &quot;nerd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># editor 编辑器</span></span><br><span class="line"><span class="section">[editor]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 真彩支持</span></span><br><span class="line"><span class="attr">true-color</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标样式</span></span><br><span class="line"><span class="section">[editor.cursor-shape]</span></span><br><span class="line"><span class="attr">insert</span> = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="attr">normal</span> = <span class="string">&quot;block&quot;</span></span><br><span class="line"><span class="attr">select</span> = <span class="string">&quot;underline&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态栏定义</span></span><br><span class="line"><span class="section">[editor.statusline]</span></span><br><span class="line"><span class="comment"># [#2869] file-type-icon</span></span><br><span class="line"><span class="attr">left</span> = [<span class="string">&quot;mode&quot;</span>, <span class="string">&quot;spacer&quot;</span>, <span class="string">&quot;spinner&quot;</span>, <span class="string">&quot;spacer&quot;</span>,  <span class="string">&quot;file-name&quot;</span>, <span class="string">&quot;file-modification-indicator&quot;</span>]</span><br><span class="line"><span class="attr">center</span> = [<span class="string">&quot;diagnostics&quot;</span>,<span class="string">&quot;workspace-diagnostics&quot;</span>]</span><br><span class="line"><span class="attr">right</span> = [<span class="string">&quot;position-percentage&quot;</span>, <span class="string">&quot;file-encoding&quot;</span>,  <span class="string">&quot;file-type&quot;</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键盘布局</span></span><br><span class="line"><span class="section">[keys.normal]</span></span><br><span class="line"><span class="comment"># use `li` or remap `after insert`</span></span><br><span class="line"><span class="attr">a</span> = [<span class="string">&quot;move_char_right&quot;</span>,<span class="string">&quot;insert_mode&quot;</span>]</span><br><span class="line"><span class="attr">&quot;C-s&quot;</span> = <span class="string">&quot;:write&quot;</span>  <span class="comment"># 原保存跳转列表位置，修改为 C-j</span></span><br><span class="line"><span class="attr">&quot;C-j&quot;</span> = [<span class="string">&quot;save_selection&quot;</span>]</span><br><span class="line"><span class="attr">&quot;C-r&quot;</span> = <span class="string">&quot;:reload&quot;</span></span><br><span class="line"><span class="attr">&quot;C-z&quot;</span> = <span class="string">&quot;normal_mode&quot;</span>     <span class="comment"># replace suspend</span></span><br><span class="line"><span class="attr">&quot;C-q&quot;</span> = <span class="string">&quot;:quit&quot;</span></span><br><span class="line"><span class="attr">&quot;A-/&quot;</span> = <span class="string">&quot;toggle_comments&quot;</span></span><br><span class="line"><span class="attr">&quot;\\&quot;</span> = <span class="string">&quot;:reflow&quot;</span> <span class="comment"># |</span></span><br><span class="line"><span class="attr">&quot;X&quot;</span> = <span class="string">&quot;extend_line_above&quot;</span></span><br><span class="line"><span class="attr">&quot;Z&quot;</span> = &#123; <span class="string">&quot;Z&quot;</span> = [<span class="string">&quot;:quit&quot;</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># space mode</span></span><br><span class="line"><span class="section">[keys.normal.space]</span></span><br><span class="line"><span class="attr">&quot;x&quot;</span> = <span class="string">&quot;:buffer-close&quot;</span></span><br><span class="line"><span class="attr">&quot;w&quot;</span> = &#123; <span class="string">&quot;r&quot;</span> = <span class="string">&quot;:config-reload&quot;</span> &#125;</span><br><span class="line"><span class="attr">&quot;.&quot;</span> = <span class="string">&quot;file_picker_in_current_buffer_directory&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[keys.insert]</span></span><br><span class="line"><span class="comment"># macos 自动切换到英文环境</span></span><br><span class="line"><span class="comment"># &quot;esc&quot; = [&quot;:sh macism com.apple.keylayout.ABC&quot;, &quot;normal_mode&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [keys.select]</span></span><br></pre></td></tr></table></figure><p>Helix 提供 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/keymap.html">keymap</a> 和 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/commands.html">commands</a> 命令, 这些命令在自定义键盘布局中自由组合，命令组会顺序处理。比如 <code>a = [&quot;move_char_right&quot;,&quot;insert_mode&quot;]</code> Helix 中 <code>a</code> 默认为选区追加, 将其覆盖为字符向后移动一位编辑模式。详细的请参看 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/configuration.html">配置文档</a> 。</p><h2 id="lsp"><a href="#lsp" class="headerlink" title="lsp"></a>lsp</h2><p>通过 <code>hx --health language</code> 检查 lsp<br>内置语言支持 Tree-Sitter 查看项目的 <a href="https://link.zhihu.com/?target=https://github.com/helix-editor/helix/blob/master/languages.toml">languages.toml</a> 可以看到支持的语言。<br><a href="https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers">How to install the default language servers · helix-editor&#x2F;helix Wiki</a><br>编写 <code>languages.toml</code>，保存在 <code>~/.config/helix/</code> 路径下。参考官网的配置就好，内容如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[language]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;rust&quot;</span></span><br><span class="line"><span class="attr">auto-format</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If this doesn&#x27;t work, you might be on a older release version which handles this differently.</span></span><br><span class="line"><span class="comment"># Try using [language.config.check] instead of [language-server.rust-analyzer.config.check]</span></span><br><span class="line"><span class="section">[language-server.rust-analyzer.config.check]</span></span><br><span class="line"><span class="attr">command</span> = <span class="string">&quot;clippy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[grammar]]</span></span><br><span class="line"><span class="comment"># name = &quot;rust&quot;</span></span><br><span class="line"><span class="comment"># source = &#123; git = &quot;https://github.com/tree-sitter/tree-sitter-rust&quot;, rev = &quot;????&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下这是复制粘贴来的。</span></span><br><span class="line"><span class="section">[[language]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="attr">scope</span> = <span class="string">&quot;source.python&quot;</span></span><br><span class="line"><span class="attr">injection-regex</span> = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="attr">file-types</span> = [<span class="string">&quot;py&quot;</span>,<span class="string">&quot;pyi&quot;</span>,<span class="string">&quot;py3&quot;</span>,<span class="string">&quot;pyw&quot;</span>,<span class="string">&quot;ptl&quot;</span>,<span class="string">&quot;.pythonstartup&quot;</span>,<span class="string">&quot;.pythonrc&quot;</span>,<span class="string">&quot;SConstruct&quot;</span>]</span><br><span class="line"><span class="attr">shebangs</span> = [<span class="string">&quot;python&quot;</span>]</span><br><span class="line"><span class="attr">roots</span> = [<span class="string">&quot;setup.py&quot;</span>, <span class="string">&quot;setup.cfg&quot;</span>, <span class="string">&quot;pyproject.toml&quot;</span>]</span><br><span class="line"><span class="attr">comment-token</span> = <span class="string">&quot;#&quot;</span></span><br><span class="line"><span class="attr">language-server</span> = &#123; command = <span class="string">&quot;pyright-langserver&quot;</span>, args = [<span class="string">&quot;--stdio&quot;</span>] &#125;</span><br><span class="line"><span class="attr">indent</span> = &#123; tab-width = <span class="number">4</span>, unit = <span class="string">&quot;    &quot;</span> &#125;</span><br><span class="line"><span class="comment"># will get &quot;Async jobs timed out&quot; errors if this empty config is not added</span></span><br><span class="line"><span class="attr">config</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># [language-server.pyright-langserver.config.check]</span></span><br><span class="line"><span class="comment"># command = &quot;clippy&quot;</span></span><br></pre></td></tr></table></figure><p>在配置文件中 “<code>[[grammar]]</code>“ 底下有指定要安装某个语言的 LSP 服务器，但是我不理解其中一些配置参数。这个配置文件的内容我是仿照 <a href="https://docs.helix-editor.com/languages.html">Languages (helix-editor.com)</a> 复制粘贴的。</p><h3 id="自定义语言支持"><a href="#自定义语言支持" class="headerlink" title="自定义语言支持"></a>自定义语言支持</h3><p>如果有自定义的特殊语言支持,一种是提交 issues 到官方项目寻求帮助,另外一种是自己动手处理,具体可以分解以下步骤:</p><ol><li><p>向 <code>languages.toml</code> 中追加语言和语言的 tree-sitter 实现。</p></li><li><p>向 <code>runtime/queries/</code> 下对语言 <code>hightlights.scm</code> 高亮支持 , <code>textobjects.scm</code> 文本选择支持, <code>indents.scm</code> 缩进支持。</p></li><li><p>如果是在 helix 项目中提交代码,需要执行 <code>cargo xtask docgen</code> 来生成文档支持, 自定义的则不需要这一步。</p></li><li><p><code>hx -g fetch &amp; hx -g build</code> 会自动拉去配置 tree-sitter 并编译。之后就可以测试了。</p></li></ol><h2 id="可参考"><a href="#可参考" class="headerlink" title="可参考"></a>可参考</h2><ul><li><a href="https://erasin.wang/helix/tutor">helix editor 中文教程 - 编程与开发</a></li><li><a href="https://github.com/Rhylan2333/my_helix_editor_config/tree/master">GitHub - Rhylan2333&#x2F;my_helix_editor_config: 适合我的Helix编辑器配置文件。</a></li></ul><h1 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装必要组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install neovim neovide git lazygit gcc ripgrep fd unzip tree-sitter luarocks</span><br></pre></td></tr></table></figure><p>下载并安装 LazyVim 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LazyVim/starter $env:LOCALAPPDATA\nvim --depth=1</span><br></pre></td></tr></table></figure><p>为了显示 Neovim 界面中的图标，需要安装一款 <a href="https://www.nerdfonts.com/font-downloads">Nerd Font</a> 字体，这里选择 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/UbuntuMono.zip">UbuntuMono Nerd Font</a> 字体。可以通过 Scoop 进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add nerd-fonts</span><br><span class="line">scoop install UbuntuMono-NF</span><br></pre></td></tr></table></figure><p>在配置文件 <code>$env:LOCALAPPDATA\nvim\lua\config\options.lua</code> 中添加下行代码来设置字体：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> opt = vim.opt</span><br><span class="line"> </span><br><span class="line">opt.guifont = <span class="string">&quot;UbuntuMono Nerd Font:h12&quot;</span></span><br></pre></td></tr></table></figure><p>在命令行中使用 <code>neovide</code> 命令就可以启动 Neovim 了。值得注意的是， Neovide 只要使用参数 <code>--wsl</code> 就可以在 WSL 环境中运行，不过这时 LazyVim 的配置也需要安装到 WSL 环境中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/LazyVim/starter ~/.config/nvim --depth=1</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>程序第一次运行时会自动下载和安装插件。如果遇到网络问题而导致安装失败也没关系，按下 <code>R</code> （大写）重新安装直至成功为止。所有插件安装成功后， <code>nvim-treesitter</code> 还会继续安装组件，等所有插件和组件安装完毕后，按下 <code>q</code> 退出安装界面。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.fournoas.com/posts/neovim-on-windows/">Windows 下使用 Neovim · 白汤四物 (fournoas.com)</a></li><li><a href="https://www.cnblogs.com/zwyyy456/p/17479396.html">Neovim 的配置与使用 - zwyyy456 (cnblogs.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs管理</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/nodejs%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/nodejs%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="nvm-管理-node-版本"><a href="#nvm-管理-node-版本" class="headerlink" title="nvm 管理 node 版本"></a>nvm 管理 node 版本</h1><h2 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h2><p>终端输入：</p><p>设置 npm_mirror:</p><p><code>nvm npm_mirror https://npmmirror.com/mirrors/npm/</code></p><p> 设置 node_mirror:</p><p><code>nvm node_mirror https://npmmirror.com/mirrors/node/</code></p><h2 id="全局安装-npm"><a href="#全局安装-npm" class="headerlink" title="全局安装 npm"></a>全局安装 npm</h2><p>安装 node 的时候，npm 其实也已经一起安装了。因为 nvm 可以管理多个版本的 node，如果每次添加一个 node 版本都要安装一堆的包很麻烦，如果有一个 npm 可以让各个版本的 node 共用，就不会这么麻烦了。</p><p>简单的三步就可以配置一个全局的 npm。</p><ol><li><p><code>npm config set prefix E:\nvm\npm</code> &#x2F;&#x2F;配置用 npm 下载包时全局安装的包路径。</p></li><li><p><code>npm install npm -g</code> &#x2F;&#x2F;安装全局 npm，不同的 node 都使用这个 npm。想更新全局的 npm 的话首先删除全局路径 (就是上一行命令的地址，可以使用 npm config ls 查看) 下的 npm，再执行一次这个命令即可。</p></li><li><p>在用户变量中添加 <code>NPM_HOME = E:\nvm\npm</code>，path 中添加%NPM_HOME%。这里需要注意的是，%NPM_HOME% 要添加在%NVM_SYMLINK% 之前，避免 npm 访问到的是 nodejs 中自带的 npm 包管理工具。</p></li></ol><h2 id="使用-nvm-管理版本（nvm-常用命令）"><a href="#使用-nvm-管理版本（nvm-常用命令）" class="headerlink" title="使用 nvm 管理版本（nvm 常用命令）"></a>使用 nvm 管理版本（nvm 常用命令）</h2><p><strong>nvm install latest</strong> 安装最新版本 node.js<br><strong>nvm use 版本号</strong> 使用某一具体版本，例如 ：nvm use 14.3.0<br><strong>nvm list</strong> 列出当前已安装的所有版本<br><strong>nvm ls</strong> 列出当前已安装的所有版本<br><strong>nvm uninstall 版本号</strong> 卸载某一具体版本，例如：nvm use 14.3.0<br><strong>nvm ls-remote</strong> Mac 版本中,列出全部可以安装的 node 版本<br><strong>nvm ls available</strong> windows 版本,列出全部可以安装的 node 版本<br><strong>nvm current</strong> 显示当前的版本<br><strong>nvm alias</strong> 给不同的版本号添加别名<br><strong>nvm unalias</strong> 删除已定义的别名<br><strong>nvm reinstall-packages</strong> 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</p><h1 id="nrm-使用详解"><a href="#nrm-使用详解" class="headerlink" title="nrm 使用详解"></a>nrm 使用详解</h1><p><a href="https://github.com/Pana/nrm" title=" https://github.com/Pana/nrm">nrm</a>（NPM registry manager）是 npm 的镜像源管理工具，使用它可以快速切换 npm 源。</p><ul><li>全局安装</li></ul><p><code>$ npm i -g nrm</code></p><ul><li>查看版本</li></ul><p><code>$ nrm -V</code></p><ul><li>查看所有源</li></ul><p>其中 <code>*</code> 号表示当前使用的源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nrm ls</span><br><span class="line"></span><br><span class="line">* npm -------- https://registry.npmjs.org/</span><br><span class="line">  yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">  cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">  taobao ----- https://www.npmmirror.com/</span><br><span class="line">  nj --------- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure><p>或者通过 <code>nrm current</code> 命令查看当前源的名称。</p><ul><li>切换源</li></ul><p>其中 <code>&lt;registry&gt;</code> 就是上面命令所列出来的名称。</p><p>相比上面的命令，是不是方便好记多了。</p><p><code>$ nrm use &lt;registry&gt; # 例如 nrm use taobao</code></p><blockquote><p>注意切换源之后，我们安装依赖仍使用 <code>npm i &lt;name&gt;</code> 的方式来进行安装。</p></blockquote><ul><li>添加源</li></ul><p>适用于企业内部定制的私有源，<code>&lt;registry&gt;</code> 表示源名称，<code>&lt;url&gt;</code> 表示源地址。</p><p><code>$ nrm add &lt;registry&gt; &lt;url&gt;</code></p><ul><li>删除源</li></ul><p><code>$ nrm del &lt;registry&gt;</code></p><ul><li>测试源的响应时间</li></ul><p><code>$ nrm test &lt;registry&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
            <tag> 编程语言/nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归档2</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A32.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A32.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-11-22H2-开启-DoH（DNS-over-HTTPS）"><a href="#Windows-11-22H2-开启-DoH（DNS-over-HTTPS）" class="headerlink" title="Windows 11 22H2 开启 DoH（DNS over HTTPS）"></a>Windows 11 22H2 开启 DoH（DNS over HTTPS）</h1><p><a href="https://zhuanlan.zhihu.com/p/590105276">Windows 11 22H2开启 DoH（DNS over HTTPS） - 知乎 (zhihu.com)</a><br><a href="https://www.icoa.cn/a/953.html">Edge 和 Chrome 浏览器设置 DoH 加密 DNS 的方法-逍遥峡谷 (icoa.cn)</a></p><h1 id="在-Windows-11-中卸载-Microsoft-Edge-和阻止-Microsoft-Edge-重新安装"><a href="#在-Windows-11-中卸载-Microsoft-Edge-和阻止-Microsoft-Edge-重新安装" class="headerlink" title="在 Windows 11 中卸载 Microsoft Edge 和阻止 Microsoft Edge 重新安装"></a>在 Windows 11 中卸载 Microsoft Edge 和阻止 Microsoft Edge 重新安装</h1><p><a href="https://www.sysgeek.cn/windows-11-uninstall-microsoft-edge/">https://www.sysgeek.cn/windows-11-uninstall-microsoft-edge/</a></p><h1 id="gitbook-两个-bug-解决方法与修复工具"><a href="#gitbook-两个-bug-解决方法与修复工具" class="headerlink" title="gitbook 两个 bug 解决方法与修复工具"></a>gitbook 两个 bug 解决方法与修复工具</h1><p><a href="https://www.imxqy.com/soft/gitbook-repair.html">https://www.imxqy.com/soft/gitbook-repair.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>归档1</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A31.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A31.html</url>
      
        <content type="html"><![CDATA[<h1 id="油猴脚本访问本地文件"><a href="#油猴脚本访问本地文件" class="headerlink" title="油猴脚本访问本地文件"></a>油猴脚本访问本地文件</h1><h2 id="Chrome-浏览器如何开启文件访问权限"><a href="#Chrome-浏览器如何开启文件访问权限" class="headerlink" title="Chrome 浏览器如何开启文件访问权限"></a>Chrome 浏览器如何开启文件访问权限</h2><p>点击右侧三个点 -》更多工具 -》拓展程序 -》详情</p><p><img src="/../../img/blog/4273299c4c579271d48f0ac66f0c88a7_MD5.png" alt="图片.png" title="图片.png"></p><p>打开允许访问文件网址</p><p><img src="/../../img/blog/0f54277cfaba5532eec2d80e0ac5e5ac_MD5.png" alt="图片.png" title="图片.png"></p><h2 id="火狐浏览器如何开启文件访问权限"><a href="#火狐浏览器如何开启文件访问权限" class="headerlink" title="火狐浏览器如何开启文件访问权限"></a>火狐浏览器如何开启文件访问权限</h2><p>FireFox 默认没有提供一个页面可以设置这个选项，但可以通过修改浏览器的配置项，来达到目地。</p><p>具体方法如下：</p><p>I: 在地址栏输入 <code>about:config</code> 并回车, 进入配置项页面 (可能会有一个警告页面，直接点击按钮进入就好了）。</p><p>II: 配置以下三项</p><table><thead><tr><th>条目名称</th><th>值</th><th>提醒</th></tr></thead><tbody><tr><td>capability.policy.policynames</td><td>localfilelinks</td><td>-</td></tr><tr><td>capability.policy.localfilelinks.sites</td><td>moz-extension:&#x2F;&#x2F;612ab18c-c29e-4211-bd50-3f208d227db7</td><td>这个值，你应该使用自己拿到的 <code>扩展标识</code>, 如果你允许多个扩展的话，这里用空格隔开</td></tr><tr><td>capability.policy.localfilelinks.checkloaduri.enabled</td><td>allAccess</td><td>-</td></tr></tbody></table><p>这样操作:</p><p>复制条目名称，粘帖到搜索栏进行搜索, 如果搜索到，就双击修改它的值就行了。</p><p>如果没有搜索到，就鼠标右键 &gt; 新建 &gt; 字符串 (String)，把 <code>条目名称</code> 和 <code>值</code> 依次粘帖进去即可。</p><h2 id="打开-Tampermonkey-文件访问地址"><a href="#打开-Tampermonkey-文件访问地址" class="headerlink" title="打开 Tampermonkey 文件访问地址"></a>打开 Tampermonkey 文件访问地址</h2><p>打开设置 -》高级</p><p><img src="/../../img/blog/d79d945c4e0e893c85f498c0bccb994a_MD5.png" alt="图片.png" title="图片.png"></p><p>进入安全项 -》允许脚本访问本地文件，选择所有本地文件，修改后保存</p><p><img src="/../../img/blog/fbc81377c82c6f738e61cf3c66931d67_MD5.png" alt="图片.png" title="图片.png"></p><h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><p>在脚本中添加以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// @match          file:///*</span><br></pre></td></tr></table></figure><h1 id="CSDN-下载文章"><a href="#CSDN-下载文章" class="headerlink" title="CSDN 下载文章"></a>CSDN 下载文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(function doPrint()&#123;      </span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var articleBox = $(&quot;div.article_content&quot;);</span><br><span class="line">articleBox.removeAttr(&quot;style&quot;);</span><br><span class="line">var head_str = &quot;&quot;;       </span><br><span class="line">var foot_str = &quot;&quot;;   </span><br><span class="line">var older = document.body.innerHTML;       </span><br><span class="line">var title= document.getElementsByClassName(&#x27;article-title-box&#x27;)[0].innerHTML; </span><br><span class="line">var main_body = document.getElementsByClassName(&#x27;article_content&#x27;)[0].innerHTML;</span><br><span class="line">document.body.innerHTML = head_str + title + main_body + foot_str;</span><br><span class="line">$(&quot;#mainBox&quot;).width(&quot;100%&quot;);</span><br><span class="line">document.getElementsByTagName(&#x27;body&#x27;)[0].style.zoom=0.8;     </span><br><span class="line">window.print();</span><br><span class="line">document.body.innerHTML = older;</span><br><span class="line">return false;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/p1279030826/article/details/106602341">【新】CSDN文章一键打印、输出PDF（自动阅读全文、全清爽模式）csdn打印_JavonPeng的博客-CSDN博客</a></p><h1 id="kms-激活-office-visio2019"><a href="#kms-激活-office-visio2019" class="headerlink" title="kms 激活 office+visio2019"></a>kms 激活 office+visio2019</h1><p><a href="https://www.cnblogs.com/shan333/p/14894774.html">kms 激活 office+visio2019</a></p><h2 id="一、kms-激活-office-2019"><a href="#一、kms-激活-office-2019" class="headerlink" title="一、kms 激活 office 2019"></a><strong>一、kms 激活 office 2019</strong></h2><p>1、<strong>卸载干净 office 有关产品</strong>：先把自己电脑上所有关于 office 的产品卸载干净，然后才开始使用 office tool 安装和激活 office 2019；</p><p>2、<strong>下载 office Tool plus 工具</strong>：下载那个比较全的那个包吧，最大那个 [即<strong>第一个安装包</strong>]；官网： <a href="https://otp.landian.vip/zh-cn/download.html">https://otp.landian.vip/zh-cn/download.html</a></p><p>3、<strong>解压 office tool plus 工具包，移除残留的旧 office</strong>：先解压 office Tool plus 工具包，利用 office Tool plus 工具 [Office Tool Plus. exe]，先把自己电脑的老版本 office 卸载了:  双击 Office Tool Plus. exe，选择  <strong>工具箱 -》修复工具 -》移除 office-》使用 office Tool plus 移除 office-》开始</strong></p><p>4、<strong>部署</strong>：点击  <strong>部署</strong></p><p><img src="/../../img/blog/39f707e55ae7cc259c78dc8feedff9cf_MD5.png"></p><p><strong>按上图，选好、设置好后，点击当前页面右上角的开始部署</strong></p><p>5、<strong>激活</strong>：点击  <strong>激活</strong></p><p><img src="/../../img/blog/34e7f96c985852aa6812ba0c920ba89a_MD5.png"></p><p><strong>按上图，</strong>  选好、填好，点击当前页面右上角的激活</p><p><strong>✿  密钥管理填写   NMMKJ-6 RK 4 F-KMJVX-8 D 9 MJ-6 MWKP，KMS 服务器，填写 kms. 03 k. org</strong></p><p>■ 备用的秘钥： N 9 J 9 Q-Q 7 MMP-XDDM 6-63 KKP-76 FPM</p><p>■ 备用的 KMS 主机： <a href="https://catqu.com/?p=111">kms.catqu.com</a></p><p><strong>▷  注意细节：复制粘贴的时候，不要多复制了空格哈~</strong></p><hr><h2 id="二、kms-激活-visio-2019"><a href="#二、kms-激活-visio-2019" class="headerlink" title="二、kms 激活 visio 2019"></a><strong>二、kms 激活 visio 2019</strong></h2><p>1、安装 visio 2019，同样部署、激活：<br>部署时选择 + 添加产品：选择 visio 专业版 2019 批量版</p><p>然后那些系数，就用安装 office 时的系数，点击开始部署，部署完就激活：</p><p><img src="/../../img/blog/003beba19ea0eeea637c70aa9f54f72b_MD5.png"></p><p><strong>密钥管理填写   9 BGNQ-K 37 YR-RQHF 2-38 RQ 3-7 VCBB，KMS 服务器，填写 kms. 03 k. org</strong></p><hr><h2 id="三、注意事项："><a href="#三、注意事项：" class="headerlink" title="三、注意事项："></a><strong>三、注意事项：</strong></h2><p><strong>仅批量版 (Volume) 支持 KMS 激活</strong>，<strong>零售版 (Retail) 不支持使用 KMS 激活。</strong>    <strong>KMS 有效期为 180 天，正常情况下系统会自动续期，所以不用担心过期，除非服务器挂了。</strong></p><p>除了使用这些公网 KMS 外，还可自行搭建 KMS 使用，具体请自行查找相关资料。</p><p>部分 KMS 可能会因为地区问题在某些地方不可用，建议使用前自行检测可用性。</p><p><strong>使用 KMS 激活并不会显著影响 Office 的功能，</strong>无法登录账号是因为 Windows 系统太旧、Internet Explorer 问题或者网络问题，与使用 KMS 无关。</p><hr><h2 id="四、KMS-地址列表"><a href="#四、KMS-地址列表" class="headerlink" title="四、KMS 地址列表"></a><strong>四、KMS 地址列表</strong></h2><p><strong>■ 好用、常用几个如下：</strong></p><p><strong>****</strong><a href="https://03k.org/kms.html">kms.03k.org</a><strong>****</strong></p><p><strong><strong>**</strong></strong><a href="https://catqu.com/?p=111">kms.catqu.com</a><strong><strong>**</strong></strong></p><p><strong><a href="https://www.ghpym.com/kms.html">kms.ghpym.com</a></strong></p><p>参考文章： <a href="https://juejin.cn/post/6844903746485354504">https://juejin.cn/post/6844903746485354504</a> 《安装和激活 Office 2019》</p><p><a href="https://www.coolhub.top/tech-articles/kms_list.html">https://www.coolhub.top/tech-articles/kms_list.html</a> 《KMS 地址列表》</p><h1 id="visio-使用"><a href="#visio-使用" class="headerlink" title="visio 使用"></a>visio 使用</h1><p><a href="https://zhuanlan.zhihu.com/p/341329517">visio教程：如何调整连接线上文字的位置</a><br><a href="https://blog.csdn.net/zz603976046/article/details/109079481">visio如何使箭头指向插图的任意一处</a></p><h1 id="坚果云清除"><a href="#坚果云清除" class="headerlink" title="坚果云清除"></a>坚果云清除</h1><p> <strong>文件资源管理器图标删除</strong></p><p>使用电脑应用管理删除坚果云</p><p><strong>Windows 清理桌面右键菜单中新增选项中的多余选项</strong></p><p>在卸载坚果云时一开始没注意，最近在使用的时候发现右键新增的里面出现了 <code>.nol</code> 等坚果云的文件，于是找了一下能删除多余选项的方法。感觉自己以后还能用到所以记下来方便自己查阅。</p><ol><li><p>找到需要删去选项对应的扩展名</p></li><li><p>打开注册表编辑器</p></li><li><p><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew\Classes</code></p><p> <img src="/../../img/blog/%E5%9D%9A%E6%9E%9C%E4%BA%91%E6%B8%85%E9%99%A4-1.png"></p></li><li><p>删去其中你不要的扩展名</p><p> <img src="/../../img/blog/65510735567700606.png"></p></li><li><p>按照以上步骤操作完成后，发现已经消失的残留项再次出现，说明软件卸载后，注册表未清理干净。请按照以下路径寻找【<code>HKEY_CLASSES_ROOT\.gf\ShellNew</code>】，右键单击【NullFile】，左键单击【删除（D）】。</p></li></ol><p>[<img src="/../../img/blog/06701246621604386.png"></p><blockquote><p>我自己并没有出现 <code>NullFile</code> 选项，我选择将整个 ShellNew 都给删去了</p></blockquote><p>此时回到桌面查看右键新建菜单应该已经清理完毕</p><h1 id="病毒免杀工具"><a href="#病毒免杀工具" class="headerlink" title="病毒免杀工具"></a>病毒免杀工具</h1><h2 id="Backdoor-factory"><a href="#Backdoor-factory" class="headerlink" title="Backdoor-factory"></a>Backdoor-factory</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/secretsquirrel/the-backdoor-factory">secretsquirrel&#x2F;the-backdoor-factory: Patch PE, ELF, Mach-O binaries with shellcode new version in development, available only to sponsors (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull secretsquirrel/the-backdoor-factory</span><br><span class="line">sudo docker run -it -v /home/icefjl:/home/tmp:Z secretsquirrel/the-backdoor-factory bash</span><br></pre></td></tr></table></figure><h3 id="⾸先检查宿主能否被⽀持-“-插入-“shellcode。"><a href="#⾸先检查宿主能否被⽀持-“-插入-“shellcode。" class="headerlink" title="⾸先检查宿主能否被⽀持 “ 插入 “shellcode。"></a>⾸先检查宿主能否被⽀持 “ 插入 “shellcode。</h3><p>主要使⽤下⾯两个参数 -f：指定测试程序 -S：检查该程序是否支持<br>检查命令: .&#x2F;backdoor. py -f &#x2F;root&#x2F;putty. exe -S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie hello.c -o hello</span><br></pre></td></tr></table></figure><h3 id="搜索该⽂件可⽤的-Code-Caves-代码缝隙"><a href="#搜索该⽂件可⽤的-Code-Caves-代码缝隙" class="headerlink" title="搜索该⽂件可⽤的 Code Caves (代码缝隙)"></a>搜索该⽂件可⽤的 Code Caves (代码缝隙)</h3><p>使⽤命令 .&#x2F;backdoor. py -f test. exe -c -l 600<br>-c：code cave (代码裂缝) -l：代码裂缝大小</p><h3 id="获取该⽂件的可⽤-Payload"><a href="#获取该⽂件的可⽤-Payload" class="headerlink" title="获取该⽂件的可⽤ Payload"></a>获取该⽂件的可⽤ Payload</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./backdoor.py -f /root/putty.exe -s -show</span><br></pre></td></tr></table></figure><h2 id="Metaspoit"><a href="#Metaspoit" class="headerlink" title="Metaspoit"></a>Metaspoit</h2><h3 id="使⽤-Backdoor-的-user-supplied-shellcode-模块加载⾃定义的-Shellcode"><a href="#使⽤-Backdoor-的-user-supplied-shellcode-模块加载⾃定义的-Shellcode" class="headerlink" title="使⽤ Backdoor 的 user_supplied_shellcode 模块加载⾃定义的 Shellcode"></a>使⽤ Backdoor 的 user_supplied_shellcode 模块加载⾃定义的 Shellcode</h3><p>先⽤ msfvenom ⽣成 raw 格式的 shellcode<br>再使用 backdoor 的 user_supplied_shellcode 模块加载⾃定义的 shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./backdoor.py -f /home/tmp/ -s user_supplied_shellcode -U /home/tmp/tp1.shell -o payload2</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行下面的命令来初始化其数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mfsdb init</span><br></pre></td></tr></table></figure><p>通过运行下面的命令来启动 Metasploit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ msfconsole</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>MSF 框架由多个模块组成，几个主要模块及其具体功能如下。</p><ol><li><p>Auxiliaries（辅助模块）</p><p> 该模块不会直接在测试者和目标主机之间建立访问，它们只会负责执行扫描、嗅探、识别等相关功能以辅助渗透测试。</p></li><li><p>Exploit（漏洞利用模块）</p><p> 漏洞利用模块用于以允许框架执行任意代码的方式利用漏洞。执行的任意代码称为有效载荷。</p></li><li><p>Payload（攻击载荷模块）</p><p> 在 Metasploit 漏洞利用模块的上下文中，有效负载模块封装了作为漏洞利用成功结果而执行的任意代码（shellcode）。这通常涉及创建 Metasploit 会话，但可能会执行代码，例如添加用户帐户，或执行一个简单的 pingback 命令来验证代码是否成功针对易受攻击的目标执行。</p></li><li><p>Post（后期渗透模块）</p><p> 该模块主要用于在取得目标系统远程控制权后，进行一系列的后渗透攻击动作，如获取敏感信息、实施跳板攻击等。</p></li><li><p>Encoders（编码工具模块）</p><p> 编码器接收有效载荷的原始字节并运行某种编码算法，例如按位异或。这些模块对于编码诸如空字节之类的不良字符非常有用。</p></li></ol><p>使用 MSF 渗透测试时，可以综合使用以上模块，对目标系统进行侦察并发动攻击，大致的步骤如下所示。</p><ul><li>扫描目标机系统，寻找可用漏洞。</li><li>选择并配置一个漏洞利用模块。</li><li>选择并配置一个攻击载荷模块。</li><li>选择一个编码技术，用来绕过杀毒软件的查杀。</li><li>渗透攻击。</li></ul><h3 id="Msfvenom"><a href="#Msfvenom" class="headerlink" title="Msfvenom"></a>Msfvenom</h3><p><a href="https://blog.csdn.net/RFZ_322/article/details/123367668">(13 条消息) Kali 利用 msf 渗透 Windows 电脑（超详细）_kali msf_HonkerG 的博客-CSDN 博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test1.elf | msfvenom -p - -a x64 --platform linux -e x86/shikata_ga_nai -f elf -o test1e.elf</span><br></pre></td></tr></table></figure><h2 id="免杀项目"><a href="#免杀项目" class="headerlink" title="免杀项目"></a>免杀项目</h2><h3 id="专利"><a href="#专利" class="headerlink" title="专利"></a>专利</h3><ul><li><a href="https://github.com/scmanjarrez/pymetangine">scmanjarrez&#x2F;pymetangine: A python metamorphic engine for PE&#x2F;PE+ files. (github.com)</a></li><li><a href="https://github.com/OmegaPointZero/Caveman">https://github.com/OmegaPointZero/Caveman</a></li><li><a href="https://github.com/guitmz/ezuri">https://github.com/guitmz/ezuri</a></li><li><a href="https://github.com/sebastiencs/Packer_ELF">sebastiencs&#x2F;Packer_ELF: ELF packer - x86_64 (github.com)</a></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://github.com/jakuta-tech/GhostShell">https://github.com/jakuta-tech/GhostShell</a></li><li><a href="https://github.com/elfmaster/maya">https://github.com/elfmaster/maya</a></li><li><a href="https://github.com/wdblair/packitup">https://github.com/wdblair/packitup</a></li><li><a href="https://github.com/invokr/elf-stuff">https://github.com/invokr/elf-stuff</a></li><li><a href="https://github.com/terminaldweller/mutator">https://github.com/terminaldweller/mutator</a></li><li><a href="https://github.com/compilepeace/KAAL_BHAIRAV">https://github.com/compilepeace/KAAL_BHAIRAV</a></li><li><a href="https://github.com/AidenPearce369/elfxtract">https://github.com/AidenPearce369/elfxtract</a></li></ul><h1 id="vscode-和-vs2019-代码行数统计"><a href="#vscode-和-vs2019-代码行数统计" class="headerlink" title="vscode 和 vs2019 代码行数统计"></a>vscode 和 vs2019 代码行数统计</h1><h2 id="1、vscode-代码行数统计"><a href="#1、vscode-代码行数统计" class="headerlink" title="1、vscode 代码行数统计"></a>1、vscode 代码行数统计</h2><p>按 Ctrl+Shift+X 在插件市场搜索 VS Code Counter 点击安装<br>按住按 Ctrl+Shift+P 在命令输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Count lines in workspace</span><br></pre></td></tr></table></figure><p><img src="/../../img/blog/d42fe65ec918b634c00fa3a605acfc78_MD5.png"><br><img src="/../../img/blog/bcf1882238e3552922259a84188023ef_MD5.png"></p><h2 id="2、Visual-Studio-代码行数统计"><a href="#2、Visual-Studio-代码行数统计" class="headerlink" title="2、Visual Studio 代码行数统计"></a>2、Visual Studio 代码行数统计</h2><p>选中解决方案<br>按 [Ctrl+Shift+F] 弹出查找窗口（不统计以#号开头、以&#x2F;开头的代码和空行）<br>1、输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b*[^:b#/]+.*$</span><br></pre></td></tr></table></figure><p>2、选择使用正则表达式<br><img src="/../../img/blog/eed9780aadfde534a667b8c9153de5a8_MD5.png"></p><h1 id="1-1-1-1（App）"><a href="#1-1-1-1（App）" class="headerlink" title="1.1.1.1（App）"></a>1.1.1.1（App）</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/636708211">Cloudflare 加入及创建零信任zero trust团队 - 知乎 (zhihu.com)</a></li><li><a href="https://www.chaipip.com/">高精度IP地址查询|查IP|IP地址查询|IP定位|精确定位|百度高精度IP-www.chaipip.com</a></li><li><a href="https://dmesg.app/cf-zero-trust.html">使用 Cloudflare Zero Trust 创建大内网 | 土豆不好吃 (dmesg.app)</a></li><li><a href="https://neko-warp.nloli.xyz/">NEKOWARP (nloli.xyz)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python安装配置</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.python.org/">Welcome to Python.org</a></p><h1 id="pip-下载配置"><a href="#pip-下载配置" class="headerlink" title="pip 下载配置"></a>pip 下载配置</h1><h2 id="临时替换下载源：假设现在我要下载-selenium-这个第三方模块"><a href="#临时替换下载源：假设现在我要下载-selenium-这个第三方模块" class="headerlink" title="临时替换下载源：假设现在我要下载 selenium 这个第三方模块"></a>临时替换下载源：假设现在我要下载 selenium 这个第三方模块</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple/ selenium </span><br></pre></td></tr></table></figure><p>-i 参数表示这一次下载指定某个下载源，下次不再生效</p><h2 id="使用-pip-config-set-永久替换下载源"><a href="#使用-pip-config-set-永久替换下载源" class="headerlink" title="使用 pip config set 永久替换下载源"></a>使用 pip config set 永久替换下载源</h2><ul><li>在命令行中执行以下指令（win10 是 cmd），pip 版本需要&gt;&#x3D;10.0.0</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h1 id="更改-Python-的-pip-install-默认使用的-pip-库以及默认安装路径"><a href="#更改-Python-的-pip-install-默认使用的-pip-库以及默认安装路径" class="headerlink" title="更改 Python 的 pip install 默认使用的 pip 库以及默认安装路径"></a>更改 Python 的 pip install 默认使用的 pip 库以及默认安装路径</h1><p><a href="https://blog.csdn.net/C_chuxin/article/details/82962797">更改 Python 的 pip install 默认使用的pip库以及默认安装路径_更改pip安装路径-CSDN博客</a></p><h1 id="Anaconda-安装和使用指南"><a href="#Anaconda-安装和使用指南" class="headerlink" title="Anaconda 安装和使用指南"></a>Anaconda 安装和使用指南</h1><p><a href="https://zhuanlan.zhihu.com/p/36398337">Anaconda 安装和使用指南 - 知乎 (zhihu. com)</a><br><a href="https://blog.csdn.net/m0_66681776/article/details/136538954">【BUG修复日志】Anaconda + VSCode 编码错误_vscode错误代码-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
            <tag> 编程语言/python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资源</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E8%B5%84%E6%BA%90.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E8%B5%84%E6%BA%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><a href="https://t.bilibili.com/818168768566919224">电锯人黑白</a></li><li><a href="https://www.pexels.com/zh-cn/">免费素材图片 (pexels.com)</a></li></ul><h1 id="视频制作"><a href="#视频制作" class="headerlink" title="视频制作"></a>视频制作</h1><ul><li><a href="https://www.lookae.com/">LookAE.com-大众脸影视后期特效</a></li></ul><h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><ul><li><a href="https://mp.weixin.qq.com/s/rJDkduDYl2lE0Za4f3GuHg">拿下鹅厂一面！ (qq.com)</a></li><li><a href="https://mp.weixin.qq.com/s/9YNaFDSfKJqF_vmttjHYyg">奇安信C++面经，问的很奇怪。。 (qq.com)</a><br>《【起风了，唯有努力生存】一个本硕非科班码农的后台开发之路》 <a href="https://www.yuque.com/docs/share/37b016b5-4877-4611-bb4b-08ced4e3cc89">https://www.yuque.com/docs/share/37b016b5-4877-4611-bb4b-08ced4e3cc89</a><br>《ACMer 渣铜的秋招总结与经验分享》<br><a href="https://www.yuque.com/docs/share/098ec555-c825-459b-94cd-f150cf6177c6">https://www.yuque.com/docs/share/098ec555-c825-459b-94cd-f150cf6177c6</a><br>《字节校招后端 C 面经》<br><a href="https://www.yuque.com/docs/share/d913dc0d-336c-408e-870e-0ba8fcc648c7">https://www.yuque.com/docs/share/d913dc0d-336c-408e-870e-0ba8fcc648c7</a><br>《国际化电商客户端提前批 1,2,3 面面经 (已凉)》<br><a href="https://www.yuque.com/docs/share/19c50f7e-176b-4dd9-abe9-3d0c4a29fd8e">https://www.yuque.com/docs/share/19c50f7e-176b-4dd9-abe9-3d0c4a29fd8e</a><br>《字节跳动七面面经 (提前批 3 轮，实习 4 轮)》<br><a href="https://www.yuque.com/docs/share/a5753e11-6157-4153-a9c7-af5f18dc6948">https://www.yuque.com/docs/share/a5753e11-6157-4153-a9c7-af5f18dc6948</a><br>《字节跳动 C 系统工程师春招面经》<br><a href="https://www.yuque.com/docs/share/e7bfd04c-8f94-437c-8ea6-d4841693d039">https://www.yuque.com/docs/share/e7bfd04c-8f94-437c-8ea6-d4841693d039</a><br>《字节跳动五轮技术面终于收获意向书（后端开发）》<br><a href="https://www.yuque.com/docs/share/d3337287-f5f7-43b7-b9e7-3318e5675c8c">https://www.yuque.com/docs/share/d3337287-f5f7-43b7-b9e7-3318e5675c8c</a><br> 《字节跳动教育后端春招面经》<br><a href="https://www.yuque.com/docs/share/42dfd66d-b981-4953-8284-bb301c3a15ad">https://www.yuque.com/docs/share/42dfd66d-b981-4953-8284-bb301c3a15ad</a><br>《字节跳动基础架构 C 一面二面三面》<br><a href="https://www.yuque.com/docs/share/def11acb-d36a-462d-9b13-0982be6cfafd">https://www.yuque.com/docs/share/def11acb-d36a-462d-9b13-0982be6cfafd</a><br>《字节后端提前批 - 业务研发（C）1、2、3 面面经，已意向》 <a href="https://www.yuque.com/docs/share/f5203921-d81f-404e-9495-d6d8bd06eaab">https://www.yuque.com/docs/share/f5203921-d81f-404e-9495-d6d8bd06eaab</a><br>《字节跳动后端一二三面 _ 笔经》<br><a href="https://www.yuque.com/docs/share/5ea492b4-964f-4749-9ca8-c52c4ee31074">https://www.yuque.com/docs/share/5ea492b4-964f-4749-9ca8-c52c4ee31074</a><br>《字节跳动 C 客户端一二三面 hr 面 820 已 OC》<br><a href="https://www.yuque.com/docs/share/abdb2590-2a27-4460-9805-dd5a53a7bffc">https://www.yuque.com/docs/share/abdb2590-2a27-4460-9805-dd5a53a7bffc</a><br>《字节提前批国际化电商后端一面二面三面已 oc+ 意向书》<br><a href="https://www.yuque.com/docs/share/17ca820e-76ae-498a-945b-a8bbad5f12bf">https://www.yuque.com/docs/share/17ca820e-76ae-498a-945b-a8bbad5f12bf</a><br>《字节跳动 C 后端今日头条校招》<br><a href="https://www.yuque.com/docs/share/2223791a-ee2a-480a-a046-adcd8f83e97f">https://www.yuque.com/docs/share/2223791a-ee2a-480a-a046-adcd8f83e97f</a><br>《字节跳动电商后端一二三面面经（已意向书）》<br><a href="https://www.yuque.com/docs/share/39693ebe-4eac-4b2c-999e-e515bc3e7d50">https://www.yuque.com/docs/share/39693ebe-4eac-4b2c-999e-e515bc3e7d50</a><br>《字节客户端一二三面（已 OC）》<br><a href="https://www.yuque.com/docs/share/f6d9a46a-8b42-4323-9a26-c9cd772ab154">https://www.yuque.com/docs/share/f6d9a46a-8b42-4323-9a26-c9cd772ab154</a><br>《字节教育 (上海) C++ 一二三面面经 (已 offer)》<br><a href="https://www.yuque.com/docs/share/6aba31b2-f97e-4554-98b5-d1a1390def18">https://www.yuque.com/docs/share/6aba31b2-f97e-4554-98b5-d1a1390def18</a><br>《字节技术中台后端三面面经 (许愿 hr 面)》<br><a href="https://www.yuque.com/docs/share/ccad5e61-003e-400c-94e3-c39953c0bee1">https://www.yuque.com/docs/share/ccad5e61-003e-400c-94e3-c39953c0bee1</a><br>《字节抖音后端一二三面 (已 OC)》<br><a href="https://www.yuque.com/docs/share/ee5ac591-4d9c-4c6f-bc8f-de090f0a8cfc">https://www.yuque.com/docs/share/ee5ac591-4d9c-4c6f-bc8f-de090f0a8cfc</a><br>《春招面经，许愿上岸》<br><a href="https://www.yuque.com/docs/share/3354aa55-b413-4a32-abef-bcee152623c4">https://www.yuque.com/docs/share/3354aa55-b413-4a32-abef-bcee152623c4</a><br>《2022 字节跳动提前批四轮面试 (已完结)》<br><a href="https://www.yuque.com/docs/share/bdade855-779d-4472-b117-26e8f71b348a">https://www.yuque.com/docs/share/bdade855-779d-4472-b117-26e8f71b348a</a><br>《【字节国际化电商后端】123 面》<br><a href="https://www.yuque.com/docs/share/5d68bb91-5488-4cbd-a659-66b563c39ded">https://www.yuque.com/docs/share/5d68bb91-5488-4cbd-a659-66b563c39ded</a></li></ul><h1 id="面试利器"><a href="#面试利器" class="headerlink" title="面试利器"></a>面试利器</h1><h2 id="前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树"><a href="#前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树" class="headerlink" title="前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树"></a>前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树</h2><p><a href="https://www.yuque.com/docs/share/38cc330f-1646-4fb5-96a4-5fad3acad0b3">https://www.yuque.com/docs/share/38cc330f-1646-4fb5-96a4-5fad3acad0b3</a></p><h2 id="今天再分享一个-C-开发者比较适合的一个利器，也是源码系列的研究！并且和-Web-服务器搭配一起使用很好使！"><a href="#今天再分享一个-C-开发者比较适合的一个利器，也是源码系列的研究！并且和-Web-服务器搭配一起使用很好使！" class="headerlink" title="今天再分享一个 C++ 开发者比较适合的一个利器，也是源码系列的研究！并且和 Web 服务器搭配一起使用很好使！"></a>今天再分享一个 C++ 开发者比较适合的一个利器，也是源码系列的研究！并且和 Web 服务器搭配一起使用很好使！</h2><p>要说难，还是有点难的；可绝对值得研究，如果有看过我简历的朋友可能会记得我简历上有这么一句话：对 Linux 下的 I&#x2F;O 复用有深刻理解<br>其实这里说的 IO 多路复用主要指的就是 select、poll、epoll 这几个关键字。<br>以下是文章全部内容：<a href="https://www.yuque.com/docs/share/2a66768a-2fcf-486f-bbd5-37347da69ad5">https://www.yuque.com/docs/share/2a66768a-2fcf-486f-bbd5-37347da69ad5</a></p><h2 id="前人给你留下的-15-条-CS-校招金玉良言"><a href="#前人给你留下的-15-条-CS-校招金玉良言" class="headerlink" title="前人给你留下的 15 条 CS 校招金玉良言"></a>前人给你留下的 15 条 CS 校招金玉良言</h2><p>全文链接：<a href="https://www.yuque.com/docs/share/c2834829-c84b-4c35-9fc6-948a4d06a2eb">https://www.yuque.com/docs/share/c2834829-c84b-4c35-9fc6-948a4d06a2eb</a></p><h2 id="如何设计一个高性能-x2F-高并发-x2F-高可用-x2F-高可靠-x2F-可扩展的系统"><a href="#如何设计一个高性能-x2F-高并发-x2F-高可用-x2F-高可靠-x2F-可扩展的系统" class="headerlink" title="如何设计一个高性能&#x2F;高并发&#x2F;高可用&#x2F;高可靠&#x2F;可扩展的系统?"></a>如何设计一个高性能&#x2F;高并发&#x2F;高可用&#x2F;高可靠&#x2F;可扩展的系统?</h2><p><a href="https://top.interviewguide.cn/issue/736">InterviewGuide大厂面试真题</a></p><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><h2 id="从-0-教你写好一份属于自己的简历"><a href="#从-0-教你写好一份属于自己的简历" class="headerlink" title="从 0 教你写好一份属于自己的简历"></a>从 0 教你写好一份属于自己的简历</h2><p>一份合格的简历是怎样的？ 已完结链接：<a href="https://www.yuque.com/docs/share/29d989cc-86e1-48cf-b731-d39030388685">https://www.yuque.com/docs/share/29d989cc-86e1-48cf-b731-d39030388685</a><br>个人信息模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/526aa724-f87b-43bd-b519-6058537891ec">https://www.yuque.com/docs/share/526aa724-f87b-43bd-b519-6058537891ec</a><br>教育背景模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/6d1698af-6a68-451f-b95e-496527a8f7cb">https://www.yuque.com/docs/share/6d1698af-6a68-451f-b95e-496527a8f7cb</a><br>专业技能模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/8d71bc4e-6426-4141-9d44-0710b45205bd">https://www.yuque.com/docs/share/8d71bc4e-6426-4141-9d44-0710b45205bd</a><br>实习经历模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/f44e4e04-35e1-4b63-ac1c-32fa508f7b49">https://www.yuque.com/docs/share/f44e4e04-35e1-4b63-ac1c-32fa508f7b49</a><br>项目经验模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/30fd8b4c-ce0d-486f-aacd-bc094d6e7a27">https://www.yuque.com/docs/share/30fd8b4c-ce0d-486f-aacd-bc094d6e7a27</a><br>校园经历模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/e0ecb501-5879-4676-9da2-e5c1d04a39fe">https://www.yuque.com/docs/share/e0ecb501-5879-4676-9da2-e5c1d04a39fe</a><br>奖项证书模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/26c7c18e-5d59-45a1-a1c7-e8b895cb9b96">https://www.yuque.com/docs/share/26c7c18e-5d59-45a1-a1c7-e8b895cb9b96</a><br>科研论文模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/4120ccbd-b4fc-4292-8762-d1dd577ce802">https://www.yuque.com/docs/share/4120ccbd-b4fc-4292-8762-d1dd577ce802</a><br>自我评价模块要这么写已完结链接：<a href="https://www.yuque.com/docs/share/a32f6781-5d9a-4286-8db9-35746b082624">https://www.yuque.com/docs/share/a32f6781-5d9a-4286-8db9-35746b082624</a><br>简历优秀文案&amp;叙述分享已完结链接：<a href="https://www.yuque.com/docs/share/bedc9a5b-4eb1-4166-a8ab-5cb1de7c6e7d">https://www.yuque.com/docs/share/bedc9a5b-4eb1-4166-a8ab-5cb1de7c6e7d</a><br>优秀简历模板分享已完结链接：<a href="https://www.yuque.com/docs/share/d51586de-b3c2-44ed-a409-5aac10b233c0">https://www.yuque.com/docs/share/d51586de-b3c2-44ed-a409-5aac10b233c0</a></p><h2 id="校招面试详细解读（一二三轮技术面-HR-面）"><a href="#校招面试详细解读（一二三轮技术面-HR-面）" class="headerlink" title="校招面试详细解读（一二三轮技术面 + HR 面）"></a>校招面试详细解读（一二三轮技术面 + HR 面）</h2><p>校招大厂技术岗面试基本知识已完结链接：<a href="https://www.yuque.com/docs/share/023e3cea-fc87-4823-9e59-9f6cdee3b32d">https://www.yuque.com/docs/share/023e3cea-fc87-4823-9e59-9f6cdee3b32d</a><br>一轮技术面已完结链接：<a href="https://www.yuque.com/docs/share/9f9545e2-4efa-4a95-9f7f-0a4f78de3f51">https://www.yuque.com/docs/share/9f9545e2-4efa-4a95-9f7f-0a4f78de3f51</a><br>二轮技术面已完结链接：<a href="https://www.yuque.com/docs/share/81d7d11b-fcff-4a37-90fd-ae0dec622ccf">https://www.yuque.com/docs/share/81d7d11b-fcff-4a37-90fd-ae0dec622ccf</a><br>三轮技术面已完结链接：<a href="https://www.yuque.com/docs/share/d7264ba9-0d08-4d3e-b248-e9ce13375949">https://www.yuque.com/docs/share/d7264ba9-0d08-4d3e-b248-e9ce13375949</a><br>交叉面已完结链接：<a href="https://www.yuque.com/docs/share/cf8e8fa9-92ed-4a17-be56-a90cf280d431">https://www.yuque.com/docs/share/cf8e8fa9-92ed-4a17-be56-a90cf280d431</a><br>HR 面详细解读已完结（包括常见回答话术） 链接： <a href="https://www.yuque.com/docs/share/bca09dd9-16f8-43a6-b231-79fdfa5ea084">https://www.yuque.com/docs/share/bca09dd9-16f8-43a6-b231-79fdfa5ea084</a></p><h2 id="全国一二线城市知名互联网公司大盘点"><a href="#全国一二线城市知名互联网公司大盘点" class="headerlink" title="全国一二线城市知名互联网公司大盘点"></a>全国一二线城市知名互联网公司大盘点</h2><p>上海互联网公司盘点（已完结，共 225 家）链接：<a href="https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc">https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc</a><br>北京互联网公司盘点（已完结，共 82 家) 链接：<a href="https://www.yuque.com/docs/share/239796b1-bca4-4048-a63d-3e421dd10ea4">https://www.yuque.com/docs/share/239796b1-bca4-4048-a63d-3e421dd10ea4</a><br>杭州互联网公司盘点（已完结，共 101 家） 链接：<a href="https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e">https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e</a><br>广州互联网盘点（已完结，共 96 家）链接：<a href="https://www.yuque.com/docs/share/69a6d864-7806-4e4c-84c0-506c543dfc93">https://www.yuque.com/docs/share/69a6d864-7806-4e4c-84c0-506c543dfc93</a><br>深圳互联网盘点 (已完结, 共 108 家)    链接：<a href="https://www.yuque.com/docs/share/ed985935-65a7-489e-82b0-c1e2259ede50">https://www.yuque.com/docs/share/ed985935-65a7-489e-82b0-c1e2259ede50</a><br>武汉互联网盘点（已完结，共 68 家） 链接：<a href="https://www.yuque.com/docs/share/09175e89-382a-4a0c-9299-4f2c2d8c32ae">https://www.yuque.com/docs/share/09175e89-382a-4a0c-9299-4f2c2d8c32ae</a><br>西安互联网盘点（已完结，共 45 家）链接：<a href="https://www.yuque.com/docs/share/7a4fcaf2-81fe-42ba-b1a5-5daa64a41d71">https://www.yuque.com/docs/share/7a4fcaf2-81fe-42ba-b1a5-5daa64a41d71</a><br>济南互联网盘点（已完结，共 14 家）链接：<a href="https://www.yuque.com/docs/share/62be2e0b-5e61-4de5-8d90-706519f1c3bc">https://www.yuque.com/docs/share/62be2e0b-5e61-4de5-8d90-706519f1c3bc</a><br>山东互联网盘点（已完结，共 28 家） 链接 <a href="https://www.yuque.com/docs/share/122f8d61-9876-4160-ba2e-ed56047c9080">https://www.yuque.com/docs/share/122f8d61-9876-4160-ba2e-ed56047c9080</a><br>苏州互联网公司盘点（已完结，共 38 家） 链接：<a href="https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256">https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256</a></p><h2 id="学习路线-amp-项目推荐"><a href="#学习路线-amp-项目推荐" class="headerlink" title="学习路线&amp;项目推荐"></a>学习路线&amp;项目推荐</h2><p>学习路线导读（强烈建议看一看）已完结 <a href="https://www.yuque.com/docs/share/c01a4794-9a04-4adb-ba74-965401399e9d">https://www.yuque.com/docs/share/c01a4794-9a04-4adb-ba74-965401399e9d</a><br>阿秀自己自学 CS 过程中的学习心得 （已完结） <a href="https://www.yuque.com/docs/share/e34d01e9-0b23-4f02-ab17-9353d201a357">https://www.yuque.com/docs/share/e34d01e9-0b23-4f02-ab17-9353d201a357</a><br>C 学习路线（小白求职版）（已完结） <a href="https://www.yuque.com/docs/share/2f0fde4a-1ae5-45f3-90b7-21e81dd4fa76">https://www.yuque.com/docs/share/2f0fde4a-1ae5-45f3-90b7-21e81dd4fa76</a><br>C&#x2F;C 项目推荐已完结共 8 个 <a href="https://www.yuque.com/docs/share/55b9d089-37cc-4060-a0f5-40f018befb85">https://www.yuque.com/docs/share/55b9d089-37cc-4060-a0f5-40f018befb85</a></p><h2 id="读书笔记分享"><a href="#读书笔记分享" class="headerlink" title="读书笔记分享"></a>读书笔记分享</h2><p>《深度探索 C++ 对象模型》读书笔记已完结链接：<a href="https://www.yuque.com/docs/share/e3869134-783f-4179-b641-51a4ee018ae6">https://www.yuque.com/docs/share/e3869134-783f-4179-b641-51a4ee018ae6</a><br>《MySQL 必知必会》读书笔记已完结 <a href="https://www.yuque.com/docs/share/208b1355-f5cc-4feb-8fe7-42e4ff3e1e72">https://www.yuque.com/docs/share/208b1355-f5cc-4feb-8fe7-42e4ff3e1e72</a></p><h1 id="考公"><a href="#考公" class="headerlink" title="考公"></a>考公</h1><ul><li><a href="https://www.nowcoder.com/discuss/361219661281738752">一年半我考了11次公务员，内附考试细节，不看血亏_牛客网 (nowcoder.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目软件收藏</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E9%A1%B9%E7%9B%AE%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E9%A1%B9%E7%9B%AE%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F.html</url>
      
        <content type="html"><![CDATA[<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><ul><li><a href="https://tuya.xinxiao.tech/">图压 - 简单易用的图片压缩软件 (xinxiao.tech)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码格式化和静态分析检查工作流 Cpp Linter</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E6%A3%80%E6%9F%A5%E5%B7%A5%E4%BD%9C%E6%B5%81%20Cpp%20Linter.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E6%A3%80%E6%9F%A5%E5%B7%A5%E4%BD%9C%E6%B5%81%20Cpp%20Linter.html</url>
      
        <content type="html"><![CDATA[<h1 id="Clang-tools-Binaries"><a href="#Clang-tools-Binaries" class="headerlink" title="Clang-tools Binaries"></a>Clang-tools Binaries</h1><p>如果你需要使用 clang-tools binaries，以 Windows 为例，通常下载指定版本的 clang-tools 需要先安装 LLVM 这个大的安装包才能获得 clang-format &amp; clang-tidy 这些工具；在 Linux 上会方便很多，可以使用命令来下载，但如果想下载指定版本的 clang-format &amp; clang-tidy 可能要面临手动下载和安装。</p><p>clang-tools-pip 提供并支持在 Windows，Linux，MacOs 上通过命令行下载任何指定版本的 clang-tools 可执行文件。</p><p>只需要使用 <code>pip</code> 安装 <code>clang-tools</code> （即 <code>pip install clang-tools</code>）后，然后通过 <code>clang-tools</code> 命令就可以安装任何版本的可执行文件了。</p><p>例如，安装 clang-tools 版本 13：<br><code>$ clang-tools --install 13</code><br>也可以将它安装到指定目录下面：<br><code>$ clang-tools --install 13 --directory .</code></p><p><code>clang-tools</code> CLI 还提供了其他选项，比如自动帮你创建链接等，可以查看它的 CLI 文档来获得帮助。<br><a href="https://cpp-linter.github.io/clang-tools-pip/cli_args.html">Command Line Interface Options - clang-tools installer (cpp-linter.github.io)</a></p><h1 id="把-Clang-tools-集成到工作流"><a href="#把-Clang-tools-集成到工作流" class="headerlink" title="把 Clang-tools 集成到工作流"></a>把 Clang-tools 集成到工作流</h1><ol><li><p>cpp-linter-action 提供了通过 CI 进行检查，当发现没有格式化或有诊断错误的代码时 CI 会失败，来防止合并到主分的代码没有通过代码检查；</p></li><li><p>cpp-linter-hooks 通过 git hook 在提交代码的时候自动运行 clang-format 和 clang-tidy，如果不符合规范则提交失败，并提示并自动格式化。</p></li></ol><h1 id="Cpp-linter-action-在代码合并前做自动检查"><a href="#Cpp-linter-action-在代码合并前做自动检查" class="headerlink" title="Cpp-linter-action 在代码合并前做自动检查"></a>Cpp-linter-action 在代码合并前做自动检查</h1><p>如果你使用的是 GitHub，那么非常推荐你使用 cpp-linter-action 这个 GitHub Action。</p><p>以下是它的一些重要特性：</p><ol><li><p>运行结果支持 Annotations 和 Thread Comment 两种方式展示</p></li><li><p>支持 GitHub 的 public 和 private 仓库</p></li><li><p>支持绝大多数 Clang 版本</p></li><li><p>还有很多其他的 optional-inputs<br><a href="https://github.com/cpp-linter/cpp-linter-action#optional-inputs">cpp-linter&#x2F;cpp-linter-action: Lint C&#x2F;C++ code with clang-format and clang-tidy then post annotations, comments, and step summary with results. (github.com)</a></p></li></ol><p>使用这个 Action 只需要在 <code>.github/workflows/</code> 下面创建一个 cpp-linter.yml，内容如下：</p><blockquote><p>当然也可以把下面的配置加到一个已经存在的 Workflow，例如 build。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">cpp-linter</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">on:</span>  </span><br><span class="line">  <span class="attr">pull_request:</span>  </span><br><span class="line">    <span class="string">types:</span> [<span class="string">opened</span>, <span class="string">reopened</span>]  </span><br><span class="line">  <span class="attr">push:</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span>  </span><br><span class="line">  <span class="attr">cpp-linter:</span>  </span><br><span class="line">    <span class="string">runs-on:</span> <span class="string">ubuntu-latest</span>  </span><br><span class="line">    <span class="attr">steps:</span>  </span><br><span class="line">      <span class="string">-</span> <span class="string">uses:</span> <span class="string">actions/checkout@v3</span>  </span><br><span class="line">      <span class="string">-</span> <span class="string">uses:</span> <span class="string">cpp-linter/cpp-linter-action@v1</span>  </span><br><span class="line">        <span class="string">id:</span> <span class="string">linter</span>  </span><br><span class="line">        <span class="attr">env:</span>  </span><br><span class="line">          <span class="string">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span>  </span><br><span class="line">        <span class="attr">with:</span>  </span><br><span class="line">          <span class="string">style:</span> <span class="string">file</span>  </span><br><span class="line">  </span><br><span class="line">      <span class="string">-</span> <span class="string">name:</span> <span class="string">Fail</span> <span class="string">fast?!</span>  </span><br><span class="line">        <span class="string">if:</span> <span class="string">steps.linter.outputs.checks-failed</span> <span class="string">&gt;</span> <span class="number">0</span>  </span><br><span class="line">        <span class="string">run:</span> <span class="string">|</span>  </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Some files failed the linting checks!&quot;</span>  </span><br><span class="line">          <span class="string">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果发现存在没有进行格式化或是静代码态检查，CI workflow 会失败，并且会有如下注释说明，annotations 默认是开启的。</p><p><img src="/../../img/blog/d2442aea62f1dfffc472f6a23b2fa035_MD5.png" alt="图片"></p><p>如果开启了 Thread Comment 选项（即 <code>thread-comments: true</code>）就会将在 Pull Request 中自动添加如下错误评论。</p><p><img src="/../../img/blog/8b0a2ba3494fffa5c66cc83391964abb_MD5.png" alt="图片"></p><h1 id="Cpp-linter-hooks-在提交代码时自动检查"><a href="#Cpp-linter-hooks-在提交代码时自动检查" class="headerlink" title="Cpp-linter-hooks 在提交代码时自动检查"></a>Cpp-linter-hooks 在提交代码时自动检查</h1><p>cpp-linter-hooks 是通过 git hook 在提交代码时做自动检查，这种方式不限制使用任何 SCM。</p><p>只需要在项目仓库中添加一个 <code>.pre-commit-config.yaml</code> 配置文件，然后将 cpp-linter-hooks 这个 hook 添加到 <code>.pre-commit-config.yaml</code> 中，具体设置如下：</p><blockquote><p><code>.pre-commit-config.yaml</code> 是 <code>pre-commit</code> framework 的默认配置文件。</p></blockquote><p> 安装 pre-commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pre-commit</span><br></pre></td></tr></table></figure><p> 创建配置文件 <code>.pre-commit-config.yaml</code>，设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line"><span class="string">-</span> <span class="string">repo:</span> <span class="string">https://github.com/cpp-linter/cpp-linter-hooks</span></span><br><span class="line">  <span class="string">rev:</span> <span class="string">v0.2.1</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">    <span class="string">-</span> <span class="string">id:</span> <span class="string">clang-format</span></span><br><span class="line">      <span class="string">args:</span> [<span class="string">--style=file</span>]  <span class="comment"># to load .clang-format</span></span><br><span class="line">    <span class="string">-</span> <span class="string">id:</span> <span class="string">clang-tidy</span></span><br><span class="line">      <span class="string">args:</span> [<span class="string">--checks=.clang-tidy</span>] <span class="comment"># path/to/.clang-tidy</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的 file 是指 <code>.clang-format</code>, clang-format 默认支持的编码格式包括 LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit，如果需要特殊设置可以在仓库的根目录下面创建配置文件 <code>.clang-format</code>。同理，如果默认的静态分析设置不满足要求，可以在仓库的根目录下创建 <code>.clang-tidy</code> 配置文件。</p></blockquote><p>更多配置可以参考 <a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter&#x2F;cpp-linter-hooks: C&#x2F;C++ linter hooks for pre-commit (github.com)</a></p><p> 安装 git hook 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pre-commit install</span><br><span class="line">pre-commit installed at .git/hooks/pre-commit</span><br></pre></td></tr></table></figure><p> 之后每次 <code>git commit</code> 都会自动执行 clang-format 和 chang-tidy。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmware安装配置Ubuntu</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/Vmware%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEUbuntu.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/Vmware%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEUbuntu.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载-Ubuntu"><a href="#下载-Ubuntu" class="headerlink" title="下载 Ubuntu"></a>下载 Ubuntu</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">Index of &#x2F;ubuntu-releases&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br>vmware 安装方法<br><a href="https://blog.csdn.net/trackxiaoxin321/article/details/115591796">(12条消息) 虚拟机ubuntu16.04超详细安装教程（零基础照做即可）_ubuntun16.04 安装虚拟机_LKTracker的博客-CSDN博客</a></p><h1 id="安装-VMware-Tools"><a href="#安装-VMware-Tools" class="headerlink" title="安装 VMware Tools"></a>安装 VMware Tools</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install open-vm-tools-desktop -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="SSH-连接"><a href="#SSH-连接" class="headerlink" title="SSH 连接"></a>SSH 连接</h1><p><a href="https://cloud.tencent.com/developer/article/1679861">windows宿主机如何SSH连接VMware的Linux虚拟机 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h1 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h1><ol><li><p>在 vmware 中设置共享文件夹<br>即在 VMware workstation 中：虚拟机设置 -》选项 -》共享文件夹，浏览要共享的文件夹，继续按照说明设置即可。</p></li><li><p>在 linux 中链接一下即可<br>第 1 步完成后，共享文件夹已经挂载到了 <code>/mnt/hgfs/share/</code> ,share 是我的共享文件夹的名字，然后在创建一个软连接方便以后访问：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /mnt/hgfs/share/ /home/share</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-重启后不显示共享文件夹"><a href="#Ubuntu-重启后不显示共享文件夹" class="headerlink" title="Ubuntu 重启后不显示共享文件夹"></a>Ubuntu 重启后不显示共享文件夹</h2><p>重启 Ubuntu20.04 后，发现共享文件夹进不去也不显示了<br>首先查看共享文件夹是否已经存在并且设置为总是开启<br>使用命令查看当前挂载的共享文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-hgfsclient</span><br></pre></td></tr></table></figure><p>存在的情况下，然后使用下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</span><br></pre></td></tr></table></figure><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/17/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html">在 Linux 客户机中装载共享文件夹 (vmware.com)</a></p><p>但是由于上面的方法需要每次重启后都去设置一遍，可以把执行的命令放到&#x2F;etc&#x2F;rc.local 文件下；让它开机自动执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>若&#x2F;etc&#x2F;rc.local 是一个空文件则在里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">sudo vmhgfs-fuse .host:/ /mnt/hgfs -o nonempty -o allow_other</span><br></pre></td></tr></table></figure><p>给文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><p>最后重启虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="无法应用原保存的显示器配置（屏幕显示问题）"><a href="#无法应用原保存的显示器配置（屏幕显示问题）" class="headerlink" title="无法应用原保存的显示器配置（屏幕显示问题）"></a>无法应用原保存的显示器配置（屏幕显示问题）</h1><p><a href="https://blog.csdn.net/a22635798/article/details/103643708">(12条消息) 虚拟机Ubuntu开机后提示：无法应用原保存的显示器配置（屏幕显示问题）_DTU-CFDer的博客-CSDN博客</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="虚拟机-Deepin-网线未连接"><a href="#虚拟机-Deepin-网线未连接" class="headerlink" title="虚拟机 Deepin 网线未连接"></a>虚拟机 Deepin 网线未连接</h2><p>不小心将虚拟机 <a href="https://so.csdn.net/so/search?q=ubuntu&spm=1001.2101.3001.7020">ubuntu</a>&#x2F;deepin 强制关机后，重启之后系统显示网卡未连接。<br>解决办法：<br>编辑文件&#x2F;etc&#x2F;network&#x2F;interfaces:<br>sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces，在文件里加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h2 id="vmware-虚拟机网卡不启动时的-service-NetworkManager-修复"><a href="#vmware-虚拟机网卡不启动时的-service-NetworkManager-修复" class="headerlink" title="vmware 虚拟机网卡不启动时的 service NetworkManager 修复"></a>vmware 虚拟机网卡不启动时的 service NetworkManager 修复</h2><h3 id="检查-Windows-下的-Vmware-虚拟机网络相关服务是否开启"><a href="#检查-Windows-下的-Vmware-虚拟机网络相关服务是否开启" class="headerlink" title="检查 Windows 下的 Vmware 虚拟机网络相关服务是否开启"></a>检查 Windows 下的 Vmware 虚拟机网络相关服务是否开启</h3><p><img src="/../../../img/blog/0dd2e698444a07e3d24ae66ce90bed4d_MD5.png" alt="image.png"></p><h3 id="检查虚拟接网络配置设置是否正确"><a href="#检查虚拟接网络配置设置是否正确" class="headerlink" title="检查虚拟接网络配置设置是否正确"></a>检查虚拟接网络配置设置是否正确</h3><p>检查 vmware workstation 的网络配置是否符合主机的虚拟网卡配置，若不确定就点击还原默认设置<br><img src="/../../../img/blog/8f86b52d506cbb4260790e6f77103348_MD5.png" alt="image.png"></p><h3 id="检查虚拟机-Ubuntu-系统右上角的网络连接是否存在"><a href="#检查虚拟机-Ubuntu-系统右上角的网络连接是否存在" class="headerlink" title="检查虚拟机 Ubuntu 系统右上角的网络连接是否存在"></a>检查虚拟机 Ubuntu 系统右上角的网络连接是否存在</h3><p>若不存在，网络就可能连不上</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>（1）删除 NetworkManager 缓存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure><p>（2）修改&#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/NetworkManager/NetworkManager.conf</span><br><span class="line"><span class="comment">##找到managed=false修改为：managed=true</span></span><br></pre></td></tr></table></figure><p>（3）重启 NetworkManager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager restart</span><br></pre></td></tr></table></figure><p>就可以看到系统右上角出现了网络图标，重启虚拟机，搞定！</p><h2 id="Ubuntu22-04-在-VMware-17-无法实现拖放复制操作解决办法"><a href="#Ubuntu22-04-在-VMware-17-无法实现拖放复制操作解决办法" class="headerlink" title="Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法"></a>Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法</h2><p><a href="https://blog.csdn.net/ZRongZH/article/details/129237476">Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法_ubuntu无法拖拽文件-CSDN博客</a></p><h2 id="ubuntu-开启-125-、150-、175-缩放比例"><a href="#ubuntu-开启-125-、150-、175-缩放比例" class="headerlink" title="ubuntu 开启 125%、150%、175% 缩放比例"></a>ubuntu 开启 125%、150%、175% 缩放比例</h2><p>点击导航栏最右边的自由缩放，打开全屏后退出全屏<br>可参考 <a href="https://zhuanlan.zhihu.com/p/588666878">Ubuntu自由调整显示比例 - 知乎 (zhihu.com)</a> 对虚拟机不一定有用</p><h2 id="虚拟机不能上网，ifconfig-后只有-lo，没有-ens33-等信息"><a href="#虚拟机不能上网，ifconfig-后只有-lo，没有-ens33-等信息" class="headerlink" title="虚拟机不能上网，ifconfig 后只有 lo，没有 ens33 等信息"></a>虚拟机不能上网，ifconfig 后只有 lo，没有 ens33 等信息</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p><img src="/../../../img/blog/27a9772ac09683210d7a53269a5cb50a_MD5.png" alt="在这里插入图片描述"><br>ifconfig 后只有一个 lo，好像其他网卡驱动都没有启动一样。</p><h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><p>输入 ifconfig -a</p><p><img src="/../../../img/blog/95a40c634df65f08a92e738ff9b9a2cc_MD5.png" alt="在这里插入图片描述"></p><p>发现了需要的网卡驱动，但是却没有 ip 地址啥的。</p><p>尝试一下几条条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 up</span><br><span class="line"></span><br><span class="line">sudo dhclient ens33</span><br><span class="line"></span><br><span class="line">sudo ifconfig ens33（这条指令测试好了之后我的 OK 了）</span><br><span class="line"></span><br><span class="line">sudo systemctl restart network-manager.service //重启网卡</span><br></pre></td></tr></table></figure><p>如果问题解决了，会是这种：<br><img src="/../../../img/blog/2b10fed180895ab2931e726a8e6f4134_MD5.png" alt="在这里插入图片描述"></p><p>随后再输入 ifconfig 指令<br><img src="/../../../img/blog/e80fddd0477a103b11f731eb3505d6d8_MD5.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%AB%99.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%AB%99.html</url>
      
        <content type="html"><![CDATA[<h1 id="书籍-x2F-资源"><a href="#书籍-x2F-资源" class="headerlink" title="书籍&#x2F;资源"></a>书籍&#x2F;资源</h1><ul><li><a href="https://zh.annas-archive.org/account/">Account - 安娜的档案 (annas-archive.org)</a></li><li><a href="https://zlibrary-china.se/">Z-Library – the world’s largest e-book library. Your gateway to knowledge and culture. (zlibrary-china.se)</a></li><li><a href="https://mp.weixin.qq.com/s/P4gWA71xsUY2vyDk5oYz1A">游戏爱好者福音！这些网站给我咔咔浏览！</a></li></ul><h1 id="服务器和网盘"><a href="#服务器和网盘" class="headerlink" title="服务器和网盘"></a>服务器和网盘</h1><ul><li><a href="https://infini-cloud.net/en/">InfiniCLOUD (infini-cloud.net)</a></li></ul><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><ul><li><a href="https://xmake.io/#/zh-cn/">xmake</a></li><li><a href="https://coffeetea.top/zh/">Obsidian文档咖啡豆版 | obsidian文档咖啡豆版 (coffeetea.top)</a></li><li><a href="https://opensource.guide/zh-hans/">开源软件指南 | Open Source Guides</a></li><li><a href="https://wiki.tttt.ee/wiki/idm.html">📗如何使用IDM | TT快下 (tttt.ee)</a></li></ul><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><ul><li><a href="https://top.interviewguide.cn/">InterviewGuide大厂面试真题</a></li></ul><h1 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h1><ul><li><a href="https://juejin.cn/post/7194435171633299513">C++工程实践必备技能 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7184793007302901820#heading-10">CLion开发环境配置完全解析（Qt开发？STM32？速通cmake？ - 掘金 (juejin.cn)</a></li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="https://author.cnki.net/#/index">格式精灵 (cnki.net)</a></li><li><a href="https://qinglian.tencent.com/console/">腾讯轻联 (tencent.com)</a></li><li><a href="https://www.thataicollection.com/zh-CN/">生成式 AI 景观 (thataicollection.com)</a></li><li><a href="https://academic.chatwithpaper.org/">GPT 学术优化 (chatwithpaper.org)</a></li></ul><h1 id="病毒免杀"><a href="#病毒免杀" class="headerlink" title="病毒免杀"></a>病毒免杀</h1><ul><li><a href="https://link.springer.com/article/10.1007/s10207-021-00541-y">[m]allotROPism: a metamorphic engine for malicious software variation development | SpringerLink</a></li><li><a href="https://link.springer.com/article/10.1007/s11416-013-0194-3">Metamorphic code generation from LLVM bytecode | SpringerLink</a></li><li><a href="https://mp.weixin.qq.com/s/k6mi114uyzn2aMXy8uKy6A">绕过Windows Defender的十种方法 (qq.com)</a></li><li><a href="https://llm-attacks.org/index.html#ethics">Universal and Transferable Attacks on Aligned Language Models (llm-attacks.org)</a></li></ul><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p><strong>github.dev</strong> 或按下句号键帮你在线看源码。</p><p><a href="http://www.gitpod.io/">www.gitpod.io</a> 帮你在云上搭建好开发环境并直接运行项目。</p><h1 id="ip-网络"><a href="#ip-网络" class="headerlink" title="ip 网络"></a>ip 网络</h1><ul><li><a href="https://ip.skk.moe/">查看我的 IP 地址 | 查询本机 IP 地址及归属地 | 查看 DNS 出口 IP | 测试 CDN 命中节点 | Sukka | https://ip.skk.moe</a></li><li><a href="https://ip.gs/">IP Address Lookup &#x2F; IPv4 &#x2F; IPv6 - IP.GS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmake</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/xmake.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/xmake.html</url>
      
        <content type="html"><![CDATA[<h1 id="xmake-从入门到精通"><a href="#xmake-从入门到精通" class="headerlink" title="xmake 从入门到精通"></a>xmake 从入门到精通</h1><p><a href="https://www.zhihu.com/column/c_1537535487199281152">A Tour of xmake - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/96031862">xmake从入门到精通9：交叉编译详解 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/97094249">xmake从入门到精通10：多个子工程目标的依赖配置 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/129064618">xmake从入门到精通11：如何组织构建大型工程 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/161553522">xmake从入门到精通12：通过自定义脚本实现更灵活地配置 - 知乎 (zhihu.com)</a></p><h1 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h1><p><a href="https://blog.csdn.net/m0_69086552/article/details/130444581">xmake配合clion用指南-CSDN博客</a><br><a href="https://zhuanlan.zhihu.com/p/640701847">Xmake 新手教程 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian 配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/Obsidian%20%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/Obsidian%20%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Remotely-Save"><a href="#Remotely-Save" class="headerlink" title="Remotely Save"></a>Remotely Save</h1><p><a href="https://www.bilibili.com/video/BV1y54y1K7bV/?spm_id_from=333.999.0.0&vd_source=254fbc04b5fe132d6c95727aac670dea">obsidian+webDav网盘同步教程，笔记轻松同步，实现存储自由_哔哩哔哩_bilibili</a></p><h1 id="在-Obsidian-中执行-Shell-命令"><a href="#在-Obsidian-中执行-Shell-命令" class="headerlink" title="在 Obsidian 中执行 Shell 命令"></a>在 Obsidian 中执行 Shell 命令</h1><p>而 Shell commands 可以在 Obsidian 中设置好命令，并通过 Obsidian 的命令面板或快捷键快速运行。</p><p>在插件设置面板中添加命令：</p><p><img src="/../../../img/blog/48f3cbd2ed2ea9918c17f72ba4e3e2f1_MD5.webp"></p><p>运行博客：</p><ul><li>Shell commands 没有显示终端窗口的功能，所以需要我们启动 powershell 再传入命令</li><li>有了终端窗口我们才可以在窗口中按 Ctrl + C 关闭 Hexo 服务，否则它会一直占用端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start powershell <span class="string">&#x27;-NoExit -Command start http://localhost:4000 ; cd Blog ; hexo s&#x27;</span></span><br></pre></td></tr></table></figure><p>打开站点和主题配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start Blog/_config.yml</span><br><span class="line">start Blog/themes/butterfly4.3.1/_config.yml</span><br></pre></td></tr></table></figure><p>然后修改默认执行环境为 PowerShell 5：</p><p><img src="/../../../img/blog/a71dfad1e73f7d9f594fcc596e01b933_MD5.webp"></p><p>点这个按钮可以执行测试我们的命令：</p><p><img src="/../../../img/blog/a5f82f052ff8f87198c08d18cc7af9b9_MD5.webp"></p><p>如果你遇到了这个错误：<code>hexo:无法加载文件C:\Users\xxx\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。</code> 只需在 Windows 设置&gt;更新和安全&gt;开发者选项，找到 PowerShell，点下应用即可：</p><p><img src="/../../../img/blog/d23fe3ad93154ab94982bbe124d0e4c8_MD5.webp"></p><p>Ctrl+P 打开命令面板，输入 Shell commands 即可找到我们定义好的命令：</p><p><img src="/../../../img/blog/3462bd22140ba71844ee901f66488eae_MD5.webp"></p><p>可以为每个命令设置下别名，就是在命令面板显示的名字：</p><p><img src="/../../../img/blog/73564a2b5df297eafa35b27106300f77_MD5.png"></p><p><img src="/../../../img/blog/f44caffc478975f0b99d1d7569206153_MD5.webp"></p><p>在 Hotkeys 面板中为我们的命令设置好快捷键，就可以通过快捷键快速执行命令了：</p><p><img src="/../../../img/blog/43cdf9a774dbfec85ff37576057b5034_MD5.webp"></p><h1 id="附件管理"><a href="#附件管理" class="headerlink" title="附件管理"></a>附件管理</h1><ul><li>在 Ob 库中建立一个附件文件夹，也就是专门用来存储附件的</li><li>打开设置→文件与链接 -&gt;指定的附件文件夹</li></ul><h1 id="快速插入模板"><a href="#快速插入模板" class="headerlink" title="快速插入模板"></a>快速插入模板</h1><ul><li>安装插件 Hotkeys for templates</li><li>打开 Hotkeys for templates 配置界面，一共分为三大块：Templator-obsidian 插件；核心模板插件；在特定的文件夹创建笔记会自动添加特定的模板</li></ul><p>咱们的需求是在特定的文件夹下新建笔记就会自动加载特定模板</p><p>那么，接下来就在 Templator-obsidian 模块或者核心模板模块中启用一个模板</p><p>来到 Create a new file in a specified folder with a specified template</p><p><img src="/../../img/blog/%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%A8%A1%E6%9D%BF-1.png"></p><p>点击 ADD 添加</p><h1 id="Obsidian-Git"><a href="#Obsidian-Git" class="headerlink" title="Obsidian Git"></a>Obsidian Git</h1><p>根目录创建一个 <code>.gitignore</code>，忽略掉 <code>.obsidian/workspace.json</code></p><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init    </span><br><span class="line">git add .    </span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>github 创建一个空仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/../../img/blog/bb08041ebda0fd3abe12964bd6ca13bb_MD5.png"><br>打开插件设置界面，可以修改一下自动提交和手动提交的日志，我设置的是主机名 + 日期：</p><p><img src="/../../img/blog/4bfc7dad739c897acc45c75020c6e528_MD5.webp"></p><p>在提交信息设置里，可以修改主机名和日期格式，修改完成后点 Preview 可以预览提交信息：</p><p><img src="/../../img/blog/d9de7988f0b0e05d637c208ee1af1f12_MD5.webp"><br>快捷键 <code>Ctrl + P</code> 打开命令面板，输入 open source control view 启用可视化操作面板<br>然后在右侧菜单栏就可以看到操作面板了：</p><p><img src="/../../img/blog/2e724dfb7052ff16e35ad4083a764a48_MD5.webp"><br>一般操作就是：保存所有&gt;提交&gt;推送，就可以更新到 Git 服务器了，如下图顺序</p><p><img src="/../../img/blog/0e27ff82d7b40c4d1e96eaea51546248_MD5.jpg"></p><p>启用自动拉取功能，每次打开知识库就会自动拉取：</p><p><img src="/../../img/blog/0c1a0b636570aa507d23b4ffbddb0ed2_MD5.webp"></p><p>如果在使用过程中有报错的话，<code>Ctrl+Shift+I</code> 在控制台里可以查看详细日志，所有插件的日志都可以在这里看到：</p><p><img src="/../../img/blog/91a3e33577e44f1e48b2fb867ad67a60_MD5.webp"></p><h1 id="在-Obsidian-阅读并批注-Pdf-或-Epub-文档"><a href="#在-Obsidian-阅读并批注-Pdf-或-Epub-文档" class="headerlink" title="在 Obsidian 阅读并批注 Pdf 或 Epub 文档"></a>在 Obsidian 阅读并批注 Pdf 或 Epub 文档</h1><h2 id="下载-Annotator-插件"><a href="#下载-Annotator-插件" class="headerlink" title="下载 Annotator 插件"></a>下载 Annotator 插件</h2><h2 id="添加文件入-Obsidian"><a href="#添加文件入-Obsidian" class="headerlink" title="添加文件入 Obsidian"></a>添加文件入 Obsidian</h2><p>把你想要阅读的 pdf 或 epub 文件拖曳进指定的 obsidian 文件夹。当然，也可以直接拖曳到根目录下。我个人习惯是把 pdf 文件统一用一个文件夹放置，是为了让文件更有秩序。<br><img src="/../../img/blog/1aa4c304d8a14e8135bd00e7795c4a7e_MD5.png" alt="图片"></p><h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><p>在 obsidian 新建一个文档，这个文档就是你阅读这本书或者这篇论文之后的笔记文档。</p><p>在这个文档的开头，写上这三行代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">annotation-target:</span> <span class="string">xxxx.pdf</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>其中，xxxx 的部分是写你目标文件所在的位置，比如我要提取王甦 - 认知心理学这个 pdf 文件，它所在的位置就是：Import Files&#x2F;PDF Files。</p><p>下图红色框框的部分就是你目标 pdf 文件的路径。记得最后要加上【.pdf】或者【.epub】这个后缀。</p><p><img src="/../../img/blog/202345e3c42e50d19624f047cf1730b6_MD5.png" alt="图片"></p><h2 id="切换成-Annotate-模式"><a href="#切换成-Annotate-模式" class="headerlink" title="切换成 Annotate 模式"></a>切换成 Annotate 模式</h2><p>完成第三步后，点开右上角的三个点，点击 Annotate 之后，就出现 pdf 文件和右侧栏标注视图了（如下图）。</p><p><img src="/../../img/blog/78633ce77103e46a1e6dfa8be8351e6c_MD5.png" alt="图片"></p><p><img src="/../../img/blog/40257ecda330e9a4e0e552297347b9e5_MD5.png" alt="图片"></p><h2 id="完成阅读后，切换回-Markdown-模式"><a href="#完成阅读后，切换回-Markdown-模式" class="headerlink" title="完成阅读后，切换回 Markdown 模式"></a>完成阅读后，切换回 Markdown 模式</h2><p>Annotator 最重要的功能就是能够直接在 pdf 文件上进行高亮和批注。等完成阅读后，点击右上角的三个点，点击 Open as Markdown 之后，再点击右上角切换成 “ 阅读视图 “，就可以看到你的高亮和批注啦。</p><p><img src="/../../img/blog/d5b67d5b541ce075e1b03442f392fc1c_MD5.png" alt="图片"></p><h2 id="进一步深加工你的批注"><a href="#进一步深加工你的批注" class="headerlink" title="进一步深加工你的批注"></a>进一步深加工你的批注</h2><p>Annotator 会帮你自动整理你在阅读过程中所批注和高亮的内容。</p><p>当你得到一篇你的笔记之后，你就可以进一步整理你的这些碎片笔记了，让这些碎片笔记真正为你所吸收，成为一篇读书报告或者书评。</p><p><img src="/../../img/blog/c758a95b637468bb9b45489f8c9c4db0_MD5.png" alt="图片"></p><h1 id="想做视屏、会议笔记-在-Obsidian-中这款插件可以帮轻松保存视屏中的重点"><a href="#想做视屏、会议笔记-在-Obsidian-中这款插件可以帮轻松保存视屏中的重点" class="headerlink" title="想做视屏、会议笔记?在 Obsidian 中这款插件可以帮轻松保存视屏中的重点"></a>想做视屏、会议笔记?在 Obsidian 中这款插件可以帮轻松保存视屏中的重点</h1><p><a href="https://mp.weixin.qq.com/s/FZPyCYnFQYFbjrhzRau64Q">mp.weixin.qq.com&#x2F;s&#x2F;FZPyCYnFQYFbjrhzRau64Q</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/typewriter-mode/">Obsidian 插件：Typewriter Mode 更完美的打字机模式 (pkmer.cn)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-docker镜像使用</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/MySQL-docker%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/MySQL-docker%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载-MySQL-镜像"><a href="#下载-MySQL-镜像" class="headerlink" title="下载 MySQL 镜像"></a>下载 MySQL 镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h1 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h1><p>创建 data 目录用来挂载数据库文件，创建 conf 目录用来挂载配置文件</p><h1 id="第一次启动-MySQL"><a href="#第一次启动-MySQL" class="headerlink" title="第一次启动 MySQL"></a>第一次启动 MySQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v D:/Docker/MySQL/conf:/etc/mysql/conf.d -v D:/Docker/MySQL/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></table></figure><p>解释下这条命令的参数</p><p><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</p><p><strong>-d:</strong> 后台运行容器，并返回容器 ID；</p><p><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</p><p><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</p><p><strong>-p:</strong> 指定端口映射，格式为：<strong>主机 (宿主) 端口: 容器端口</strong></p><p><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</p><p><strong>–dns 8.8.8.8:</strong> 指定容器使用的 DNS 服务器，默认和宿主一致；</p><p><strong>–dns-search example.com:</strong> 指定容器 DNS 搜索域名，默认和宿主一致；</p><p><strong>-h “mars”:</strong> 指定容器的 hostname；</p><p><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</p><p><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</p><p><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定 CPU 运行；</p><p>**-m :**设置容器使用内存最大值;</p><p><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</p><p><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</p><p><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</p><p><strong>–volume , -v 本地目录：容器目录:</strong> 绑定一个卷,将容器目录挂载到本地目录</p><h1 id="启动-Mysqldocker-容器"><a href="#启动-Mysqldocker-容器" class="headerlink" title="启动 Mysqldocker 容器"></a>启动 Mysqldocker 容器</h1><p>利用 docker ps 命令可以查看当前运行的容器，docker ps -a 查看所有容器（包括停止的容器）</p><p>可以命令 停止和启动 docker 容器</p><p>停止容器：docker stop [CONTAINER ID]</p><p>启动 容器：docker start [CONTAINER ID]</p><p>也可以在 windows 的 docker 桌面版里启动</p><p><img src="/../../img/blog/ba3f764c1b1ddb1c3b0dacc7c3b3fb0a_MD5.jpg"></p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>命令 docker exec -it [NAMES] bash，这里 names 可以用那么也可以使用容器 ID 即 Container ID</p><p><img src="/../../img/blog/2013019ac6572b7bde84da1285a612b4_MD5.jpg"></p><h2 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h2><p>使用 mysql -uroot -p123456 进入数据库</p><p>使用 show databases; 查看数据库</p><p><img src="/../../img/blog/20b9dd25df9db1f71ffdf25b9ed9f1bf_MD5.webp"></p><p>use mysql 进入名为 mysql 的数据库，show tables 可以查看当前数据库有哪些表</p><h2 id="使用-SQL"><a href="#使用-SQL" class="headerlink" title="使用 SQL"></a>使用 SQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/mysql/conf.d/kaoqin.sql</span><br></pre></td></tr></table></figure><h2 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户并开启远程登录</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27; 你的账号 &#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27; 你的密码 &#x27;;</span><br><span class="line"></span><br><span class="line"># 创建数据库并设置字符集</span><br><span class="line"></span><br><span class="line">CREATE DATABASE `库名` CHARACTER SET &#x27;utf8mb4&#x27;;</span><br><span class="line"></span><br><span class="line"># 给账号授权数据库</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON 库名.* TO &#x27; 你的账号 &#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 刷新权限</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="为了方便以后远程连接，需要下面操作"><a href="#为了方便以后远程连接，需要下面操作" class="headerlink" title="为了方便以后远程连接，需要下面操作"></a>为了方便以后远程连接，需要下面操作</h2><p>需要修改 user 表中的 user 为 root 变为 %。这里没有修改成功，因为一开始就是 %</p><p>exit 关掉，利用 service mysqld restart 重新启动 mysql 服务。</p><p><img src="/../../img/blog/5ae34a419de42bc94ab05f5550bf6e3d_MD5.webp"></p><h2 id="如何远程连接-Docker-的-Mysql-容器"><a href="#如何远程连接-Docker-的-Mysql-容器" class="headerlink" title="如何远程连接 Docker 的 Mysql 容器"></a>如何远程连接 Docker 的 Mysql 容器</h2><p>首先查看 dockers 镜像 ip，在终端输如 ifconfig，如果出现 bash: ifconfig: command not found，则需要安装一些东西 sudo apt-get install net-tools，现在就可以访问 ifconfig</p><p>现在还不能连接成功，给 root 用户分配权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>新装了 mysql8.0 后再用 navicat 链接就会报 2059 的错误。</p><p>上网查了发现是 8.0 之后 mysql 更改了密码的加密规则，只要在命令窗口把加密方法改回去即可。</p><p>首先使用以下命令进入 MySQL 的 docker 容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it MYSQL8.0 bash</span><br></pre></td></tr></table></figure><p>然后登录 MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>然后运行以下 SQL 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; password expire never;</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/u014282578/article/details/127920419">写最好的Docker安装最新版MySQL8（mysql-8.0.31）教程（参考Docker Hub和MySQL官方文档）_docker 安装mysql8_大白有点菜的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地软件配置1</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/%E6%9C%AC%E5%9C%B0%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE1.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/%E6%9C%AC%E5%9C%B0%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><h2 id="将-Scoop-安装到自定义目录-命令行方式-设置环境变量）"><a href="#将-Scoop-安装到自定义目录-命令行方式-设置环境变量）" class="headerlink" title="将 Scoop 安装到自定义目录 (命令行方式)(设置环境变量）"></a>将 Scoop 安装到自定义目录 (命令行方式)(设置环境变量）</h2><p><code>$env:SCOOP=&#39;D:\Applications\Scoop&#39; </code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP&#39;, $env:SCOOP, &#39;User&#39;)</code></p><h2 id="将-Scoop-配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式"><a href="#将-Scoop-配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式" class="headerlink" title="将 Scoop 配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)"></a>将 Scoop 配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)</h2><p><code>$env:SCOOP_GLOBAL=&#39;F:\GlobalScoopApps&#39;</code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;, $env:SCOOP_GLOBAL, &#39;Machine&#39;)</code></p><h2 id="安装并镜像加速"><a href="#安装并镜像加速" class="headerlink" title="安装并镜像加速"></a>安装并镜像加速</h2><ul><li><a href="https://gitee.com/scoop-installer">scoop-installer: scoop及bucket镜像站</a></li><li><a href="https://gitee.com/scoop-installer/scoop">Scoop: scoop国内镜像优化库，能够加速scoop安装及bucket源文件，无需用户设置代理。内置加速站有调用次数限制，请勿提取滥用。 镜像频率：12小时。</a></li></ul><h1 id="Zotero-本体"><a href="#Zotero-本体" class="headerlink" title="Zotero 本体"></a>Zotero 本体</h1><h2 id="添加文献"><a href="#添加文献" class="headerlink" title="添加文献"></a>添加文献</h2><p>Zotero 添加文献主要有通过浏览器插件添加和手动添加两种方式。</p><h3 id="通过浏览器插件添加"><a href="#通过浏览器插件添加" class="headerlink" title="通过浏览器插件添加"></a>通过浏览器插件添加</h3><p><strong>注意，通过这种方式添加需要保证 Zotero 客户端在运行状态。</strong></p><p>安装好浏览器插件后，浏览器的插件栏会多出一个 Zotero 图标（空白页面下），如下图红框。</p><p><img src="/../../img/blog/a7b1dc70a97fea74d55355358a30481f_MD5.png"></p><p>随手打开一篇 arXiv 上的文章，你会发现这个图标变成了一张纸的样子，这意味着 Zotero 插件检测到了一篇文献。点一下它，将出现下图中的提示框，Zotero 说，我帮你把这个文献保存在 “My Library” 啦，除了它自身的信息之外，还有一个 “Comment”，一个全文 PDF 文件，以及一个网页快照（Snapshot）。</p><p><img src="/../../img/blog/c88365fe0ef3757e374debb85a3b0ca7_MD5.webp"></p><p>打开 Zotero，这篇文献已经出现在 “My Library” 中了，连同下载的所有附件。如果附件没有出现的话，你需要稍等片刻，因为 PDF 的下载可能需要一些时间。</p><p><img src="/../../img/blog/fe794eca77aafb142ab878cec2bba311_MD5.webp"></p><p>现在我们打开一个 Google Scholar 搜索结果页面，你会发现这个图标变成了一个 “ 文件夹 “，因为 Zotero 在这个页面找到了多篇文献。点击文件夹图标，在弹出的窗口可以选择一篇或多篇文献加入文献库。</p><p><img src="/../../img/blog/c89c69700f395d2782ded7fc738119ad_MD5.webp"></p><p>Amazing！打开 Zotero，刚才选择的文献全部被加进来了！</p><p><img src="/../../img/blog/a5c0c4c00dca176e891ff02ec5899b4c_MD5.webp"></p><p>即使在找不到文献的页面，Zotero 也可以保存网页的快照（Snapshot）以供离线查看。这是个非常实用的功能，一些大佬的技术博客、公众号推送、发出来可能很快就不会存在的文章，都可以通过这种方式用 Zotero 统一管理，简直不能太方便。下面的图中我用这种方式保存了一篇 GCN 教程：</p><p><img src="/../../img/blog/1eb6941df924c45f2e340bb62e4f3658_MD5.webp"></p><p><img src="/../../img/blog/1355e4a52bd280d759a1b38c63ea9a50_MD5.webp"></p><p>在知道有这个功能之后，我做的第一件事是保存了自己投过所有文章的 review，以在骄傲自满的时候给自己沉重打击。</p><h3 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h3><p>手动添加最常用的情况是直接导入一个本地的 PDF 文件。方法是直接把 PDF 文件拖进 Zotero 界面，像下面这样。</p><p><img src="/../../img/blog/793e17c80299296602bf227fef8d3372_MD5.webp"></p><p>Zotero 会自动识别 PDF 中的各种元数据，自动填充条目信息：</p><p><img src="/../../img/blog/75ed132fe774c2ad46c453a8067837c4_MD5.webp"></p><p>并不是每一个 PDF 文件都能够识别得很准确，比如这篇 Conference Paper 就被识别成了 Book Section，作者的顺序也不对。使用这种方法导入通常需要手动再进行一些修改。</p><p>当然，对于任何一个条目，除了修改基本信息之外，我们也可以手动为它添加各种附件。比如我们通过浏览器添加了一篇没有全文 PDF 的文献，我们可以通过这种方法为其加入自己下载的 PDF。方法是右击条目，选择 “Add attachment “。</p><p><img src="/../../img/blog/a90501bb644b1f5f63fb6da352e9056b_MD5.webp"></p><p>这里 “ Attach Stored Copy of File” 和 “Attach Link to File” 的区别是，前者会把这个文件复制一份丢进文献库，而后者只会把这个附件指向原文件（类似超链接）。</p><p>Zotero 也支持直接通过 ISBN、DOI、PMID 或 arXiv ID 来添加文献。点击工具栏的 “ 魔棒 “ 图标，输入一个 ISBN 编码：</p><p><img src="/../../img/blog/ec0dd8456a92fa425c8166366fe9fcc8_MD5.webp"></p><p>Zotero 会去网上找这个编码对应的元数据，把它加进文献库：</p><p><img src="/../../img/blog/de0611287f9f751f6db6c1a8e6c3ef63_MD5.webp"></p><p>最后，我们也可以纯手动添加条目，自己填写所有数据域、添加附件。点击工具栏的加号按钮，选择一个合适的类型即可。</p><p><img src="/../../img/blog/e4ec2eb01ac6f1582fba28048951f92a_MD5.webp"></p><h2 id="管理文献"><a href="#管理文献" class="headerlink" title="管理文献"></a>管理文献</h2><p>在文献管理上，Zotero 有文件夹（collection）、标签（tag）和便捷搜索（saved search）三种方式。</p><h3 id="文件夹（collection）管理"><a href="#文件夹（collection）管理" class="headerlink" title="文件夹（collection）管理"></a>文件夹（collection）管理</h3><p>在 Zotero 客户端左边栏的 “My Library” 上右键选择 “New Collection”（或者点击最左上角的按钮），新建一个文件夹：</p><p><img src="/../../img/blog/0dcfc09d372d33a9fbee8672e0b9edf9_MD5.webp"></p><p>Zotero 里的文件夹和操作系统里是一样的，我们可以把文献在文件夹之间拖来拖去，还可以在文件夹下新建子文件夹，建立层级的树状结构：</p><p><img src="/../../img/blog/58090b35374130309b53bbe9f53aa67f_MD5.webp"></p><p>如果只是使用 collection，其实和你不用 Zotero、在电脑上建一层一层的文件夹进行管理没有很大区别。我一般会用 collection 进行数据来源层级的区分（比如论文、公众号、网页等），再使用标签（tag）机制进行进一步的细粒度管理。</p><h3 id="标签（tag）管理"><a href="#标签（tag）管理" class="headerlink" title="标签（tag）管理"></a>标签（tag）管理</h3><p>我们可以对文献库中的文献添加一个或多个自定义的标签（tag）：</p><p><img src="/../../img/blog/dd23d27bb9ad6b32730c691f0bea71f7_MD5.webp"></p><p>也可以在用浏览器插件添加文献时顺手添加：</p><p><img src="/../../img/blog/405113edde415dde36da15ff528c3fdb_MD5.webp"></p><p>Zotero 支持最多为 9 个 tag 分别指定不同的颜色，做法是在界面左下角的 tag 面板中，右击一个 tag，选择 “ Assign Color”。</p><p><img src="/../../img/blog/f711e46e54b6fdf9f6976c71697f9cc2_MD5.webp"></p><p>如果一个文献被打上了带颜色的标签，这个颜色的色块也会被显示在文献标题中，一目了然，区别起来很方便！</p><p><img src="/../../img/blog/08e774bf004a3430c71d89c9ba43c718_MD5.webp"></p><p>现在，我们可以通过点击 tag 面板中的标签来实现对于文献的筛选了！</p><p><img src="/../../img/blog/5414718a5d4ade06a752b54f3f8a4b14_MD5.jpg" alt="动图封面"></p><h3 id="便捷搜索（saved-search）"><a href="#便捷搜索（saved-search）" class="headerlink" title="便捷搜索（saved search）"></a>便捷搜索（saved search）</h3><p>我们有时候需要对文献库进行一些搜索，针对关键词、标签，或者二者都有。但有些常用的搜索条件，我们不希望每次都重新输入，这时候便捷搜索功能（saved search）就是一个强大的工具。</p><p>右击 “My Library”，选择 “New Saved Search”。</p><p><img src="/../../img/blog/320e4a44517bb5ecf34bd824fbd0a576_MD5.webp"></p><p>在弹出的窗口中，输入检索条件，点击 “OK”。比如这里我做了一个 ICCV 2019 文章的搜索，限定会议名称包含 “IEEE International Conference on Computer Vision “，日期是 “2019”。当然这需要文献的元数据准确。</p><p><img src="/../../img/blog/0985d58709fd1a74c91260ef2a05c178_MD5.webp"></p><p>点击 “OK”，我们会发现出现了这样带齿轮的紫色文件夹，这就是便捷搜索生成的结果。文件夹中包含了当前文献库中符合此条件的所有文献，如果新增添的文献符合搜索条件的话，也会自动出现在这里。</p><p><img src="/../../img/blog/8bb2b462ed7c5131c14342fee6d70ef8_MD5.webp"></p><p>在工具栏点击搜索按钮，在弹出的高级搜索对话框中，也可以保存便捷搜索：</p><p><img src="/../../img/blog/69878e72e688127af92fc27bd3798f60_MD5.webp"></p><h2 id="笔记系统"><a href="#笔记系统" class="headerlink" title="笔记系统"></a>笔记系统</h2><p>Zotero 的笔记系统比较简单。由于 Zotero 没有内置 PDF 阅读器，所以 PDF 内部的高亮、标注等功能依赖用户的 PDF 阅读器。但 Zotero 允许我们给文献添加多篇笔记（note），在任意一篇文献的 “Notes” 选项卡中点击 “Add” 来添加笔记。</p><p><img src="/../../img/blog/d51bc1c8b0f5e7c216abd333ec9e5b1c_MD5.webp"></p><p>我们可以在出现的富文本编辑器中写简单的笔记。注意左边，文献的附件中出现了一条新的笔记。笔记也可以打标签，或是和文献一起被同步至云空间。</p><p><img src="/../../img/blog/f84ed344b50a4affd17a59c1f6e4481c_MD5.webp"></p><p>值得一提的是，你还可以在工具栏中，添加独立的笔记条目（standalone note），该条目不依赖于任何文献。这意味着，Zotero 还可以当做一个笔记本&#x2F;备忘录来用 [呲牙]。通用性多强啊！</p><p><img src="/../../img/blog/42c879055d7e65feb7045e25197896d7_MD5.webp"></p><h2 id="文献导出"><a href="#文献导出" class="headerlink" title="文献导出"></a>文献导出</h2><p>选中一篇或多篇文献，右击菜单中有三种导出方式： <strong>Export Items</strong>、<strong>Create Bibliography from Items</strong> 和 <strong>Generate Report from Items</strong>。</p><p><img src="/../../img/blog/38f04b3ff627f835ace93701d688cf1a_MD5.webp"></p><p>其中：</p><ul><li><strong>Export Items</strong> 可以将文献导出成不同的格式，包括 BibTex、 Bookmarks 、CSV、Endnote XML 等，也同时可以导出附件。我一般用来和他人分享文章，也可以用来在不同文献管理软件之间做数据迁移。</li><li><strong>Create Bibliography from Items</strong> 就是我们在写论文时生成参考文献最常用的选项了。弹出的对话框中可以选择不同的参考文献格式和导出的形式（默认是复制到剪贴板）。</li></ul><p><img src="/../../img/blog/1bcba8c35ec817bf114d845eef76fee9_MD5.webp"></p><ul><li><strong>Generate Report from Items</strong> 可以为这些文献生成一个固定格式的 HTML report，里面有每篇文献的元数据。感觉没啥用，官方说可以用来 “Reviewing Abstracts “、”Teaching” 以及 “ Organizing Notes into Outlines “。</li></ul><p>这里有一个小技巧——最便捷生成参考文献的方式，是直接把选中的文献拖动至文本编辑器中；或者按 Cmd+ Shift +C，再粘贴到文本编辑框中。这种方式输出的参考文献格式可以在设置的 Export 选项卡里更改，我改成了 BibTex。下面的 GIF 展示了这种 “Quick Copy” 的特性，实在是方便得过分。</p><p><img src="/../../img/blog/30d92b09fddfbe3c46cf3ad69aefbdeb_MD5.jpg" alt="动图封面"></p><p>Zotero 还提供了针对 Word、LibreOffice 的插件，以及对 Google Docs 的支持，如果你用以上工具写作，看看 <a href="https://link.zhihu.com/?target=https://www.zotero.org/support/word_processor_integration">官方的介绍</a> 吧。</p><h1 id="NSSM—封装-windows-服务工具"><a href="#NSSM—封装-windows-服务工具" class="headerlink" title="NSSM—封装 windows 服务工具"></a>NSSM—封装 windows 服务工具</h1><p><strong>NSSM 是一个服务封装程序，它可以将普通 exe 程序或 bat 文件封装成服务，使之像 windows 服务一样运行</strong>。同类型的工具还有微软自己的 srvany，不过 nssm 更加简单易用，并且功能强大。它的特点如下：</p><p><strong>1.支持普通 exe 程序（控制台程序或者带界面的 Windows 程序都可以）或 bat 文件</strong></p><p><strong>2.安装简单又方便</strong></p><p><strong>3.可以重定向输出（并且支持 Rotation）</strong></p><p><strong>4.可以自动守护封装了的服务，程序挂掉了后可以自动重启</strong></p><p><strong>5.可以自定义环境变量</strong></p><p><strong>6.可以自定义启动参数</strong></p><p><strong>NSSM 常用命令，</strong>如下：</p><p><strong>1.安装服务：nssm install 服务名称</strong></p><p><strong>2.删除服务：nssm remove 服务名称</strong></p><p><strong>3.删除服务确定：nssm remove 服务名称 confirm</strong></p><p><strong>4.修改服务（显示界面修改）：nssm edit 服务名称</strong></p><p><strong>5.启动服务：nssm start 服务名称</strong></p><p><strong>6.停止服务：nssm stop 服务名名称</strong></p><p><strong>7.停止服务：nssm stop 服务名称</strong></p><p><strong>NSSM 使用步骤</strong>，如下：</p><p><strong>注册服务弹出如下 NSSM 界面</strong>，如下图：</p><p><img src="/../../img/blog/995ccd62bbd6febec71419597ff0c125_MD5.webp"></p><p>注册服务</p><p>设置说明，如下：</p><p><strong>1.Application Path: 选择系统安装的 exe 或 bat。</strong></p><p><strong>2.Startup directory: 选择 exe 或 bat 项目的根目录。</strong></p><p><strong>3.Arguments: 输入启动参数。</strong></p><p>上述步骤操作完成，即可点击 Install service 来注册服务。我们在系统的服务中即可找到刚刚注册的服务。</p><p><img src="/../../img/blog/e2d9007b90d24b64941a9491919659b8_MD5.webp"></p><p>安装成功</p><p><img src="/../../img/blog/e3be526bf010091371d60c21a5204060_MD5.webp"></p><p>新安装的 windows 服务</p><p>在系统服务中找到刚刚注册的服务，右键属性 - 恢复即可设置此服务挂掉重启等内容。<br><strong>需要注意一点，安装完服务后，需要启动服务，否则没有生效</strong>。</p><h1 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h1><p><a href="https://zhuanlan.zhihu.com/p/504190202">超详细PotPlayer教程：下载安装与优化设置 保姆级教程 - 知乎 (zhihu.com)</a><br><a href="https://www.appinn.com/potplayer-webdav-alist/">PotPlayer 直接播放网盘视频：连接 Alist，接入阿里云盘、百度&#x2F;夸克网盘等 - 小众软件 (appinn.com)</a></p><h1 id="zerotrust"><a href="#zerotrust" class="headerlink" title="zerotrust"></a>zerotrust</h1><h2 id="tunnel"><a href="#tunnel" class="headerlink" title="tunnel"></a>tunnel</h2><ul><li><a href="https://sspai.com/post/79278#!">CloudFlare Tunnel 免费内网穿透的简明教程 - 少数派 (sspai.com)</a></li><li><a href="https://blog.borber.top/tech/cf-tunnel-proxy-ssh/">cloudflare tunnel 代理 ssh | BORBER</a></li><li><a href="https://zhuanlan.zhihu.com/p/621870045">使用cloudflare tunnel免费内网穿透，实现网站的外网访问和远程桌面 - 知乎 (zhihu.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker安装和使用</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Desktop"><a href="#Docker-Desktop" class="headerlink" title="Docker Desktop"></a>Docker Desktop</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>平时要使用 Docker 不想安装虚拟机，也不想买服务器时推荐安装官方提供的「Docker Desktop」</p><p>1、官网下载安装包</p><p>2、修改默认安装位置</p><p>默认是安装在 C 盘中的并且无法修改，后续下载一些镜像时也会存放在 C 盘，我这里通过「mklink 创建软链接」的方式，将文件映射到我的 D 盘中，先在 D 盘创建好如下四个目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir D:\Docker  </span><br><span class="line">mkdir D:\Docker\Local  </span><br><span class="line">mkdir D:\Docker\Roaming\Docker  </span><br><span class="line">mkdir D:\Docker\Roaming\Docker Desktop</span><br></pre></td></tr></table></figure><p>然后以管理员身份打开 cmd，在打开的 cmd 窗口中依次执行下面四个 <code>mklink</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mklink /j &quot;C:\Program Files\Docker&quot; &quot;D:\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Local\Docker&quot; &quot;D:\Docker\Local&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker&quot; &quot;D:\Docker\Roaming\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker Desktop&quot; &quot;D:\Docker\Roaming\Docker Desktop&quot;</span><br></pre></td></tr></table></figure><p>3、安装<br><img src="/../../../img/blog/f032a04751de9c7da78e303776aac9ce_MD5.png" alt="图片"><img src="/../../../img/blog/6aa10763fea03299263663fbe4460bbc_MD5.png" alt="图片"> Accept 后出现以下弹窗：Docker Desktop 需要更新的 WSL 内核版本。通过运行 “wsl –update” 更新 WSL 内核</p><h2 id="更改镜像下载源"><a href="#更改镜像下载源" class="headerlink" title="更改镜像下载源"></a>更改镜像下载源</h2><p><img src="/../../../img/blog/d823d802503de776664e32fb0f187ec7_MD5.png" alt="图片">复制以下代码覆盖掉要更改部分，重启 Docker Desktop 即可，<strong>「registry-mirrors」</strong>配的都是国内的一些镜像源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;defaultKeepStorage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20GB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;buildkit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://cr.console.aliyun.com/&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../../../../img/blog/32d5b77b0cd97dfac76c81cb51e332f0_MD5.png" alt="图片"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/ErDeO9e1aaOIRMkfnfXU7Q">Windows中也可以安装使用Docker (qq.com)</a></p><h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">前言 - Docker — 从入门到实践 (gitbook.io)</a></p><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker 安装 | 菜鸟教程 (runoob.com)</a><br>linux&#x2F;ubuntu 下的安装命令 (使用阿里云镜像)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &amp;&amp; curl -fsSL https:``//download``.[docker.com](http://docker.com/)``/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] [http://mirrors.aliyun.com/docker-ce/linux/ubuntu](http://mirrors.aliyun.com/docker-ce/linux/ubuntu) <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>一条命令就可以搞定安装，不过安装可能需要一些时间，等着就行。</p><p>在使用过程中，当需要查找某个镜像的时候，我们可以去 docker 中央仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a>  查看，从中我们可以看到该名称镜像历史的 release 的版本，我们可以根据需求选择自己需要的版本。</p><h1 id="Docker-常用管理命令"><a href="#Docker-常用管理命令" class="headerlink" title="Docker 常用管理命令"></a>Docker 常用管理命令</h1><p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 | 菜鸟教程 (runoob.com)</a><br>service docker start # 启动 docker 服务器</p><p>(1) 拉取某个镜像</p><p><code>docker pull xxxx</code></p><p>(2) 查看镜像与删除镜像</p><p>查看所有镜像：<code>docker images</code></p><p>删除镜像 ：<code>docker rmi xxxx</code></p><p>注意：删除镜像前必须先停用、删除该镜像产生的实例</p><p>(3) 查看与删除实例</p><p>查看所有实例：<code>docker ps -a</code></p><p>查看 activate 实例：<code>docker ps</code></p><p>删除实例：<code>docker rm xxx</code></p><p>(4) 根据镜像创造 docker 实例,这里以 nginx 为例</p><p><code>docker run --name nginx -p 80:80 -v /root/docker_conf/nginx/nginx.conf:/etc/nginx/nginx.conf -d docker.io/nginx</code></p><p>其中: -name 是镜像的名称,  -p 是端口映射, -v 是绑定一个卷, 我们可以把自己的文件目录映射到镜像内部目录, 冒号前面为自己的实际机器, : 后面是对应镜像的目录。</p><p>(5) 当 docker 启动失败的时候 debug 原因：</p><p><code>docker logs xxID</code></p><p>(6) 进入实例</p><p>根据上面的命令创建的实例之后，如果成功的话会默认启动实例，我们可以使用下列命令进入到该实例内部：</p><p><code>docker exec -it nginx bash</code></p><p><code>docker run -it --rm ubuntu /bin/bash</code>    运行存在的镜像，并以交互的方式进入容器，运行完删除容器</p><p>(7) 复制文件到实例内部系统</p><p><code>docker cp my.cnf mysql5.7:/etc/mysql/my.cnf</code></p><p>把宿主机文件拷到容器里面<br><code>docker cp 要拷贝的文件路径 容器名: 要拷贝到容器里面对应的路径</code></p><p>容器里面拷文件到主机<br><code>docker cp 容器名: 要拷贝的文件在容器中的路径 要拷贝到宿主机器的响应路径</code></p><p>(8)  实例内系统安装软件</p><p>实例内也是一个操作系统，我们可以安装需要使用的程序：</p><p><code>apt update</code></p><p>例如安装 vim 命令 :  <code>apt install vim</code></p><p>(9) 停止,启动,重新启动 docker 实例</p><p><code>docker start/stop/restart xxx</code></p><p>(10)  卸载 docker</p><p><code>yum remove docker-ce</code></p><p>删除镜像、容器、配置文件等内容：</p><p><code>rm -rf /var/lib/docker</code></p><h2 id="Docker-资源管理命令"><a href="#Docker-资源管理命令" class="headerlink" title="Docker 资源管理命令"></a>Docker 资源管理命令</h2><p>docker 镜像在很多时候会耗占比较多的内存和 cpu, 甚至某个镜像被用来挖矿的情况下, cpu 会达到 100%(都是血与泪的实践经历啊)， 所以我们可以使用下面的命令来限制性设置某个实例的内存与 cpu 占用量。</p><p>(1) docker 各个镜像资源使用情况查看 (包括 cpu 和内存)：</p><p><code>docker stats</code></p><p>(2)  限制 docker 内存</p><p><code>docker update -m 20M --memory-reservation 20M --memory-swap 20M nginx</code></p><p>（3）限制 docker cpu</p><p><code>docker update --cpu-period=100000 --cpu-quota=20000 nginx</code></p><p>在每 100 毫秒的时间里，运行进程使用的 CPU 时间最多为 20 毫秒，这里仅仅考虑百分比。</p><h1 id="Docker-镜像文件保存与加载"><a href="#Docker-镜像文件保存与加载" class="headerlink" title="Docker 镜像文件保存与加载"></a>Docker 镜像文件保存与加载</h1><p>(1) 保存 docker 镜像文件到本地：</p><p><code>docker save nginx &gt;./nginx.tar</code></p><p>(2)  在另一台主机加载本地文件到镜像 ：</p><p><code>docker load &lt; nginx.tar</code></p><p>然后看 docker images ，就能看到该镜像 ，但是名字和标签都是 none</p><p>（3）执行完上述语句后，查看本地镜像，会看到新加载的镜像名字和标签都是 none，利用该镜像的 id 对名字和标签重新命名即可：</p><p><code>指令：docker tag 镜像id 镜像名:标签      docker tag 172825a55619 confluence6.12_cracked:0.1   </code></p><p>(4) 启动镜像</p><p><code>docker run -it --name nginx 172825a55619 /bin/bash</code></p><h1 id="Docker-镜像文件的提交与上传到中央仓库"><a href="#Docker-镜像文件的提交与上传到中央仓库" class="headerlink" title="Docker 镜像文件的提交与上传到中央仓库"></a>Docker 镜像文件的提交与上传到中央仓库</h1><p>很多时候，我们会需要在已有的镜像上进行一些自定义修改，然后重新打包上传自己的镜像供别人使用，我们可以使用下面的流程来上传自己新打包的镜像到中央仓库。</p><p>(5.1)  官网账号注册</p><p>首先我们先到 docker 官网注册一个账号，这样我们才能将制作好的镜像上传到 docker 仓库，</p><p>打开 <code>https://hub.docker.com/</code></p><p>(5.2) 提交自己要上传的镜像</p><p><code>docker commit Container_name yourdockerhub/nginx:latest</code></p><p>注意：commit 对包名命名有要求，Container_name 容器名称,yourdockerhub 改成自己的账号，否则无法上传</p><p>(5.3)  登录到远程 docker 仓库 (输入自己注册的账号和密码)</p><p><code>docker login</code></p><p>(5.4)  上传至 docker 云端</p><p><code>docker push yourdockerhub/nginx:latest</code><br>注意: 这里 push 对包名命名有要求，yourdockerhub 改成自己的账号，否则无法上传 上传成功了就可以在中央仓库你的账号下搜到你刚上传的镜像了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="Docker-内程序如何访问宿主机的端口"><a href="#Docker-内程序如何访问宿主机的端口" class="headerlink" title="Docker 内程序如何访问宿主机的端口"></a>Docker 内程序如何访问宿主机的端口</h2><p>请在你的 <code>docker-compose.yml</code> 的服务中加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;host.docker.internal:host-gateway&quot;</span></span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span>  </span><br><span class="line">  <span class="attr">hello-api:</span>  </span><br><span class="line">    <span class="attr">build:</span>  </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span>  </span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">hello/Dockerfile</span>  </span><br><span class="line">    <span class="attr">environment:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span>  </span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">volumes:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./etc:/app/etc</span>  </span><br><span class="line">    <span class="attr">ports:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8888:8888&quot;</span>  </span><br><span class="line">    <span class="attr">stdin_open:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">extra_hosts:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;host.docker.internal:host-gateway&quot;</span></span><br></pre></td></tr></table></figure><p>来源：<a href="https://stackoverflow.com/questions/70505750/lookup-host-docker-internal-no-such-host">mongodb - lookup host.docker.internal: no such host - Stack Overflow</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu解决方案</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/Ubuntu%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/Ubuntu%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-修改终端上显示的用户名和主机名"><a href="#Ubuntu-修改终端上显示的用户名和主机名" class="headerlink" title="Ubuntu 修改终端上显示的用户名和主机名"></a>Ubuntu 修改终端上显示的用户名和主机名</h1><p><a href="https://blog.nowcoder.net/n/9719c38265a44e23a0c7b4b9f0225b72?from=nowcoder_improve">Ubuntu修改终端上显示的用户名和主机名（详细步骤）_牛客博客 (nowcoder.net)</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://zhuanlan.zhihu.com/p/540712989">Linux使用 apt-get 查询并安装指定版本的软件 - 知乎 (zhihu.com)</a></p><h1 id="列出手动安装的软件包"><a href="#列出手动安装的软件包" class="headerlink" title="列出手动安装的软件包"></a>列出手动安装的软件包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-mark showmanual</span><br></pre></td></tr></table></figure><h1 id="Linux-常用命令和系统总结"><a href="#Linux-常用命令和系统总结" class="headerlink" title="Linux 常用命令和系统总结"></a>Linux 常用命令和系统总结</h1><ul><li><a href="https://mp.weixin.qq.com/s/JJM6eZMUKfgpfU2Kjj__Sw">2.6W字系统总结，带你实现 Linux 自由！ (qq.com)</a></li><li><a href="https://www.jianshu.com/p/0bbac570fa4c">接入层问题故障定位</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言环境配置</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="使用包管理器"><a href="#使用包管理器" class="headerlink" title="使用包管理器"></a>使用包管理器</h2><ul><li><p><strong>Ubuntu&#x2F;Debian</strong></p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install golang</span><br></pre></td></tr></table></figure></li><li><p><strong>Fedora</strong></p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install golang</span><br></pre></td></tr></table></figure></li><li><p><strong>CentOS&#x2F;RHEL</strong></p>  <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install golang</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-tarball"><a href="#使用-tarball" class="headerlink" title="使用 tarball"></a>使用 tarball</h2><p>下载安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>解压至 &#x2F;usr&#x2F;local 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>修改环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件后面增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=$HOME/gopath</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><p>保存并退出，并执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><p>重启系统，查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
            <tag> 编程语言/go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL配置</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/WSL%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/WSL%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="WSL-使用-Proxy-连接-Github"><a href="#WSL-使用-Proxy-连接-Github" class="headerlink" title="WSL 使用 Proxy 连接 Github"></a>WSL 使用 Proxy 连接 Github</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=127.0.0.1 </span><br><span class="line"><span class="built_in">export</span> hostport=10808 // 取决于win的proxy工具设置的端口号</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>下面的命令只针对 github.com，在国内还可能会用到 gitee.com，所以不能将所有的 git 站点都添加上代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 设置代理</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1086</span><br><span class="line"><span class="comment">## 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure><p>如果没有代理也不要急，有专门的 cdn 加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.<span class="string">&quot;https://github.com.cnpmjs.org&quot;</span>.insteadOf <span class="string">&quot;https://github.com&quot;</span></span><br><span class="line">git config --global url.<span class="string">&quot;https://ghproxy.com&quot;</span>.insteadOf <span class="string">&quot;https://github.com&quot;</span> </span><br><span class="line">git config --global url.<span class="string">&quot;https://hub.fastgit.xyz/&quot;</span>.insteadOf <span class="string">&quot;https://github.com/&quot;</span></span><br></pre></td></tr></table></figure><p>因为没有官方 CDN，上面都是用爱发电，没准哪天就挂了。</p><h1 id="WSL2-优化"><a href="#WSL2-优化" class="headerlink" title="WSL2 优化"></a>WSL2 优化</h1><h2 id="搬迁"><a href="#搬迁" class="headerlink" title="搬迁"></a>搬迁</h2><p><a href="https://blog.csdn.net/u014175785/article/details/118181230">[WSL2]WSL2迁移虚拟磁盘文件ext4.vhdx_wsl ext4.vhdx-CSDN博客</a></p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>随着使用时间的延长，WSL2 占用的硬盘空间会越来越多，这个时候就需要对其文件进行压缩。方法如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line">diskpart</span><br><span class="line"><span class="comment"># open window Diskpart</span></span><br><span class="line"><span class="built_in">select</span> vdisk file=<span class="string">&quot;C:\Users\Ci\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\ext4.vhdx&quot;</span></span><br><span class="line"><span class="comment"># select vdisk file=&quot;C:\Users\Ci\AppData\Local\Packages\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\LocalState\ext4.vhdx&quot;</span></span><br><span class="line">attach vdisk readonly</span><br><span class="line">compact vdisk</span><br><span class="line">detach vdisk</span><br></pre></td></tr></table></figure><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>当然，WSL2 也会带来内存占用的问题，可以打开 <code>$home/.wslconfig</code>，进行如下设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">wsl2</span>]</span><br><span class="line">memory=<span class="number">4</span>GB</span><br><span class="line">swap=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Wsl-2-设置静态-DNS-服务地址及-Linux-和-Windows-主机网络互相访问设置"><a href="#Wsl-2-设置静态-DNS-服务地址及-Linux-和-Windows-主机网络互相访问设置" class="headerlink" title="Wsl 2 设置静态 DNS 服务地址及 Linux 和 Windows 主机网络互相访问设置"></a>Wsl 2 设置静态 DNS 服务地址及 Linux 和 Windows 主机网络互相访问设置</h1><p>DNS 解析<br>wsl 2 使用的 DNS 解析服务器设置在文件：&#x2F;etc&#x2F;resolv.conf 内设置，这是一个 link 文件，真正的文件路径是：&#x2F;run&#x2F;resolvconf&#x2F;resolv.conf，这个文件是每次 wsl 启动时自动生成的，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span></span><br><span class="line"><span class="comment"># [network]</span></span><br><span class="line"><span class="comment"># generateResolvConf = false</span></span><br><span class="line">nameserver 172.24.144.1</span><br></pre></td></tr></table></figure><p>nameserver 后面的就是指定的 DNS 服务器地址。我发现有时候分配的服务器地址是无效的，如：127.0.0.53，使用 ping 来测试发现提示无法解析地址。需要设置一个固定的 DNS 地址，方法如下：</p><p>新建文件：&#x2F;etc&#x2F;wsl.conf，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>以上配置好就不会自动创建 &#x2F;run&#x2F;resolvconf&#x2F;resolv.conf 文件了。</p><p>退出 wsl，关机然后重新启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">wsl --shutdown</span><br><span class="line">wsl</span><br></pre></td></tr></table></figure><p>删除 link 文件：&#x2F;etc&#x2F;resolv.conf:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>然后新建 &#x2F;etc&#x2F;resolv.conf 文件，内容如下，可自定义 nameserver 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><p>再次退出 wsl，关机然后重新启动<br>查看 &#x2F;etc&#x2F;resolv.conf 文件是否是之前自定义的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>测试网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping niekun.net</span><br></pre></td></tr></table></figure><p>如果你想对将要安装的 deb 软件包使用 dpkg 命令，在这里是如何完成它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i path_to_deb_file</span><br></pre></td></tr></table></figure><h1 id="记录-Windows11-安装-WSL2-配置环境时遇到的坑，以及一些常用命令（持续更新）"><a href="#记录-Windows11-安装-WSL2-配置环境时遇到的坑，以及一些常用命令（持续更新）" class="headerlink" title="记录 Windows11 安装 WSL2 配置环境时遇到的坑，以及一些常用命令（持续更新）"></a>记录 Windows11 安装 WSL2 配置环境时遇到的坑，以及一些常用命令（持续更新）</h1><p><a href="https://blog.csdn.net/luyuyingyingying/article/details/123110417">https://blog.csdn.net/luyuyingyingying/article/details/123110417</a></p><h1 id="WSL-systemd"><a href="#WSL-systemd" class="headerlink" title="WSL_systemd"></a>WSL_systemd</h1><p>安装好新版 wsl 后，通过以下命令来配置 wsl 启用 systemd:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[boot]\nsystemd=true&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>配置后需要通过 <code>wsl --shutdown</code> 命令关闭 wsl，来进行 wsl 的完整重启。</p><h2 id="如何判断-Systemd-是否启用成功"><a href="#如何判断-Systemd-是否启用成功" class="headerlink" title="如何判断 Systemd 是否启用成功"></a>如何判断 Systemd 是否启用成功</h2><p>判断 wsl 是否已启用 systemd，可通过以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps --no-headers -o <span class="built_in">comm</span> 1</span><br></pre></td></tr></table></figure><p>如果命令返回的是 <code>init</code> 说明 systemd 未启用，如果是 <code>systemd</code> 那么你的 systemd 已启用成功了。</p><h2 id="查看已启用的-Systemd-Service"><a href="#查看已启用的-Systemd-Service" class="headerlink" title="查看已启用的 Systemd Service"></a>查看已启用的 Systemd Service</h2><p>通过 systemctl 的 list-units、list-unit-files 命令，都可以很好的查看目前的 systemd 状态，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service --state=enabled</span><br></pre></td></tr></table></figure><h2 id="解决-Exec-Exec-Format-Error"><a href="#解决-Exec-Exec-Format-Error" class="headerlink" title="解决 Exec: Exec Format Error"></a>解决 Exec: Exec Format Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;echo :WSLInterop:M::MZ::/init:PF &gt; /usr/lib/binfmt.d/WSLInterop.conf&#x27;</span><br></pre></td></tr></table></figure><p>After <code>wsl --shutdown</code> and logging back in, now next to systemd, <code>explorer.exe</code> and the like are finally working again!<br><a href="https://github.com/microsoft/WSL/issues/8843">[WSL2][systemd][interop] Unable to Execute Windows Binary when systemd enabled · Issue #8843 · microsoft&#x2F;WSL (github.com)</a></p><h2 id="启用-Systemd-支持后无法从-Wsl2-运行-Exe"><a href="#启用-Systemd-支持后无法从-Wsl2-运行-Exe" class="headerlink" title="启用 Systemd 支持后无法从 Wsl2 运行 Exe"></a>启用 Systemd 支持后无法从 Wsl2 运行 Exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-binfmts --disable cli</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><a href="https://blog.csdn.net/qq_26107827/article/details/129282799">解决：wsl 系统无法访问此文件-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://butterfly.js.org/posts/21cfbf15/">文档地址</a><br><a href="https://fontawesome.com/icons?d=gallery">Find Icons with the Perfect Look &amp; Feel | Font Awesome</a><br>将 <code>butterfly/_config.yml</code> 文件复制，重命名为 <code>_config.butterfly.yml</code> 放在 hexo 根目录下，在这个文件里做修改<br>命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 上传主题，验证是否修改成功。</p><h1 id="主题素材"><a href="#主题素材" class="headerlink" title="主题素材"></a>主题素材</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>在根目录的 source 文件夹下创建 img 文件夹，包含 web 和 blog 两个文件夹，网站图片使用 <code>/img/web/xx.jpg</code>,博客图片使用 <code>![](img/blog/xx.jpg)</code>,并把 butterfly 主题文件夹下的 img 文件夹剪切到 <code>/img/web</code> 文件夹下</p><h2 id="FontAwesome-图标本地加载"><a href="#FontAwesome-图标本地加载" class="headerlink" title="FontAwesome 图标本地加载"></a>FontAwesome 图标本地加载</h2><p>由于 all.min.css 下载 woff 文件较慢所以改为本地加载<br>首先注释掉 themes\butterfly\plugins.yml 中的以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fontawesomeV6:</span></span><br><span class="line"><span class="comment">#   name: &#x27;@fortawesome/fontawesome-free&#x27;</span></span><br><span class="line"><span class="comment">#   file: css/all.min.css</span></span><br><span class="line"><span class="comment">#   other_name: font-awesome</span></span><br><span class="line"><span class="comment">#   version: 6.3.0</span></span><br></pre></td></tr></table></figure><p>再从 <a href="https://github.com/FortAwesome/Font-Awesome/tree/6.x">这个网站</a> 下载 css&#x2F;all.min.css 和 webfonts 文件夹<br>下载好后将 all.min.css 拷贝到 themes\butterfly\source\css 目录中,将 webfonts 文件夹拷贝到 themes\butterfly\source 目录中<br>最后引入 css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/all.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用阿里图标与此类似 <a href="https://www.cnblogs.com/MoYu-zc/p/14399186.html">Hexo-使用阿里iconfont图标 - MoYu-zc - 博客园 (cnblogs.com)</a></p><h2 id="解决-cdn-jsdelivr-net-国内无法加载"><a href="#解决-cdn-jsdelivr-net-国内无法加载" class="headerlink" title="解决 cdn.jsdelivr.net 国内无法加载"></a>解决 cdn.jsdelivr.net 国内无法加载</h2><p>使用 <code>cdn.jsdelivr.net</code> 未受污染的子域：</p><ul><li><code>fastly.jsdelivr.net</code>，由 Fastly 提供 本站使用</li><li><code>gcore.jsdelivr.net</code>，由 G-Core 提供</li><li><code>testingcf.jsdelivr.net</code>，由 CloudFlare 提供<br>将博客主题的文件中 jsDelivr 链接里的 <code>cdn</code> 替换为子域名即可</li></ul><blockquote><p>比如 butterfly 主题中将 <code>themes\butterfly\layout\includes\head\preconnect.pug</code> 和 <code>themes\butterfly\scripts\events\cdn.js</code> 中的 <code>cdn.jsdelivr.net</code> 替换为 <code>fastly.jsdelivr.net</code></p></blockquote><h2 id="查看网页加载的大小和时间"><a href="#查看网页加载的大小和时间" class="headerlink" title="查看网页加载的大小和时间"></a>查看网页加载的大小和时间</h2><ol><li><p>右键点击网页，选择 “ 检查 “，(直接按 ctrl+shift+I 也可以）。</p></li><li><p>出来的界面上，点击 “Network”，按 Ctrl+R，就可以看到每个资源的大小和加载时间</p></li><li><p>进一步分析：点击特定请求，可以查看更详细的信息，如请求头、响应头、传输大小等。通过分析这些信息，你可以确定加载时间较长的资源，并找出导致问题的原因。</p></li></ol><h2 id="外挂-Css"><a href="#外挂-Css" class="headerlink" title="外挂 Css"></a>外挂 Css</h2><p>在 themes\butterfly\source\css 目录中添加 my.css,添加需要的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">45deg</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">            transparent <span class="number">25%</span>,</span><br><span class="line">            transparent <span class="number">50%</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">            transparent <span class="number">75%</span>,</span><br><span class="line">            transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* a标签默认颜色 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停时的颜色 */</span></span><br><span class="line"><span class="comment">/* #article-container a:hover &#123;</span></span><br><span class="line"><span class="comment">    color: #e58a8a;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*a标签颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后引入 css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分割线图标更换"><a href="#分割线图标更换" class="headerlink" title="分割线图标更换"></a>分割线图标更换</h2><p>本次修改基于 Butterfly 主题 3.0.0 ！<br>将图标更换为 “ 太空飞船 “。<br>修改 butterfly 主题配置文件 <code>_data</code>–<code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\f197&#x27;</span> <span class="comment"># the unicode value of Font Awesome icon</span></span><br><span class="line">  <span class="attr">icon-top:</span> <span class="string">-10px</span></span><br></pre></td></tr></table></figure><p><code>icon-top</code> 常用数值：</p><p>-20px：图标位于分割线上方<br>-10px：图标位于分割线中间<br>0px：图标位于分割线下方</p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>安装 hexo-generator-searchdb 搜索插件</p><p>修改配置文件：</p><p>找到 local_search 将 enable 修改为 true</p><h2 id="加速方案"><a href="#加速方案" class="headerlink" title="加速方案"></a>加速方案</h2><h3 id="减少索引内容"><a href="#减少索引内容" class="headerlink" title="减少索引内容"></a>减少索引内容</h3><ul><li>可以设置搜索内容，若仅搜索标题 （搜索内容 content 设置为 false） 则会加载快到飞起<br><img src="/../../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-2.png"></li></ul><h3 id="外链加速"><a href="#外链加速" class="headerlink" title="外链加速"></a>外链加速</h3><p>打开主题下的 local-search.js 文件 (不同主题的位置会不同, 但是一般都在 source&#x2F;js 这种文件夹里) , 找到如下字段</p><p><code>url: GLOBAL_CONFIG.root + path</code> 改成 <code>url: 外链</code><br>外链推荐使用 Jsdelivr 的 cdn (引用 Github 的资源, 不需要手动更新, 速度也挺快)</p><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="使用-Valine-添加评论功能"><a href="#使用-Valine-添加评论功能" class="headerlink" title="使用 Valine 添加评论功能"></a>使用 Valine 添加评论功能</h2><ol><li><p>注册账号并进入：<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a></p></li><li><p>创建开发版应用：</p></li><li><p>创建后点击设置进入应用：</p></li><li><p>复制 AppID、AppKey</p></li><li><p>修改主题配置文件<br>找到 valine，分别将复制的 id 和 key 填入,开启评论需要在 comments-use 中填写你需要的评论。</p></li></ol><h2 id="Giscus-评论系统设置"><a href="#Giscus-评论系统设置" class="headerlink" title="Giscus 评论系统设置"></a>Giscus 评论系统设置</h2><h3 id="安装-Giscus"><a href="#安装-Giscus" class="headerlink" title="安装 Giscus"></a>安装 Giscus</h3><p>点击这个链接安装：**<a href="https://github.com/apps/giscus">GitHub Apps - giscus</a>**</p><h3 id="配置仓库-Discuss-部分"><a href="#配置仓库-Discuss-部分" class="headerlink" title="配置仓库 Discuss 部分"></a>配置仓库 Discuss 部分</h3><p>首先打开仓库的 setting，将 Discussions 部分打上对号，然后建立一个 Announcements 的分类</p><h3 id="进入-Giscus-配置"><a href="#进入-Giscus-配置" class="headerlink" title="进入 Giscus 配置"></a>进入 Giscus 配置</h3><p>链接在这：**<a href="https://link.zhihu.com/?target=https://giscus.app/zh-CN">giscus</a>**</p><p>配置完仓库和 discussion 分类后，可以在启动 giscus 下边复制几个东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo:</span><br><span class="line">repo_id:</span><br><span class="line">category_id:</span><br></pre></td></tr></table></figure><p>还可根据自己的需要在 option 中添加对应的选项，按照 yaml 格式填入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data-strict:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">data-lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">data-input-position:</span> <span class="string">top</span></span><br><span class="line"><span class="attr">data-loading:</span> <span class="string">lazy</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在 Hexo 中，评论功能默认在所有页面都开启，如果部分页面我们不需要评论功能，例如分类、标记页面。我们可以在在站点根目录下 <code>/source/页面名称/index.md</code> 中通过 <code>comments</code> 属性设置 <code>true</code> 或 <code>false</code> 控制该页面或者是文章的评论功能是否打开</p><h1 id="收录谷歌、百度"><a href="#收录谷歌、百度" class="headerlink" title="收录谷歌、百度"></a>收录谷歌、百度</h1><p>1、 查看收录情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址栏输入：site:xingjiahui.top</span><br></pre></td></tr></table></figure><p>2、验证、提交网站：<a href="https://www.ancii.com/avcwpl4d6/">JingLisen</a></p><h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><p><a href="https://www.xiaowu95.wang/posts/80027c66/">记录hexo整合pwa的使用 | 小五的个人杂货铺 (xiaowu95.wang)</a><br><a href="https://butterfly.js.org/posts/ceeb73f/#PWA">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p><h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>百度主动提交链接</p><p>1、首先，在 Hexo 根目录下，安装本插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>2、然后在根目录下，把以下内容配置到 _config.yml 文件中:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/youthlql/youthlql.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/youthlql/youthlql.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span> <span class="comment">## 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span>  <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span>  <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>我把 deploy 配置也贴出来是因为有两个 type，注意用 - 区分</p><p>百度其它的 seo 到他的官网看文档就行</p><h1 id="查看网页-RSS"><a href="#查看网页-RSS" class="headerlink" title="查看网页 RSS"></a>查看网页 RSS</h1><p>本次修改基于 Butterfly 主题 3.0.0 ！</p><p>实现：增加社交图标 RSS，点击可查看网页 RSS。</p><p>1.下载插件 hexo-generator-feed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2.在 hexo 的主配置文件 _config.yml 中任意位置添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p>3.修改 butterfly 主题配置文件 _config.yml ，添加 RSS 的图标：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">RSS链接</span></span><br></pre></td></tr></table></figure><h1 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h1><p>在 <code>\source\_data</code> 中的 <code>butterfly.yml</code> 修改 <code>social</code>：</p><p>(可以选择使用 <code>fa fa-xxx</code> 图标，也可以选择使用 <code>阿里iconfont</code> 图标)</p><p>此处要注意：</p><p>​ 很多人不知道自己上方填的网址怎么找</p><p>​ <code>RSS</code> 上面有教程，<code>Giuhub</code>、<code>Github</code>、<code>CSDN</code>、<code>bilibili</code> 直接 <code>个人主页</code> 网址就可以</p><p>​ <code>QQ</code>：下方 xxxxxxx 填上对应的 <code>qq号码</code> 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=xxxxxxx&amp;website=www.oicqzone.com</span><br></pre></td></tr></table></figure><h1 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h1><p>有时浏览器会缓存旧的链接或搜索结果，无法加载更新后的结果，可使用使用 Ctrl + F5 强制刷新页面，或清除缓存并刷新页面，如缓存图片和文件。</p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp环境搭建</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Cpp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Cpp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h1><h2 id="msvc"><a href="#msvc" class="headerlink" title="msvc"></a>msvc</h2><p><a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">Microsoft C++ 生成工具 - Visual Studio</a></p><h2 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h2><p>首先使用 scoop 安装 msys2（在 main bucket 中就有）：<br><code>scoop install mingw </code></p><h2 id="Clangd"><a href="#Clangd" class="headerlink" title="Clangd"></a>Clangd</h2><p>在 vscode 扩展商店中搜索 clangd 下载，完成后右下角会弹窗提醒你安装 clangd server，点击 Install 即可直接安装，这一点非常便捷。</p><h3 id="自身配置"><a href="#自身配置" class="headerlink" title="自身配置"></a>自身配置</h3><p><a href="https://clangd.llvm.org/config">Configuration (llvm.org)</a><br><a href="https://github.com/clangd/clangd/discussions/1170">为什么 windows 上的 clangd 找不到标准头文件</a><br><a href="https://github.com/clangd/clangd/discussions/1510">clangd 找不到 iostream 和其他标准库</a><br><a href="https://github.com/clangd/clangd/discussions/1573">msvc with clangd · clangd&#x2F;clangd · Discussion #1573 (github.com)</a><br><code>&lt;driver&gt; -E -v -x c++ -</code> 查看是否支持 clangd 用于尝试从驱动程序中提取内置包含的相同标志</p><ol><li><p>在工程目录下新建一个<strong>文件</strong>，名为 <code>.clangd</code>，或者编辑 <code>%LocalAppData%\clangd\config.yaml</code>, 通常为 <code>C:\Users\Bob\AppData\Local\clangd\config.yaml</code></p></li><li><p>在文件中添加</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CompileFlags:</span></span><br><span class="line">  <span class="attr">Add:</span> [<span class="string">&quot;-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include&quot;</span>]<span class="comment">#添加头文件</span></span><br><span class="line"><span class="attr">Diagnostics:</span></span><br><span class="line">  <span class="attr">UnusedIncludes:</span> <span class="string">Strict</span></span><br><span class="line">  <span class="attr">ClangTidy:</span></span><br><span class="line">    <span class="attr">Add:</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">performance-*</span>,</span><br><span class="line">        <span class="string">bugprone-*</span>,</span><br><span class="line">        <span class="string">portability-*</span>,</span><br><span class="line">        <span class="string">modernize-*</span>,</span><br><span class="line">      ]</span><br><span class="line">    <span class="attr">Remove:</span> <span class="string">modernize-use-trailing-return-type</span></span><br><span class="line">    <span class="attr">CheckOptions:</span></span><br><span class="line">      <span class="attr">WarnOnFloatingPointNarrowingConversion:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Mingw"><a href="#Mingw" class="headerlink" title="Mingw"></a>Mingw</h3><p>clangd 默认直接绑定了 VS 路径下的 MSVC 库，如果需要修改为 MinGW 则要改动 target。<br>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">* Clangd *</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径，这里我设置了mingw的路径，但似乎没有效果（clangd仍然链接到了MSVC当中）</span></span><br><span class="line">  <span class="string">&quot;--query-driver=D:\\Scoop\\apps\\msys2\\current\\mingw64\\bin\\x86_64-w64-mingw32-g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0\\x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//设置链接目标，这里改成了GNU，即对应MinGW</span></span><br><span class="line">  <span class="string">&quot;--target=x86_64-w64-windows-gnu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>逐一解释：</p><ul><li>header-insetion: 是否自动引入头文件，这里设置的是从不。</li><li>completion-style: 设置提示格式，这里设置的是展示所有细节。</li><li>query-driver：设置 clangd server 的驱动库路径，这里我设置了 mingw 的路径，但似乎没有效果（clangd 仍然链接到了 MSVC 当中）</li><li>std：设置 c++ 标准</li><li>-I：设置用户自定义的库路径</li><li>–target：设置链接目标，这里改成了 GNU，即对应 MinGW</li></ul><h3 id="Msvc"><a href="#Msvc" class="headerlink" title="Msvc"></a>Msvc</h3><p>msvc 编译器较快（推荐）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment"> * Clangd *</span></span><br><span class="line"><span class="comment"> **********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径</span></span><br><span class="line">  <span class="string">&quot;--query-driver=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\HostX64\\x64\\cl.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Xmake"><a href="#Xmake" class="headerlink" title="Xmake"></a>Xmake</h2><p>设置工具链：<br><code>xmake f -p mingw --mingw=D:\Scoop\apps\msys2\current\mingw64  -c</code><br>贴一段 xmake 的配置代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;c11&quot;</span>,<span class="string">&quot;cxx11&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;P2_6_1&quot;</span>)</span><br><span class="line">set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">add_files(<span class="string">&quot;src/chapter2/practice_2_6_1.cpp&quot;</span>)</span><br><span class="line">add_includedirs(<span class="string">&quot;src/includes&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>通过 <a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a> 插件配合 vscode 来实现对 c&#x2F;c++ 项目的断点调试支持。<br>另外我们还需要依赖 vscode 的 C++ 插件才能进行调试支持</p><h1 id="使用-WSL-在-VScode-上用-LLVM-Clangd-LLDB-高效编程-C"><a href="#使用-WSL-在-VScode-上用-LLVM-Clangd-LLDB-高效编程-C" class="headerlink" title="使用 WSL 在 VScode 上用 LLVM + Clangd + LLDB 高效编程 C++"></a>使用 WSL 在 VScode 上用 LLVM + Clangd + LLDB 高效编程 C++</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>想要在 <a href="https://so.csdn.net/so/search?q=VScode&spm=1001.2101.3001.7020">VScode</a> 上使用 clang 编译 + LLDB 调试 + clangd 自动补全这一套工具链。</p><h2 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang clangd llvm liblldb-dev </span><br></pre></td></tr></table></figure><h2 id="VScode-插件"><a href="#VScode-插件" class="headerlink" title="VScode 插件"></a>VScode 插件</h2><p>必装：</p><ol><li><p>clangd</p></li><li><p>CodeLLDB</p></li></ol><p>选装：</p><ol><li><p>Clang-Format</p></li><li><p>Clang-Tidy</p></li></ol><h3 id="CodeLLDB"><a href="#CodeLLDB" class="headerlink" title="CodeLLDB"></a>CodeLLDB</h3><p>这里安装后需要下载一个包，一般会超时。</p><p>查看自己架构，一般是 X86_64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -m    </span><br><span class="line"># x86_64</span><br></pre></td></tr></table></figure><p>自己下载对应架构的包，<a href="https://github.com/vadimcn/vscode-lldb/releases">下载链接</a><br>手动安装，选择刚刚下载到的安装包。图片参考 <a href="https://blog.csdn.net/Dimuky/article/details/109373334">博客</a><br> <img src="/../../../../img/blog/fcfef3558610976ad201fcc13231fb60_MD5.png"></p><h2 id="配置-VScode"><a href="#配置-VScode" class="headerlink" title="配置 VScode"></a>配置 VScode</h2><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><p>按下 Ctrl+Shift+P，输入 setting(设置)，找到 WSL 的选项<br><img src="/../../../../../public/img/blog/7f970935139f61c89700f15c8ec23c5e_MD5.png"><br> 粘贴以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/build&quot;</span><span class="punctuation">,</span><span class="comment">//指定配置文件compelie_commands.json所在目录，这里有三种方法生成</span></span><br><span class="line">        <span class="comment">// 在后台自动分析文件（基于complie_commands)</span></span><br><span class="line">        <span class="string">&quot;--background-index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 同时开启的任务数量</span></span><br><span class="line">        <span class="string">&quot;-j=12&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// &quot;--folding-ranges&quot;</span></span><br><span class="line">        <span class="comment">// 告诉clangd用那个clang进行编译，路径参考which clang++的路径</span></span><br><span class="line">        <span class="string">&quot;--query-driver=/usr/bin/clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// clang-tidy功能</span></span><br><span class="line">        <span class="string">&quot;--clang-tidy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--clang-tidy-checks=performance-*,bugprone-*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 全局补全（会自动补充头文件）</span></span><br><span class="line">        <span class="string">&quot;--all-scopes-completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 更详细的补全内容</span></span><br><span class="line">        <span class="string">&quot;--completion-style=detailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--function-arg-placeholders&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 补充头文件的形式</span></span><br><span class="line">        <span class="string">&quot;--header-insertion=iwyu&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// pch优化的位置</span></span><br><span class="line">        <span class="string">&quot;--pch-storage=memory&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="生成-Clangd-配置文件"><a href="#生成-Clangd-配置文件" class="headerlink" title="生成 Clangd 配置文件"></a>生成 Clangd 配置文件</h3><p>clangd 对每个项目都需要生成一个名为 compile_commands.json 的配置文件，参见 <a href="https://_clang.llvm.org_docs_jsoncompilationdatabase/">官方文档</a></p><h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>通过 <a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a> 插件配合 vscode 来实现对 c&#x2F;c++ 项目的断点调试支持。<br>另外我们还需要依赖 vscode 的 C++ 插件才能进行调试支持</p><h1 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h1><h2 id="clang-format"><a href="#clang-format" class="headerlink" title="clang-format"></a>clang-format</h2><p>在项目的根目录下创建一个 <code>.clang-format</code> 文件，然后添加内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">BasedOnStyle:</span> <span class="string">Google</span></span><br><span class="line"><span class="attr">IndentWidth:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">DerivePointerAlignment:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">PointerAlignment:</span> <span class="string">Left</span></span><br></pre></td></tr></table></figure><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html">Clang-Format Style Options — Clang 18.0.0git documentation (llvm.org)</a></p><h1 id="VSCode-的-C-配置：-clang-单文件编译和-clangd-检查-可用于-macOS"><a href="#VSCode-的-C-配置：-clang-单文件编译和-clangd-检查-可用于-macOS" class="headerlink" title="VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS)"></a>VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS)</h1><h2 id="使用-clang-x2F-lldb-进行单文件编译和调试"><a href="#使用-clang-x2F-lldb-进行单文件编译和调试" class="headerlink" title="使用 clang&#x2F;lldb 进行单文件编译和调试"></a>使用 clang&#x2F;lldb 进行单文件编译和调试</h2><ol><li><p>确保 <code>clang++</code> 已经正确安装（通过 <code>clang++ -v</code> 可以验证）</p><ul><li>对于 macOS，运行 <code>xcode-select --install</code> 可以安装好本文用到的所有包</li><li>对于 Linux，下载 llvm 包，大概率包含了本文用到的所有包</li></ul></li><li><p>vscode 已启用 CodeLLDB 插件（报错无法下载可以先按报错给的 url 用浏览器下载，然后手动安装）</p></li><li><p><strong>卸载微软提供的 C&#x2F;C++ 插件！！！也不要使用 Code Runner 插件。</strong></p></li><li><p>tasks.json，放入.vscode 文件夹中</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build active file&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span> <span class="comment">// `which clang++` may help you find this path  </span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">        <span class="string">&quot;--std=c++17&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-fcolor-diagnostics&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-fansi-escape-codes&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/.build/$&#123;fileBasenameNoExtension&#125;&quot;</span>  </span><br><span class="line">        <span class="string">&quot;-fstandalone-debug&quot;</span><span class="punctuation">,</span> <span class="comment">// to enable viewing std::string etc. when using lldb on Windows or Linux   </span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Task generated by Debugger.&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>   我的习惯是把所有的可执行文件放到 <code>./build/</code> 文件夹下，如果不这么做的话，改变 3、4 步中的文件路径，以及忽略第五步</p></blockquote><ol><li>launch.json，放入.vscode 文件夹中</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build and debug active file customize&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/.build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build active file&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>在文件夹里新建一个 .build 文件夹（ macOS &#x2F; Linux 必做）</p></li><li><p>按 F 5，就可以编译调试了</p></li></ol><h2 id="使用-clangd-自动补全、代码检查"><a href="#使用-clangd-自动补全、代码检查" class="headerlink" title="使用 clangd 自动补全、代码检查"></a>使用 clangd 自动补全、代码检查</h2><ol><li><p>确保已安装 clangd（应该和 clang++ 在一个包里的，通过 <code>clangd --version</code> 检查）</p></li><li><p>安装 VScode 插件 clangd</p></li><li><p>在工作区根目录下新建一个 <code>compile_flags.txt</code>，这是用来为 clangd 指定参数的，比如使用的标准或是标准库路径之类。内容就是编译选项，一行一个。这里只写了一个标准作为例子</p></li></ol><blockquote><p>一般来说 clangd 的参数是由 compile_commands.json 指定，由 CMake 等构建工具自动生成。但是由于在我的需求中对每一个文件都是相同的编译参数，所以可以手写 compile_flags.txt 统一管理。<br>具体查看 <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html#alternatives">JSON Compilation Database Format Specification</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--std=c++17</span><br></pre></td></tr></table></figure><h2 id="关于-clang-format-文件"><a href="#关于-clang-format-文件" class="headerlink" title="关于 .clang-format 文件"></a>关于 .clang-format 文件</h2><p>我的习惯是直接放在 <code>~</code> 下（如果你的代码都放在你的~和其子文件夹里的话）<br>生成的话，官方文档的那个网页实在是太丑了，我直接选择去 CLion 里配好，然后导出为 .clang-format，既可视化又方便<br>贴一下我的.clang-format</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated from CLion C/C++ Code Style settings  </span></span><br><span class="line"><span class="attr">BasedOnStyle:</span> <span class="string">LLVM</span>  </span><br><span class="line"><span class="attr">AccessModifierOffset:</span> <span class="number">-4</span>  </span><br><span class="line"><span class="attr">AlignAfterOpenBracket:</span> <span class="string">Align</span>  </span><br><span class="line"><span class="attr">AlignConsecutiveAssignments:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">AlignOperands:</span> <span class="string">Align</span>  </span><br><span class="line"><span class="attr">AllowAllArgumentsOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowAllConstructorInitializersOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowShortBlocksOnASingleLine:</span> <span class="string">Always</span>  </span><br><span class="line"><span class="attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowShortFunctionsOnASingleLine:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">AllowShortIfStatementsOnASingleLine:</span> <span class="string">Always</span>  </span><br><span class="line"><span class="attr">AllowShortLambdasOnASingleLine:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">AllowShortLoopsOnASingleLine:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">AlwaysBreakAfterReturnType:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">AlwaysBreakTemplateDeclarations:</span> <span class="literal">Yes</span>  </span><br><span class="line"><span class="attr">BreakBeforeBraces:</span> <span class="string">Custom</span>  </span><br><span class="line"><span class="attr">BraceWrapping:</span>  </span><br><span class="line">  <span class="attr">AfterCaseLabel:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterClass:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterControlStatement:</span> <span class="string">Never</span>  </span><br><span class="line">  <span class="attr">AfterEnum:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterFunction:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterNamespace:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterUnion:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">BeforeCatch:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">BeforeElse:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">IndentBraces:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">SplitEmptyFunction:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">SplitEmptyRecord:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">BreakBeforeBinaryOperators:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">BreakBeforeTernaryOperators:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">BreakConstructorInitializers:</span> <span class="string">BeforeColon</span>  </span><br><span class="line"><span class="attr">BreakInheritanceList:</span> <span class="string">BeforeColon</span>  </span><br><span class="line"><span class="attr">ColumnLimit:</span> <span class="number">0</span>  </span><br><span class="line"><span class="attr">CompactNamespaces:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">ContinuationIndentWidth:</span> <span class="number">8</span>  </span><br><span class="line"><span class="attr">IndentCaseLabels:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">IndentPPDirectives:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">IndentWidth:</span> <span class="number">4</span>  </span><br><span class="line"><span class="attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">MaxEmptyLinesToKeep:</span> <span class="number">2</span>  </span><br><span class="line"><span class="attr">NamespaceIndentation:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">ObjCSpaceAfterProperty:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">ObjCSpaceBeforeProtocolList:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">PointerAlignment:</span> <span class="string">Right</span>  </span><br><span class="line"><span class="attr">ReflowComments:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceAfterCStyleCast:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceAfterLogicalNot:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceAfterTemplateKeyword:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceBeforeAssignmentOperators:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeCpp11BracedList:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceBeforeCtorInitializerColon:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeInheritanceColon:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeParens:</span> <span class="string">ControlStatements</span>  </span><br><span class="line"><span class="attr">SpaceBeforeRangeBasedForLoopColon:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceInEmptyParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesBeforeTrailingComments:</span> <span class="number">0</span>  </span><br><span class="line"><span class="attr">SpacesInAngles:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInCStyleCastParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInContainerLiterals:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInSquareBrackets:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">TabWidth:</span> <span class="number">4</span>  </span><br><span class="line"><span class="attr">UseTab:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://blog.yfi.moe/post/vscode-clang-clangd/">VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS) | Yunfi’s Blog (yfi.moe)</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
            <tag> 编程语言/cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/shell%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/shell%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nushell"><a href="#Nushell" class="headerlink" title="Nushell"></a>Nushell</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.nushell.sh/zh-CN/book/installation.html">安装 Nu | Nushell</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><a href="https://www.nushell.sh/zh-CN/book/configuration.html">配置 | Nushell</a><br><a href="https://quadnucyard.github.io/posts/utility/nushell-vscode.html">Windows 的 Nushell 配置与 VSCode 集成（不说废话）</a><br><a href="https://blog.yusong.me/terminal/shell/nushell">https://blog.yusong.me/terminal/shell/nushell</a></p><h3 id="Vscode-高亮插件"><a href="#Vscode-高亮插件" class="headerlink" title="Vscode 高亮插件"></a>Vscode 高亮插件</h3><p><a href="https://github.com/nushell/vscode-nushell-lang">GitHub - nushell&#x2F;vscode-nushell-lang: A Nushell grammar for Visual Studio Code with IDE support</a></p><h3 id="配置-nushell"><a href="#配置-nushell" class="headerlink" title="配置 nushell"></a>配置 nushell</h3><h4 id="不显示-banner"><a href="#不显示-banner" class="headerlink" title="不显示 banner"></a>不显示 <code>banner</code></h4><ol><li><p>运行 <code>$nu.config-path</code> 查看配置文件地址, 或你安装了 <code>neovim</code> 直接 <code>nvim $nu.config-path</code> 亦可</p></li><li><p>查找 <code>show_banner</code> 并修改为 <code>false</code></p></li></ol><h4 id="代理脚本"><a href="#代理脚本" class="headerlink" title="代理脚本"></a>代理脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias nuproxy = (let-env http_proxy = &quot;http://127.0.0.1:7890&quot; ; let-env https_proxy = &quot;http://127.0.0.1:7890&quot;)</span><br><span class="line">alias unproxy = (unlet-env http_proxy ; unlet-env https_proxy ; )</span><br></pre></td></tr></table></figure><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias l = (ls)</span><br><span class="line">alias ll = (ls -al)</span><br><span class="line">alias c = (clear)</span><br><span class="line">alias pwd = ($env.PWD)</span><br><span class="line">def b [file] &#123;bat -p $file&#125;</span><br><span class="line">def n [file] &#123;nvim $file&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="丰富的数据类型"><a href="#丰富的数据类型" class="headerlink" title="丰富的数据类型"></a>丰富的数据类型</h3><p><img src="/../../img/blog/cbfc02cd7970a48c325a7eb715834c8d_MD5.jpeg"></p><h3 id="强大的-REPL-能力"><a href="#强大的-REPL-能力" class="headerlink" title="强大的 REPL 能力"></a>强大的 REPL 能力</h3><p>作为一个 shell，尤其是一个新的 shell，上手是否简单，使用是否 easy？这一点，nushell 也可圈可点（目前版本也还有一些不足，改进之后会更好）：</p><ul><li>help 命令几乎可以涵盖你绝大部分的搜索需求。由于 nushell 中所有的指令都是以 command 的形式提供，你可以使用 help -f keyword 来搜索相关的命令。例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -f remove</span><br><span class="line"><span class="built_in">help</span> -f upper</span><br></pre></td></tr></table></figure><p>在学习 nushell 之前，先了解一下它的命令集，是很有帮助的，后续也方便快速的查找。尤其是 nushell 中与 filter 相关的一系列命令，它非常类似于 Java 8&#x2F;Scala 中的一些集合 λ 函数。</p><ul><li>还算不错的调试命令，例如：</li><li>view source</li><li>scope</li><li>debug&#x2F;inspect&#x2F;explore：显示变量的值</li><li>explain&#x2F;metadata&#x2F;describe: 查看变量的元信息</li></ul><h3 id="强大的-completion-能力"><a href="#强大的-completion-能力" class="headerlink" title="强大的 completion 能力"></a>强大的 completion 能力</h3><p>nushell 自身的命令具有强大的 completion 能力，而且，它还能把这个能力扩展到外部命令之上，而且，这种扩展的实现非常简单，你也可以对你常用的工具，包装一个 completion 的能力。参考：</p><p><a href="https://link.zhihu.com/?target=https://www.nushell.sh/book/custom_completions.html">Custom completions | Nushell​www.nushell.sh/book/custom_completions.html</a></p><p>比如我引入了 <a href="https://link.zhihu.com/?target=https://github.com/nushell/nu_scripts/blob/main/custom-completions/git/git-completions.nu">https://github.com/nushell/nu_scripts&#x2F;blob&#x2F;main&#x2F;custom-completions&#x2F;git&#x2F;git-completions.nu</a> 之后，我现在使用 git 命令行，基本上就无需搜索了，感觉效率比使用 GUI 工具要提高了不少。</p><h3 id="完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本"><a href="#完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本" class="headerlink" title="完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本"></a>完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本</h3><p>nushell 自身是一个编程语言，这一点倒不奇怪（bash、zsh 等也是这样的），不过，有一些特性让 nushell 相比其他的 shell 有更为强大的编程能力：</p><ul><li>nushell 针对 completion、argument process, command help 提供了语言级的支持，现在，你只需要定义一个简单的函数，它就有了 completion、argument process 的能力。非常的优美。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run the mpp performance bench</span></span><br><span class="line">def-env main [ </span><br><span class="line"><span class="keyword">case</span>?: string@cases-list  <span class="comment"># run the given case (prefix match)</span></span><br><span class="line">--verbose <span class="comment"># show step results</span></span><br><span class="line">--list-details: bool   <span class="comment"># list all cases with sql</span></span><br><span class="line">--list-simple: bool <span class="comment"># list all cases&#x27;name</span></span><br><span class="line">] &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$list_details</span> &#123; <span class="built_in">return</span> <span class="variable">$cases</span> &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">$list_simple</span> &#123; <span class="built_in">return</span> (<span class="variable">$cases</span> | select <span class="keyword">case</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$verbose</span> &#123;</span><br><span class="line"><span class="variable">$env</span>.verbose = <span class="variable">$verbose</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$case</span> == null) &#123;</span><br><span class="line"><span class="variable">$cases</span> | each &#123; |it| (compareSql <span class="variable">$it</span>.<span class="keyword">case</span> <span class="variable">$it</span>.sql) &#125; | reject sql</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$cases</span> | <span class="built_in">where</span> &#123; |it| <span class="variable">$it</span>.<span class="keyword">case</span> | str starts-with <span class="variable">$case</span> &#125;  | </span><br><span class="line">each &#123; |it| (compareSql <span class="variable">$it</span>.<span class="keyword">case</span> <span class="variable">$it</span>.sql) &#125; | reject sql</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个能力太让我开心了，几乎是零成本，就获得了显著的脚本的可用性提升。</p><p><img src="/../../img/blog/335025d13f92da375d850852241bab47_MD5.webp"></p><ul><li>强类型。我更偏爱强类型的语言，代码有更强的鲁棒性。</li><li>简洁、友好的输出。结合使用 nushell 的 table，可以很简单的输出优美的报告。</li></ul><h1 id="Powershell-美化"><a href="#Powershell-美化" class="headerlink" title="Powershell 美化"></a>Powershell 美化</h1><h2 id="安装-NF-字体"><a href="#安装-NF-字体" class="headerlink" title="安装 NF 字体"></a>安装 NF 字体</h2><p>后面介绍的一些功能会有显示一些特殊字符的需求，所以这里我们要提前安装一些支持特殊字符的字体。而 <a href="https://link.zhihu.com/?target=https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a> 这个项目，包含了众多适配过特殊字符的字体，可以放心使用。这里推荐 <code>Meslo-Nerd-Fonts</code>，可以在 scoop 中安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoop默认没有开启nerd-fonts分类，需要开启才能安装相关字体</span></span><br><span class="line">scoop bucket add nerd-fonts</span><br><span class="line"><span class="comment"># 安装字体时需要在管理员权限的终端中运行</span></span><br><span class="line">scoop install Meslo-NF-Mono</span><br></pre></td></tr></table></figure><h2 id="Windows-Terminal-终端-选项"><a href="#Windows-Terminal-终端-选项" class="headerlink" title="Windows Terminal (终端) 选项"></a>Windows Terminal (终端) 选项</h2><p>然后再来配置一下 Windows Terminal (终端) ，点击下拉菜单选择设置打开设置标签页，然后依次修改以下选项：</p><ul><li>启动 -&gt; 默认配置文件，改为 Powershell，如果你已经安装了 Powershell 7.2，这里应当可以自动搜索到。否则可能需要手动编辑配置文件。</li><li>启动 -&gt; 默认终端应用程序，改为 Windows Terminal (终端) 。</li><li>外观 -&gt; 在选项卡中显示亚力克效果，选择启用。</li><li>配色方案，这里可以根据自己喜好调整。</li><li>配置文件默认值 -&gt; 外观 -&gt; 字体，改为 <code>MesloLGS NF</code> 字体，字号按照自己屏幕大小选择，再开启亚力克效果，透明度选择 70% 左右。</li></ul><h2 id="对所有终端生效"><a href="#对所有终端生效" class="headerlink" title="对所有终端生效"></a>对所有终端生效</h2><p>在终端中配置只能在当前终端生效，为了让它能够在所有 Powershell 中永久生效，需要在配置文件中编辑。</p><p>在 Powershell 中运行以下命令，用 vscode 打开 Powershell 的配置文件，如果你没有 vscode，也可以改成 notepad 用记事本来编辑配置文件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code $PROFILE</span><br></pre></td></tr></table></figure><h2 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h2><p>想让 Powershell 也拥有提示和补全功能？PSReadLine 可以帮你，这是一个可以增强终端体验的工具。</p><h3 id="安装-PSReadLine"><a href="#安装-PSReadLine" class="headerlink" title="安装 PSReadLine"></a>安装 PSReadLine</h3><p><a href="https://github.com/PowerShell/PSReadLine">PowerShell&#x2F;PSReadLine: A bash inspired readline implementation for PowerShell (github.com)</a><br>确保你使用的是 Powershell 7.2，然后运行下面的命令。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine -AllowPrerelease -Force</span><br><span class="line"># 或者你喜欢稳定版</span><br><span class="line">Install-Module PSReadLine -Scope CurrentUser</span><br></pre></td></tr></table></figure><h3 id="使用-PSReadLine"><a href="#使用-PSReadLine" class="headerlink" title="使用 PSReadLine"></a>使用 PSReadLine</h3><p>要使用 PSReadLine，同样需要在 <code>$PROFILE</code> 中添加一些配置，可以参考 <a href="https://link.zhihu.com/?target=https://docs.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline">官方文档</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -EditMode Emacs</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -BellStyle None</span><br></pre></td></tr></table></figure><h1 id="zsh-配置"><a href="#zsh-配置" class="headerlink" title="zsh 配置"></a>zsh 配置</h1><h2 id="Zsh-安装"><a href="#Zsh-安装" class="headerlink" title="Zsh 安装"></a>Zsh 安装</h2><ul><li>查看自己系统是否存在 zsh</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ul><li>查看是否是使用的 zsh</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>ubuntu</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"># ubuntu下载安装zsh</span><br><span class="line">apt install zsh -y</span><br><span class="line"># 切换</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>第一次进入 Zsh 会自动出现一个配置界面，这个界面可以根据需要自定义 Zsh。</p><p><img src="/../../img/blog/c773655c02f59e687eaea4359fb5a6ff_MD5.png"></p><p>在这里输入  <code>1</code>  就可以进入配置界面了。</p><p><img src="/../../img/blog/bc5c230efde8f4fd68396d10c8dfef9d_MD5.png"></p><p>配置界面中各个菜单代表的意思分别是：</p><ul><li><code>1</code>：设置命令历史记录相关的选项</li><li><code>2</code>：设置命令补全系统</li><li><code>3</code>：设置热建</li><li><code>4</code>：选择各种常见的选项，只需要选择 “On” 或者 “Off”</li><li><code>0</code>：退出，并使用空白（默认）配置</li><li><code>a</code>：终止设置并退出</li><li><code>q</code>：退出</li></ul><p>这里根据提示，然后按照你自己的喜好配置就可以了。配置好后，会在你的用户目录下生成  <code>.zshrc</code>  文件。然后我们要去这个文件中启用插件和主题。</p><h3 id="Ubuntu-安装插件"><a href="#Ubuntu-安装插件" class="headerlink" title="Ubuntu 安装插件"></a>Ubuntu 安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh-autosuggestions zsh-syntax-highlighting eza</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestion</a><br> 基于历史记录，进行命令的推荐和补全。<br> <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a><br> 对输入的命令提供高亮显示和语法检查。<br> <a href="https://github.com/eza-community/eza">eza-community&#x2F;eza: A modern alternative to ls</a><br> 用于替代原生的  <code>ls</code>，通过不同的颜色来更好地区分文件的类型及相关的元属性。</p></blockquote><h2 id="zsh-completions"><a href="#zsh-completions" class="headerlink" title="zsh-completions"></a>zsh-completions</h2><p><a href="https://github.com/zsh-users/zsh-completions/tree/master">https://github.com/zsh-users/zsh-completions/tree/master</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-completions.git ~/module/zsh-completions</span><br></pre></td></tr></table></figure><h2 id="Fzf-tab"><a href="#Fzf-tab" class="headerlink" title="Fzf-tab"></a>Fzf-tab</h2><p><a href="https://github.com/Aloxaf/fzf-tab">Aloxaf&#x2F;fzf-tab: Replace zsh’s default completion selection menu with fzf! (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fzf</span><br><span class="line">git clone https://gitee.com/mirrors_Aloxaf/fzf-tab.git ~/module/fzf-tab</span><br></pre></td></tr></table></figure><h2 id="x2F-zshrc"><a href="#x2F-zshrc" class="headerlink" title="~&#x2F;. zshrc"></a>~&#x2F;. zshrc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line">source ~/module/fzf-tab/fzf-tab.plugin.zsh</span><br><span class="line">source ~/module/zsh-completions/zsh-completions.plugin.zsh</span><br><span class="line">alias ls=&quot;eza&quot;</span><br></pre></td></tr></table></figure><h1 id="starship"><a href="#starship" class="headerlink" title="starship"></a>starship</h1><ul><li><a href="https://starship.rs/zh-CN/guide/#%F0%9F%9A%80-%E5%AE%89%E8%A3%85">Starship</a></li><li><a href="https://www.fournoas.com/posts/personalize-your-powershell-terminal-with-starship/">通过 Starship 个性化定制 PowerShell 终端 · 白汤四物 (fournoas.com)</a></li><li><a href="https://github.com/starship/starship/issues/5617">starship在wsl的zsh上无法正常运行</a></li></ul><h1 id="命令行常用工具"><a href="#命令行常用工具" class="headerlink" title="命令行常用工具"></a>命令行常用工具</h1><h2 id="替代品"><a href="#替代品" class="headerlink" title="替代品"></a>替代品</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2022/01/cli-alternative-tools.html">命令行常用工具的替代品 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://github.com/ibraheemdev/modern-unix">ibraheemdev&#x2F;modern-unix: A collection of modern&#x2F;faster&#x2F;saner alternatives to common unix commands. (github.com)</a></li></ul><h2 id="Sudo"><a href="#Sudo" class="headerlink" title="Sudo"></a>Sudo</h2><p>Linux 最好用的命令是什么？sudo！一键切换管理员权限，Powershell 每次发现忘了开管理员，就得重开一个，很麻烦的有没有！</p><p>所以我们来给 Windows 装一个 sudo：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search sudo</span><br></pre></td></tr></table></figure><p>然后就可以爽到飞起了。以后不管什么命令失败，都可以 sudo 试一试。</p><h2 id="Zoxide-快速跳转"><a href="#Zoxide-快速跳转" class="headerlink" title="Zoxide 快速跳转"></a>Zoxide 快速跳转</h2><p><a href="https://github.com/ajeetdsouza/zoxide">ajeetdsouza&#x2F;zoxide: A smarter cd command. Supports all major shells. (github.com)</a></p><h1 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h1><ul><li><a href="https://blog.csdn.net/mobaxterm445/article/details/127831465">mobaxterm设置中文_mobaxterm中文-CSDN博客</a></li><li><a href="https://blog.csdn.net/xuanying_china/article/details/120080644">MobaXterm详细使用教程_mobaxterm_personal-CSDN博客</a><br><strong>创建 SSH session</strong></li></ul><p>安装完毕之后界面长这个样。</p><p><img src="/../../img/blog/b8b8ab4b5b38f3290ca82b0aa6e7e54d_MD5.webp"></p><p>当然你们刚安装完成是不会有任何 session 的。下面来创建第一个 SSH session。</p><p>点击菜单栏 「sessions」 –&gt; 「new session」，即可弹出 「session setting」 对话框。由上面那一大串的连接方式我们就可以知道 Moba 的强大之处。</p><p><img src="/../../img/blog/b113eb34598cea732b80e55a3b5e8e5e_MD5.webp"></p><p>我们点选第一个 SSH 图标，并填入相关信息，就可以完成 session 创建了。</p><p>点击确定后，输入密码就可以连接上虚拟机了。而且边上虚拟机之后，它会自动通过 FTP 也连接到虚拟机，直接拖拽就可以进行文件复制了。</p><p><strong>快速连接 session</strong></p><p>创建一个 session 之后，就可以在左侧的 session 标签里留下它的信息，下次需要连接的时候直接双击即可。</p><p><img src="/../../img/blog/b8b8ab4b5b38f3290ca82b0aa6e7e54d_MD5.webp"><br><strong>几个有用的设置</strong></p><p><strong>隐藏菜单栏下的那排按钮</strong></p><p>菜单栏下的那排按钮感觉有点鸡肋，全部可以从菜单栏里找到，而且使用频率也不是非常高。况且，大部分屏幕是长方形的，上下空间有限，左右还比较富余一些，因此去掉它可以省下很大空间。</p><p><img src="/../../img/blog/1400e3ad7d9e0b805433c6cb8f7086e0_MD5.webp"></p><p>在菜单栏点击 「view」 –&gt; 「show menu bar」，即可隐藏此排按钮。</p><p><strong>右键粘贴</strong></p><p>在 Moba 及很多终端工具里，都有这样的功能：鼠标左键划选复制文件，右键粘贴文本。但在 Moba 中右键粘贴功能默认不打开，我们可以手动打开。</p><p>在菜单栏点击 「settings」 –&gt; 「Configuration」，在弹出的对话框中选择 「terminal」，再将 「paste using right-click」 打上对勾即可。</p><p><img src="/../../img/blog/c99899059e794daccbb8978e9d44d519_MD5.webp"></p><p><strong>关闭自动弹出 SFTP</strong></p><p>Moba 在连接上远程电脑之后，将自动打开左侧的 SFTP 侧边栏。有时我们并不需要 SFTP，同时主窗口是黑色的，SFTP 又是白色的，显得有点刺眼，因此可以将自动弹出 SFTP 功能关闭掉。</p><p>在菜单栏点击 「settings」 –&gt; 「Configuration」，在弹出的对话框中选择 「SSH」，再将 「automaticall switch to SSH-browser tab after login」 前面的对勾去掉即可。</p><p><img src="/../../img/blog/80a8627d9b6064f33c47ff0641db606e_MD5.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/Hexo%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/Hexo%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-安装配置"><a href="#Hexo-安装配置" class="headerlink" title="Hexo 安装配置"></a>Hexo 安装配置</h1><h2 id="Node-Js-安装设置"><a href="#Node-Js-安装设置" class="headerlink" title="Node.Js 安装设置"></a>Node.Js 安装设置</h2><p>安装完成后，要查看我们是否安装成功，可以打开命令提示符（<code>Win + R</code>），输入 <code>cmd</code> 打开控制台，输入如下命令，如果出现对应版本号，说明安装成功了；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>在你的硬盘上找个地儿，用来存放你的博客文件，比如我的就在 <code>D:personalFiles/github/blog</code>，这个文件夹你可以根据自己的喜好来设置。然后从命令台进入当前文件夹，接下来就是安装过程了；</p><p>首先安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个文件夹用于存放你的博客，比如我的是 <code>blog</code>，然后进入该文件夹，并用如下命令进行初始化并安装必备组件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后输入如下命令，然后在浏览器中打开 <code>http://localhost:4000</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建博客</span></span><br><span class="line">hexo new &quot;博客名&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开本地服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h1><p><a href="https://blog.17lai.site/posts/5311b619/#%E5%90%84%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F">基于Hexo的matery主题搭建博客增强部署篇4 | 夜法之书 (17lai.site)</a></p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code>(<font color="#00b050">最好均为小写字母</font>)</li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。首先<strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改 <code>_config.yml</code> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><ul><li><a href="https://blog.csdn.net/kuizuo12/article/details/124716488">Vercel部署个人博客_愧怍12的博客-CSDN博客</a></li><li><a href="https://juejin.cn/post/7281257305176588343">Vercel部署高级用法教程 - 掘金 (juejin.cn)</a></li><li>但 vercel 似乎无法正确解析带有 + 的 url, 且 Vercel 的 CNAME 值有 CAA 记录，这个 CAA 记录限制了证书颁发机构</li><li><a href="https://zhuanlan.zhihu.com/p/55252024">手把手教你使用Netlify部署博客及部署自动化 - 知乎 (zhihu.com)</a><br>然后在域名提供商那里添加 CNAME 记录如下<br><img src="/../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-1.png"><br>可用该网站来检测速度 <a href="https://boce.aliyun.com/detect/ping">阿里云网站运维检测平台 (aliyun.com)</a><br>如果该域名本身没有 SSL 证书，但是你将其 CNAME 记录跳转到另一个有 SSL 证书且已经部署的域名，是可以实现 HTTPS 访问的。</li></ul><h1 id="Hexo-Obsidian-内部链接跳转"><a href="#Hexo-Obsidian-内部链接跳转" class="headerlink" title="Hexo+Obsidian 内部链接跳转"></a>Hexo+Obsidian 内部链接跳转</h1><ul><li>Obsidian 选择基于当前笔记的相对路径，关闭 WIKi 链接</li><li>Hexo 需要修改永久链接模式 <a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks）| Hexo</a>，修改 <code>_config.yml</code> 中的</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:category/:post_title.html</span></span><br></pre></td></tr></table></figure><ul><li>不同级目录下的跳转</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[深度学习-图像视频文本标注工具](../../工具使用/深度学习-图像视频文本标注工具)</span><br></pre></td></tr></table></figure><p>需要去掉. md 后缀，采用以下 python 脚本自动全部去除, 脚本放在根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要查找的文件夹路径和要替换的链接格式</span></span><br><span class="line">folder_path = <span class="string">r&quot;.\source\_posts/&quot;</span></span><br><span class="line">link_pattern = <span class="string">r&quot;\[(.*?)\]\((.*?).md\)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹中的所有Markdown文件</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">            <span class="comment"># 使用正则表达式查找并替换链接</span></span><br><span class="line">            new_content = re.sub(link_pattern, <span class="string">r&quot;[\1](\2)&quot;</span>, content)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_content)</span><br></pre></td></tr></table></figure><p>借鉴 <a href="./Hexo%E6%8F%92%E4%BB%B6">Hexo插件</a> 中的钩子函数实现提交时自动更新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; python changemd.py &amp;&amp; git add .</span><br></pre></td></tr></table></figure><h1 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h1><h2 id="Hexo-auto-category-自动生成-Categories"><a href="#Hexo-auto-category-自动生成-Categories" class="headerlink" title="Hexo -auto-category 自动生成 Categories"></a>Hexo -auto-category 自动生成 Categories</h2><p>最常用的文件管理策略，就是利用文件系统目录结构 (树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。<code>hexo-auto-category</code> 根据日志文件 (Markdown) 所在文件目录自动分类，即自动生成 <code>markdown</code> 的 front-matter 中的 <code>categories</code> 变量。</p><p><strong>示例</strong></p><p>对于博客 <code>source/_post/web/framework/hexo.md</code>，该插件会自动生成以下 <code>categories</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:  </span><br><span class="line">  - web  </span><br><span class="line">  - framework  </span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点根目录下的 <code>_config.yml</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth:  </span><br></pre></td></tr></table></figure><h3 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译 &amp; 部署"></a>编译 &amp; 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d  </span><br></pre></td></tr></table></figure><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>如果只想生成第一级目录分类，可以设置 <code>depth</code> 属性，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><h3 id="利用-Git-钩子函数触发更新"><a href="#利用-Git-钩子函数触发更新" class="headerlink" title="利用 Git 钩子函数触发更新"></a>利用 Git 钩子函数触发更新</h3><p>这个插件只有执行 <code>hexo generate</code> 时才会去读取文件夹并更新所有文章的 Front-matter 分类信息，所以我们可以利用 <a href="https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks">Git的钩子函数</a>，在 commit (提交) 的时候先执行下 <code>hexo generate</code>，这样就能实现自动更新了。</p><p>在 <code>.git/hooks</code> 目录下新建一个 <code>pre-commit</code> 文件</p><p><img src="/../../../img/blog/556caf664a0dcbfcadc114240db84416_MD5.webp"></p><p>可以先在该文件中写入 <code>echo hello world!</code>，然后在 git 终端下执行 <code>sh pre-commit</code> 或者 <code>./pre-commit</code> 测试钩子能不能正常执行，没问题后，将如下命令写到文件里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; git add .</span><br></pre></td></tr></table></figure><p> 之所以后面追加 <code>git add .</code>，是因为 generate (生成) 后，所有文章的 Front-matter 信息会更新，所以要将所有修改重新添加进来</p><h2 id="Hexo-neat-插件优化提升访问效率"><a href="#Hexo-neat-插件优化提升访问效率" class="headerlink" title="Hexo-neat 插件优化提升访问效率"></a>Hexo-neat 插件优化提升访问效率</h2><p><a href="https://cloud.tencent.com/developer/article/1946999">Hexo-neat插件优化提升访问效率-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h3 id="1、安装-Hexo-neat"><a href="#1、安装-Hexo-neat" class="headerlink" title="1、安装 Hexo-neat"></a>1、安装 Hexo-neat</h3><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h3 id="2、添加相关配置"><a href="#2、添加相关配置" class="headerlink" title="2、添加相关配置"></a>2、添加相关配置</h3><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件 <code>_config.yml</code> 的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html（ejs，swig等也属于html格式片段）</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/waifu.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span> <span class="comment">#打印日志</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.js&#x27;</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、hexo-neat-插件注意事项"><a href="#3、hexo-neat-插件注意事项" class="headerlink" title="3、hexo-neat 插件注意事项"></a>3、hexo-neat 插件注意事项</h3><p>在使用 hexo-neat 插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。<br><strong>1. 跳过压缩文件的正确配置方式</strong><br>如果按照官方插件的文档说明来配置 exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>已经压缩过的 css 和 js 不用压缩：剔除 exclude（<code>*.min.css</code> 和 <code>* .min.js</code>）</li><li>特殊名字 xx. xx. min. js 的需要单独列出来（这里引用了 fancybox 图片弹窗效果，从压缩名单里单独剔除）</li><li>深目录的，需要单独列出来：（这里我引用了 live 2 d 看板娘的动画） 单用 <code>_*/_.min.js</code> 深目录跳过已压缩文件不行，这部分只好全部跳过压缩了</li></ul><p><strong>2. 压缩 html 时不要跳过 <code>.md</code> 文件和 <code>.swig</code> 文件</strong><br><code>.md</code> 文件就是 markdown 文件，如果跳过压缩 <code>.md</code> 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p><code>.swig</code> 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。<br><strong>3. 注意 md 中不要带特殊标签&lt;&gt;的颜表情&lt;(￣ˇ￣)&#x2F;、&lt;(ˉ^ˉ)&gt;等，因为压缩转换为 html 后会变成<br>&lt; (￣ˇ￣)&#x2F;，转义失败！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
