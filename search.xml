<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>资源</title>
      <link href="/posts/%E6%94%B6%E8%97%8F/%E8%B5%84%E6%BA%90.html"/>
      <url>/posts/%E6%94%B6%E8%97%8F/%E8%B5%84%E6%BA%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li><a href="https://t.bilibili.com/818168768566919224">电锯人黑白</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Azure Open AI</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ai/%E4%BD%BF%E7%94%A8Azure%20Open%20AI.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ai/%E4%BD%BF%E7%94%A8Azure%20Open%20AI.html</url>
      
        <content type="html"><![CDATA[<h1 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/614242045">分享Azure申请及使用OpenAI的经历 - 知乎 (zhihu.com)</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>如果是教育邮箱，可以通过<a href="http://link.zhihu.com/?target=https://azure.microsoft.com/zh-cn/free/students/">这个地址</a>开通azure服务，会多一个Azure for Students的订阅，再用这个订阅的id再去申请一次openai就可以得到1年+100刀的使用期限，可在该网页查看剩余额度<a href="https://learn.microsoft.com/zh-cn/azure/cost-management-billing/manage/azurestudents-subscription-disabled">重新激活已禁用的面向学生的 Azure 订阅 - Microsoft Cost Management | Microsoft Learn</a></p><p>此外，可以用微信账号申请一个腾讯企业邮箱，就选最基础的免费版就行了，审批很快，半天时间都不到。</p><h2 id="申请-1"><a href="#申请-1" class="headerlink" title="申请"></a>申请</h2><p>登录<a href="http://portal.azure.com/">http://portal.azure.com</a>后，依次查找：所有服务——AI+机器学习——认知服务——Azure OpenAI。点击创建，会提示需要提交申请才能使用。<br>可以根据这篇文章来申请<br><a href="https://51.ruyo.net/18402.html">微软Azure申请OpenAI以及部署使用教程 - 如有乐享 (ruyo.net)</a></p><h2 id="开通"><a href="#开通" class="headerlink" title="开通"></a>开通</h2><p>其实早在之前文章中也提到了：<a href="https://51.ruyo.net/18360.html">目前OpenAI账号开通获取高额度方法分享</a></p><p>首先，你需要有一个Azure。可用是免费试用版，Azure Stu版，Azure 企业版 等等。</p><p><a href="https://aka.ms/oai/access">申请开通OpenAI</a>&#x2F;<a href="https://aka.ms/oai/get-gpt4">申请GPT-4</a></p><p>第二，申请的时候官方也表明需要用企业邮箱！不用用gmail，outlook等</p><p>第三，还需要填写企业官网（官网域名和邮箱域名得一致）</p><p>然后就是看运气了等审核通过了。短的4小时，长的可能得几个月。</p><p>部分人审核期间可能需要补充一些资料。也有几个小时就通过的。</p><p>当然了这个申请也是有技巧的。有朋友基本上目前100%几小时就通过了。</p><p><strong>一切操作均有风险！小心你的Azure订阅翻车！</strong></p><p>还<strong>没有Azure？<a href="https://xmp.0-0.win/buy/18">可来点击这里看看</a></strong></p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>1，国内可直接调用Azure的接口域名，不用套代理。不担心风控。</p><p>历史文章：<a href="https://51.ruyo.net/18313.html">OpenAI风控升级，避免API被封，请详细阅读本文说明</a></p><p>2，OpenAI产生的费用可用直接用Azure每个月额度抵扣（针对一些Azure Stu，企业版，Biz版等。即用即付不行）。</p><p>3，某些国内公司想用OpenAI服务，苦于联系不上OpenAI官方。可以试一试Azure的OpenAI方式。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建OpenAI"><a href="#创建OpenAI" class="headerlink" title="创建OpenAI"></a>创建OpenAI</h3><p>1，搜索资源 OpenAI 可找到Azure OpenAI。点击创建！</p><p>填写信息！名称随意！定价选S0</p><p>区域，可选美国东部（法国和欧洲，看你使用情况可选）</p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/153794/5/33207/57143/64846db4Fe1167d87/e972d59ae2cc11ba.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>2，网络选择所有网络 即可。</p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/127441/28/35131/25541/64846e68F7fa72725/acd4de32fe7a87c0.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>3，标记。没有啥标记的直接下一步！</p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/80125/6/22255/28335/64846e96F9e3b113d/6b061dcffe724fe5.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>4，验证相关信息，验证通过后，直接点击创建即可！</p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/155568/24/37340/46831/64846ed8F603b30ac/f2ccf4f731a8ad64.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>5，稍等几分钟，部署完成！</p><p><img src="https://img10.360buyimg.com/ddimg/jfs/t1/218529/17/28400/20560/64846effF02cee7bd/2940e0db8e87f790.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><h3 id="记录关键信息"><a href="#记录关键信息" class="headerlink" title="记录关键信息"></a>记录关键信息</h3><p>打开新建的OpenAI 有几个关键的内容，保存好后面会使用！</p><p>1，终结点 ，如图就是我们专属的接口域名地址</p><p>2，密钥，点击管理密钥可看见密钥内容</p><p><img src="https://img10.360buyimg.com/ddimg/jfs/t1/122244/5/39293/48741/64846f43Fe8bf4c7f/bb18101fc6e6ec52.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><h3 id="模型部署"><a href="#模型部署" class="headerlink" title="模型部署"></a>模型部署</h3><p>1，点击 模型部署，点击 【管理部署】按钮。浏览器会在当前页面打开模型管理的另一个平台。</p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/164377/39/26281/23522/64846fd6Fab45dde5/7e33e779c3a036bf.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>2，在Azure AI 平台中，点击【新建部署】</p><p><img src="https://img10.360buyimg.com/ddimg/jfs/t1/128942/31/36805/32000/6484701dF65d267b2/4cfab543071c8613.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>3，这里需要选择模型，以及填写部署名称。</p><p>模型，选择 gpt-35-turbo（如果你有gpt-4.0，选择这个也行）</p><p><strong>部署名，填写即可。这个部署名后面也会用到！</strong></p><p>高级选项， 可设置Token上限，最高支持240K（酌情选择设置）</p><p>自定义过滤器，按需设置即可</p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/124061/26/39017/16973/6484704cF5e045b8c/f0a5fa34e25df1aa.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p><img src="https://img10.360buyimg.com/ddimg/jfs/t1/142061/16/29194/17803/6484712dFbae17b0b/37e4eda5584c2a50.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>4，分分钟创建成功！Azure AI中也提供了和可以直接聊天的功能，操场设置各类参数。</p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/126795/37/38602/23930/6484717dFa0ebb753/58a5054b5f146608.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/87482/22/39885/28492/64847198F13b45bd0/365565b37ba38442.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>5，体验自带的会话功能。</p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/156642/5/34884/31814/648471e8F99d1d7c0/fd0f7ac32ffa420c.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Azure OpenAI 和 OpenAI官方的调用方式基本相似。只有3处需要注意。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="终结点"><a href="#终结点" class="headerlink" title="终结点"></a>终结点</h4><p>OpenAI官方是 api.openai.com</p><p>Azure OpenAI 则是 ruyo-openai.openai.azure.com （ 每个都不太一样，别直接使用这个哈）</p><h4 id="APIKEY"><a href="#APIKEY" class="headerlink" title="APIKEY"></a>APIKEY</h4><p>OpenAI官方是是以sky 开头的一段</p><p>Azure OpenAI是无规律的一段</p><h4 id="部署名称（Deployment-Name）"><a href="#部署名称（Deployment-Name）" class="headerlink" title="部署名称（Deployment Name）"></a>部署名称（Deployment Name）</h4><p>部署模型时填写的名称</p><h3 id="HTTP调用"><a href="#HTTP调用" class="headerlink" title="HTTP调用"></a>HTTP调用</h3><p>接口地址：<a href="https://ruyo-openai.openai.azure.com/openai/deployments/ruyo-gpt/chat/completions/?api-version=2023-05-15">https://ruyo-openai.openai.azure.com/openai/deployments/ruyo-gpt/chat/completions/?api-version=2023-05-15</a></p><p>请求方式：POST</p><p>BODY：</p><p>这部分和OpenAI基本一致！这里不做太多的介绍！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;messages&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;system&quot;,</span><br><span class="line">            &quot;content&quot;: &quot;如有乐享博客AI助手&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot;: &quot;user&quot;,</span><br><span class="line">            &quot;content&quot;: &quot;如有乐享博客怎么样&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/104520/10/37233/51792/6484388fFd10e6962/956e6841a04d3f40.jpg" alt="微软Azure申请OpenAI以及部署使用教程"></p><p>更多其他调用方式，参考官方文档：<a href="https://learn.microsoft.com/zh-cn/azure/cognitive-services/openai/chatgpt-quickstart?tabs=bash&pivots=programming-language-studio">https://learn.microsoft.com/zh-cn/azure/cognitive-services/openai/chatgpt-quickstart?tabs=bash&amp;pivots=programming-language-studio</a></p><h1 id="CloudFlare-代理"><a href="#CloudFlare-代理" class="headerlink" title="CloudFlare 代理"></a>CloudFlare 代理</h1><p>由于大多数互联网产品暂不支持 <code>Azure OpenAI</code> 的调用接口，我们可以使用 <a href="https://link.juejin.cn/?target=https://dash.cloudflare.com/login" title="https://dash.cloudflare.com/login">CloudFlare Workers</a> 进行代理设置。</p><p>首先注册该网站的账户，然后按以下步骤操作：</p><ol><li>创建一个 Workers</li></ol><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0aa6b7f45cf44f7f94d637f8e829deaa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="Snipaste_2023-04-20_10-40-15.jpg"></p><ol start="2"><li>阅读 github 文档</li></ol><p><a href="https://github.com/haibbo/cf-openai-azure-proxy">github.com&#x2F;haibbo&#x2F;cf-o…</a></p><h1 id="部署ChatGPT-Next-Web"><a href="#部署ChatGPT-Next-Web" class="headerlink" title="部署ChatGPT-Next-Web"></a>部署ChatGPT-Next-Web</h1><p><a href="https://github.com/Yidadaa/ChatGPT-Next-Web/issues/371">[Feature] 添加对 Azure OpenAI API 的支持 · Issue #371 · Yidadaa&#x2F;ChatGPT-Next-Web (github.com)</a></p><ol><li>根据文档<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">Yidadaa&#x2F;ChatGPT-Next-Web: A well-designed cross-platform ChatGPT UI (Web &#x2F; PWA &#x2F; Linux &#x2F; Win &#x2F; MacOS). 一键拥有你自己的跨平台 ChatGPT 应用。 (github.com)</a>在Vercel部署ChatGPT-Next-Web，配置环境变量</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASE_URL：cloudfare worker 部署的URL</span><br><span class="line">OPENAI_API_KEY：在Azure Portal OpenAI 找到 API key，有两个key，用其中一个即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>搭配 <code>stulzq/azure-openai-proxy</code> 使用，可以直接 <code>docker-compose</code> 来启动。<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">chatgpt-next-web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">yidadaa/chatgpt-next-web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">OPENAI_API_KEY:</span> <span class="string">&lt;Auzre</span> <span class="string">OpenAI</span> <span class="string">API</span> <span class="string">Key&gt;</span></span><br><span class="line">      <span class="attr">BASE_URL:</span> <span class="string">http://azure-openai:8080</span></span><br><span class="line">      <span class="attr">DISABLE_GPT4:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">CODE:</span> <span class="string">&quot;password&quot;</span></span><br><span class="line">      <span class="attr">HIDE_BALANCE_QUERY:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">azure-openai</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">azure-openai</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chatgpt-ns</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">azure-openai:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">stulzq/azure-openai-proxy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">AZURE_OPENAI_ENDPOINT:</span> <span class="string">&lt;Auzre</span> <span class="string">OpenAI</span> <span class="string">API</span> <span class="string">Endpoint&gt;</span></span><br><span class="line">      <span class="attr">AZURE_OPENAI_MODEL_MAPPER:</span> <span class="string">&lt;Auzre</span> <span class="string">OpenAI</span> <span class="string">API</span> <span class="string">Deployment</span> <span class="string">Mapper&gt;</span></span><br><span class="line">      <span class="attr">AZURE_OPENAI_API_VER:</span> <span class="number">2023-05-15</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">chatgpt-ns</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">chatgpt-ns:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure>启动有 3 个环境变量需要配置：</li></ol><table><thead><tr><th>变量名</th><th>说明</th></tr></thead><tbody><tr><td>OPENAI_API_KEY</td><td>Azure <strong>密钥和终结点</strong> 里提供的 Key</td></tr><tr><td>AZURE_OPENAI_ENDPOINT</td><td>Azure <strong>密钥和终结点</strong> 里提供的终结点</td></tr><tr><td>AZURE_OPENAI_MODEL_MAPPER</td><td>Azure 部署模型名称映射到 OpenAI 官方模型名称</td></tr></tbody></table><p>特别说明一下 <code>AZURE_OPENAI_MODEL_MAPPER</code>使用 OpenAI 官方标准发起的请求里包含的模型名称是固定的，在这里可以<a href="https://platform.openai.com/docs/models">查询</a>，而在 Azure OpenAI 模型部署时是可以自定义名称的，请求 Azure yes需要提供这个部署模型的名称，所以建立了一个映射关系。</p><p>比如我在 Azure 部署了一个 <code>gpt-3.5-turbo</code>模型，我设置的部署名称为：<code>xc-gpt-35</code>，此时我的设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AZURE_OPENAI_MODEL_MAPPER: gpt-3.5-turbo=xc-gpt-35</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> ai </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目收藏</title>
      <link href="/posts/%E6%94%B6%E8%97%8F/%E9%A1%B9%E7%9B%AE%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F.html"/>
      <url>/posts/%E6%94%B6%E8%97%8F/%E9%A1%B9%E7%9B%AE%E8%BD%AF%E4%BB%B6%E6%94%B6%E8%97%8F.html</url>
      
        <content type="html"><![CDATA[<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li><a href="https://github.com/localsend/localsend">跨平台无缝传输文件localsend</a></li><li></li></ul><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><ul><li><a href="https://tuya.xinxiao.tech/">图压 - 简单易用的图片压缩软件 (xinxiao.tech)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Obsidian 内部链接跳转</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/Hexo+Obsidian%20%E5%86%85%E9%83%A8%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/Hexo+Obsidian%20%E5%86%85%E9%83%A8%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC.html</url>
      
        <content type="html"><![CDATA[<ul><li>Obsidian选择基于当前笔记的相对路径，关闭WIKi链接</li><li>Hexo 需要修改永久链接模式<a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks） | Hexo</a>，修改 <code>_config.yml</code> 中的<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:category/:post_title.html</span></span><br></pre></td></tr></table></figure></li><li>不同级目录下的跳转<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[深度学习-图像视频文本标注工具](../../工具使用/深度学习-图像视频文本标注工具)</span><br></pre></td></tr></table></figure>需要去掉.md后缀，采用以下python脚本自动全部去除,脚本放在根目录<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要查找的文件夹路径和要替换的链接格式</span></span><br><span class="line">folder_path = <span class="string">r&quot;.\source\_posts/&quot;</span></span><br><span class="line">link_pattern = <span class="string">r&quot;\[(.*?)\]\((.*?).md\)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹中的所有Markdown文件</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">            <span class="comment"># 使用正则表达式查找并替换链接</span></span><br><span class="line">            new_content = re.sub(link_pattern, <span class="string">r&quot;[\1](\2)&quot;</span>, content)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_content)</span><br></pre></td></tr></table></figure>借鉴<a href="./hexo%E6%8F%92%E4%BB%B6">hexo插件</a>中的钩子函数实现提交时自动更新<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; python changemd.py &amp;&amp; git add .</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速插入模板</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%A8%A1%E6%9D%BF.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%A8%A1%E6%9D%BF.html</url>
      
        <content type="html"><![CDATA[<ul><li>安装插件Hotkeys for templates</li><li>打开Hotkeys for templates配置界面，一共分为三大块：Templator-obsidian 插件；核心模板插件；在特定的文件夹创建笔记会自动添加特定的模板</li></ul><p>咱们的需求是在A-专业知识文件夹下新建笔记就会自动加载特定模板</p><p>那么，接下来就在Templator-obsidian模块或者核心模板模块中启用一个模板</p><p>来到Create a new file in a specified folder with a specified template</p><p><img src="/../../../img/blog/%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%A8%A1%E6%9D%BF-1.png"></p><p>点击ADD添加</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> ob配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/Rust/%E5%AE%89%E8%A3%85.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/Rust/%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> Rust </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>附件管理</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E9%99%84%E4%BB%B6%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E9%99%84%E4%BB%B6%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="附件管家Billfish"><a href="#附件管家Billfish" class="headerlink" title="附件管家Billfish"></a>附件管家Billfish</h1><h2 id="1-Obsidian中的配置"><a href="#1-Obsidian中的配置" class="headerlink" title="1 Obsidian中的配置"></a>1 Obsidian中的配置</h2><p>总体策略是将图片、音频等所有附件集中保存到一个文件夹中，免得把Ob搞得很乱。</p><ul><li><p>在Ob库中建立一个附件文件夹，也就是专门用来存储附件的</p></li><li><p>打开设置→文件与链接-&gt;指定的附件文件夹</p></li></ul><h2 id="2-Billfish中的配置"><a href="#2-Billfish中的配置" class="headerlink" title="2 Billfish中的配置"></a>2 Billfish中的配置</h2><p>打开billfish→偏好设置→素材库→添加素材库<br>建议选择剪切模式（毕竟是开放式文件管理）</p><h1 id="复制图片自动定位和命名"><a href="#复制图片自动定位和命名" class="headerlink" title="复制图片自动定位和命名"></a>复制图片自动定位和命名</h1><p>修改附件默认存放路径为source&#x2F;img&#x2F;blog<br>安装Paste image rename，中间3个选项选择开启</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> ob配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代码格式化和静态分析检查的一站式工作流 Cpp Linter</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/c++/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E6%A3%80%E6%9F%A5%E7%9A%84%E4%B8%80%E7%AB%99%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%20Cpp%20Linter.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/c++/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E6%A3%80%E6%9F%A5%E7%9A%84%E4%B8%80%E7%AB%99%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%20Cpp%20Linter.html</url>
      
        <content type="html"><![CDATA[<h2 id="clang-tools-binaries"><a href="#clang-tools-binaries" class="headerlink" title="clang-tools binaries"></a>clang-tools binaries</h2><p>如果你需要使用 clang-tools binaries，以 Windows 为例，通常下载指定版本的 clang-tools 需要先安装 LLVM 这个大的安装包才能获得 clang-format &amp; clang-tidy 这些工具；在 Linux 上会方便很多，可以使用命令来下载，但如果想下载指定版本的 clang-format &amp; clang-tidy 可能要面临手动下载和安装。</p><p>clang-tools-pip 提供并支持在 Windows，Linux，MacOs 上通过命令行下载任何指定版本的 clang-tools 可执行文件。</p><p>只需要使用 <code>pip</code> 安装 <code>clang-tools</code> （即 <code>pip install clang-tools</code>）后，然后通过 <code>clang-tools</code> 命令就可以安装任何版本的可执行文件了。</p><p>例如，安装 clang-tools 版本 13：<br><code>$ clang-tools --install 13</code><br>也可以将它安装到指定目录下面：<br><code>$ clang-tools --install 13 --directory .</code></p><p><code>clang-tools</code> CLI 还提供了其他选项，比如自动帮你创建链接等，可以查看它的 CLI 文档来获得帮助。<br><a href="https://cpp-linter.github.io/clang-tools-pip/cli_args.html">Command Line Interface Options - clang-tools installer (cpp-linter.github.io)</a></p><h2 id="把-clang-tools-集成到工作流"><a href="#把-clang-tools-集成到工作流" class="headerlink" title="把 clang-tools 集成到工作流"></a>把 clang-tools 集成到工作流</h2><ol><li><p>cpp-linter-action提供了通过 CI 进行检查，当发现没有格式化或有诊断错误的代码时 CI 会失败，来防止合并到主分的代码没有通过代码检查；</p></li><li><p>cpp-linter-hooks通过 git hook 在提交代码的时候自动运行 clang-format 和 clang-tidy，如果不符合规范则提交失败，并提示并自动格式化。</p></li></ol><h2 id="cpp-linter-action-在代码合并前做自动检查"><a href="#cpp-linter-action-在代码合并前做自动检查" class="headerlink" title="cpp-linter-action 在代码合并前做自动检查"></a>cpp-linter-action 在代码合并前做自动检查</h2><p>如果你使用的是 GitHub，那么非常推荐你使用 cpp-linter-action 这个 GitHub Action。</p><p>以下是它的一些重要特性：</p><ol><li><p>运行结果支持 Annotations 和 Thread Comment 两种方式展示</p></li><li><p>支持 GitHub 的 public 和 private 仓库</p></li><li><p>支持绝大多数 Clang 版本</p></li><li><p>还有很多其他的 optional-inputs<br><a href="https://github.com/cpp-linter/cpp-linter-action#optional-inputs">cpp-linter&#x2F;cpp-linter-action: Lint C&#x2F;C++ code with clang-format and clang-tidy then post annotations, comments, and step summary with results. (github.com)</a></p></li></ol><p>使用这个 Action 只需要在 <code>.github/workflows/</code> 下面创建一个 cpp-linter.yml，内容如下：</p><blockquote><p>当然也可以把下面的配置加到一个已经存在的 Workflow，例如 build。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">name:</span> <span class="string">cpp-linter</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">on:</span>  </span><br><span class="line">  <span class="attr">pull_request:</span>  </span><br><span class="line">    <span class="string">types:</span> [<span class="string">opened</span>, <span class="string">reopened</span>]  </span><br><span class="line">  <span class="attr">push:</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">jobs:</span>  </span><br><span class="line">  <span class="attr">cpp-linter:</span>  </span><br><span class="line">    <span class="string">runs-on:</span> <span class="string">ubuntu-latest</span>  </span><br><span class="line">    <span class="attr">steps:</span>  </span><br><span class="line">      <span class="string">-</span> <span class="string">uses:</span> <span class="string">actions/checkout@v3</span>  </span><br><span class="line">      <span class="string">-</span> <span class="string">uses:</span> <span class="string">cpp-linter/cpp-linter-action@v1</span>  </span><br><span class="line">        <span class="string">id:</span> <span class="string">linter</span>  </span><br><span class="line">        <span class="attr">env:</span>  </span><br><span class="line">          <span class="string">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span>  </span><br><span class="line">        <span class="attr">with:</span>  </span><br><span class="line">          <span class="string">style:</span> <span class="string">file</span>  </span><br><span class="line">  </span><br><span class="line">      <span class="string">-</span> <span class="string">name:</span> <span class="string">Fail</span> <span class="string">fast?!</span>  </span><br><span class="line">        <span class="string">if:</span> <span class="string">steps.linter.outputs.checks-failed</span> <span class="string">&gt;</span> <span class="number">0</span>  </span><br><span class="line">        <span class="string">run:</span> <span class="string">|</span>  </span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;Some files failed the linting checks!&quot;</span>  </span><br><span class="line">          <span class="string">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果发现存在没有进行格式化或是静代码态检查，CI workflow 会失败，并且会有如下注释说明，annotations 默认是开启的。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/b5fEYGfCDcq5GdTztDxE2hDIJXwH0icrYMqgjWBJKvMLNIUVh26jRprW4CclKpoLBuwib7brq81iarPBeRyT1nrbA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>如果开启了 Thread Comment 选项（即 <code>thread-comments: true</code>）就会将在 Pull Request 中自动添加如下错误评论。</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/b5fEYGfCDcq5GdTztDxE2hDIJXwH0icrYibMWFf0zQ051Pr8hZRkI4dDH5PIHDCAVxbT4eXzpa7lapDQfh2faxrA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="cpp-linter-hooks-在提交代码时自动检查"><a href="#cpp-linter-hooks-在提交代码时自动检查" class="headerlink" title="cpp-linter-hooks 在提交代码时自动检查"></a>cpp-linter-hooks 在提交代码时自动检查</h2><p>cpp-linter-hooks 是通过 git hook 在提交代码时做自动检查，这种方式不限制使用任何 SCM。</p><p>只需要在项目仓库中添加一个 <code>.pre-commit-config.yaml</code> 配置文件，然后将 cpp-linter-hooks这个 hook 添加到 <code>.pre-commit-config.yaml</code> 中，具体设置如下：</p><blockquote><p><code>.pre-commit-config.yaml</code> 是 <code>pre-commit</code> framework 的默认配置文件。</p></blockquote><ol><li><p>安装 pre-commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pre-commit</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件 <code>.pre-commit-config.yaml</code>，设置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line"><span class="string">-</span> <span class="string">repo:</span> <span class="string">https://github.com/cpp-linter/cpp-linter-hooks</span></span><br><span class="line">  <span class="string">rev:</span> <span class="string">v0.2.1</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">    <span class="string">-</span> <span class="string">id:</span> <span class="string">clang-format</span></span><br><span class="line">      <span class="string">args:</span> [<span class="string">--style=file</span>]  <span class="comment"># to load .clang-format</span></span><br><span class="line">    <span class="string">-</span> <span class="string">id:</span> <span class="string">clang-tidy</span></span><br><span class="line">      <span class="string">args:</span> [<span class="string">--checks=.clang-tidy</span>] <span class="comment"># path/to/.clang-tidy</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>这里的 file 是指 <code>.clang-format</code>, clang-format 默认支持的编码格式包括 LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit，如果需要特殊设置可以在仓库的根目录下面创建配置文件 <code>.clang-format</code>。同理，如果默认的静态分析设置不满足要求，可以在仓库的根目录下创建 <code>.clang-tidy</code> 配置文件。</p></blockquote><p>更多配置可以参考 <a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter&#x2F;cpp-linter-hooks: C&#x2F;C++ linter hooks for pre-commit (github.com)</a></p><ol start="3"><li><p>安装 git hook 脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pre-commit install</span><br><span class="line">pre-commit installed at .git/hooks/pre-commit</span><br></pre></td></tr></table></figure></li><li><p>之后每次 <code>git commit</code> 都会自动执行 clang-format 和 chang-tidy。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kms激活office+visio2019</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/kms%E6%BF%80%E6%B4%BBoffice+visio2019.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/kms%E6%BF%80%E6%B4%BBoffice+visio2019.html</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.cnblogs.com/shan333/p/14894774.html">kms激活office+visio2019</a></p><h1 id="一、kms激活office2019"><a href="#一、kms激活office2019" class="headerlink" title="一、kms激活office2019"></a><strong>一、kms激活office2019</strong></h1><p>1、<strong>卸载干净office有关产品</strong>：先把自己电脑上所有关于office的产品卸载干净，然后才开始使用office tool 安装和激活office2019；</p><p>2、<strong>下载office Tool plus 工具</strong>：下载那个比较全的那个包吧，最大那个[即<strong>第一个安装包</strong>]； 官网： <a href="https://otp.landian.vip/zh-cn/download.html">https://otp.landian.vip/zh-cn/download.html</a></p><p>3、<strong>解压office tool plus 工具包，移除残留的旧office</strong>：先解压office Tool plus 工具包，利用office Tool plus 工具[Office Tool Plus.exe]，先把自己电脑的老版本office卸载了: 双击Office Tool Plus.exe，选择 <strong>工具箱 -》修复工具-》移除office-》使用office Tool plus 移除office-》开始</strong></p><p>4、<strong>部署</strong>：点击 <strong>部署</strong></p><p><img src="https://img2020.cnblogs.com/blog/2282448/202106/2282448-20210617180453717-319045303.png"></p><p> <strong>按上图，选好、设置好后，点击当前页面右上角的开始部署</strong></p><p>5、<strong>激活</strong>：点击 <strong>激活</strong></p><p><img src="https://img2020.cnblogs.com/blog/2282448/202106/2282448-20210617180707513-1551875651.png"></p><p>  <strong>按上图，</strong> 选好、填好，点击当前页面右上角的   激活</p><p><strong>✿  密钥管理填写  NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP，KMS服务器，填写kms.03k.org</strong></p><p>■ 备用的秘钥： N9J9Q-Q7MMP-XDDM6-63KKP-76FPM</p><p>■ 备用的KMS 主机： <a href="https://catqu.com/?p=111">kms.catqu.com</a></p><p><strong>▷ 注意细节：复制粘贴的时候，不要多复制了 空格 哈~</strong></p><hr><h1 id="二、kms激活visio2019"><a href="#二、kms激活visio2019" class="headerlink" title="二、kms激活visio2019"></a><strong>二、kms激活visio2019</strong></h1><p>1、安装visio2019，同样部署、激活：<br>部署时选择+添加产品：选择visio专业版 2019批量版</p><p>然后那些系数，就用安装office时的系数，点击开始部署，部署完就激活：</p><p><img src="https://img2020.cnblogs.com/blog/2282448/202106/2282448-20210617181043057-2068825440.png"></p><p><strong>密钥管理填写  9BGNQ-K37YR-RQHF2-38RQ3-7VCBB，KMS服务器，填写kms.03k.org</strong></p><hr><h1 id="三、注意事项："><a href="#三、注意事项：" class="headerlink" title="三、注意事项："></a><strong>三、注意事项：</strong></h1><p><strong>仅批量版 (Volume) 支持 KMS 激活</strong>，<strong>零售版 (Retail) 不支持使用 KMS 激活。</strong>    <strong>KMS 有效期为 180 天，正常情况下系统会自动续期，所以不用担心过期，除非服务器挂了。</strong>  </p><p>除了使用这些公网 KMS 外，还可自行搭建 KMS 使用，具体请自行查找相关资料。</p><p>部分 KMS 可能会因为地区问题在某些地方不可用，建议使用前自行检测可用性。</p><p><strong>使用 KMS 激活并不会显著影响 Office 的功能，</strong>无法登录账号是因为 Windows 系统太旧、Internet Explorer 问题或者网络问题，与使用 KMS 无关。</p><hr><h1 id="四、KMS-地址列表"><a href="#四、KMS-地址列表" class="headerlink" title="四、KMS 地址列表"></a><strong>四、KMS 地址列表</strong></h1><p><strong>■ 好用、常用几个如下：</strong></p><p><strong><strong><strong><strong><a href="https://03k.org/kms.html">kms.03k.org</a></strong></strong></strong></strong></p><p><strong><strong><strong><strong><strong><a href="https://catqu.com/?p=111">kms.catqu.com</a></strong></strong></strong></strong></strong></p><p><strong><a href="https://www.ghpym.com/kms.html">kms.ghpym.com</a></strong></p><p>参考文章：<a href="https://juejin.cn/post/6844903746485354504">https://juejin.cn/post/6844903746485354504</a> 《安装和激活Office 2019》</p><p><a href="https://www.coolhub.top/tech-articles/kms_list.html">https://www.coolhub.top/tech-articles/kms_list.html</a> 《KMS 地址列表》</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装配置</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载ubuntu"><a href="#下载ubuntu" class="headerlink" title="下载ubuntu"></a>下载ubuntu</h2><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">Index of &#x2F;ubuntu-releases&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br>vmware 安装方法<br><a href="https://blog.csdn.net/trackxiaoxin321/article/details/115591796">(12条消息) 虚拟机ubuntu16.04超详细安装教程（零基础照做即可）_ubuntun16.04 安装虚拟机_LKTracker的博客-CSDN博客</a></p><h2 id="安装VMware-tools"><a href="#安装VMware-tools" class="headerlink" title="安装VMware tools"></a>安装VMware tools</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install open-vm-tools-desktop -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list sources_backup.list</span><br></pre></td></tr></table></figure><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p><code>sudo gedit /etc/apt/sources.list</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#清华大学源</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security multiverse</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h2><p><a href="https://cloud.tencent.com/developer/article/1679861">windows宿主机如何SSH连接VMware的Linux虚拟机 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><ol><li>在vmware中设置共享文件夹<br>即在VMware workstation 中：虚拟机设置-》选项-》共享文件夹，浏览要共享的文件夹，继续按照说明设置即可。</li><li>在linux中链接一下即可<br>第1步完成后，共享文件夹已经挂载到了 &#x2F;mnt&#x2F;hgfs&#x2F;share&#x2F; ,share是我的共享文件夹的名字，然后在创建一个软连接方便以后访问：sudo ln -s &#x2F;mnt&#x2F;hgfs&#x2F;share&#x2F; &#x2F;home&#x2F;share</li></ol><h3 id="Ubuntu重启后不显示共享文件夹"><a href="#Ubuntu重启后不显示共享文件夹" class="headerlink" title="Ubuntu重启后不显示共享文件夹"></a>Ubuntu重启后不显示共享文件夹</h3><p>重启Ubuntu20.04后，发现共享文件夹进不去也不显示了<br>首先查看共享文件夹是否已经存在并且设置为总是开启<br>使用命令查看当前挂载的共享文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-hgfsclient</span><br></pre></td></tr></table></figure><p>存在的情况下，然后使用下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</span><br></pre></td></tr></table></figure><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/17/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html">在 Linux 客户机中装载共享文件夹 (vmware.com)</a></p><p>但是由于上面的方法需要每次重启后都去设置一遍，可以把执行的命令放到&#x2F;etc&#x2F;rc.local 文件下；让它开机自动执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>若&#x2F;etc&#x2F;rc.local 是一个空文件则在里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">sudo vmhgfs-fuse .host:/ /mnt/hgfs -o nonempty -o allow_other</span><br></pre></td></tr></table></figure><p>给文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><p>最后重启虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="无法应用原保存的显示器配置（屏幕显示问题）"><a href="#无法应用原保存的显示器配置（屏幕显示问题）" class="headerlink" title="无法应用原保存的显示器配置（屏幕显示问题）"></a>无法应用原保存的显示器配置（屏幕显示问题）</h2><p><a href="https://blog.csdn.net/a22635798/article/details/103643708">(12条消息) 虚拟机Ubuntu开机后提示：无法应用原保存的显示器配置（屏幕显示问题）_DTU-CFDer的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> Vmware </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站</title>
      <link href="/posts/%E6%94%B6%E8%97%8F/%E7%BD%91%E7%AB%99.html"/>
      <url>/posts/%E6%94%B6%E8%97%8F/%E7%BD%91%E7%AB%99.html</url>
      
        <content type="html"><![CDATA[<h1 id="书籍-x2F-资源"><a href="#书籍-x2F-资源" class="headerlink" title="书籍&#x2F;资源"></a>书籍&#x2F;资源</h1><ul><li><a href="https://zh.annas-archive.org/account/">Account - 安娜的档案 (annas-archive.org)</a></li><li><a href="https://chrome.google.com/webstore/category/extensions">Chrome 应用商店 - 扩展程序 (google.com)</a></li><li><a href="https://www.wolai.com/ooplab/4XggvWSZqfvY5uzgB9TuvD">资源分享 (wolai.com)</a></li><li><a href="https://zlibrary-china.se/">Z-Library – the world’s largest e-book library. Your gateway to knowledge and culture. (zlibrary-china.se)</a></li></ul><h1 id="服务器和网盘"><a href="#服务器和网盘" class="headerlink" title="服务器和网盘"></a>服务器和网盘</h1><ul><li><a href="https://cloud.tencent.com/login?s_url=https://console.cloud.tencent.com/lighthouse/instance/index?rid=1">登录 - 腾讯云 (tencent.com)</a></li><li><a href="https://infini-cloud.net/en/">InfiniCLOUD (infini-cloud.net)</a></li><li><a href="https://aws.amazon.com/cn/campaigns/server-hk/?trk=75645f8c-b0ff-4478-9a68-26a0f81c6da8&sc_channel=ba">免费香港服务器_云服务器vps_亚马逊云科技 (amazon.com)</a></li></ul><h1 id="国外lab相关"><a href="#国外lab相关" class="headerlink" title="国外lab相关"></a>国外lab相关</h1><ul><li><a href="https://mit-public-courses-cn-translatio.gitbook.io/mit6-824/">简介 - MIT6.824 (gitbook.io)</a></li><li><a href="https://gaozhiyuan.net/database/cmu-database-systems-introduction-and-relational-model.html">CMU15-445数据库系统：课程简介与关系模型 - 高志远的个人主页 (gaozhiyuan.net)</a></li><li><a href="https://blog.josejg.com/debugging-pretty/">Debugging by Pretty Printing (josejg.com)</a></li><li><a href="https://blog.eleven.wiki/posts/cmu15-445-project1-buffer-pool-manager/">https://blog.eleven.wiki/posts/cmu15-445-project1-buffer-pool-manager/</a></li></ul><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><ul><li><a href="https://xmake.io/#/zh-cn/">xmake</a></li><li><a href="https://coffeetea.top/zh/">Obsidian文档咖啡豆版 | obsidian文档咖啡豆版 (coffeetea.top)</a></li><li><a href="https://opensource.guide/zh-hans/">开源软件指南 | Open Source Guides</a></li><li><a href="https://wiki.tttt.ee/wiki/idm.html">📗如何使用IDM | TT快下 (tttt.ee)</a></li></ul><h1 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h1><ul><li><a href="https://labuladong.gitee.io/algo/">labuladong 的算法小抄 :: labuladong的算法小抄 (gitee.io)</a></li><li><a href="https://missing-semester-cn.github.io/">计算机教育缺失的一课</a></li><li><a href="https://interviewguide.cn/notes/01-guide/web-guide-reading.html">目录 | 阿秀的学习笔记 (interviewguide.cn)</a></li><li><a href="https://www.nowcoder.com/study/live/504">课程列表_牛客网 (nowcoder.com)</a></li></ul><h1 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h1><ul><li><a href="https://一元机场.com/#/dashboard">一元机场 (xn–4gq62f52gdss.com)</a></li><li><a href="https://glados.rocks/console">GLaDOS</a></li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="https://author.cnki.net/#/index">格式精灵 (cnki.net)</a></li><li><a href="https://zenvideo.qq.com/">腾讯智影-在线智能视频创作平台 (qq.com)</a></li></ul><h1 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h1><ul><li><a href="https://juejin.cn/post/7194435171633299513">C++工程实践必备技能 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7184793007302901820#heading-10">CLion开发环境配置完全解析（Qt开发？STM32？速通cmake？ - 掘金 (juejin.cn)</a></li><li><a href="https://www.cnblogs.com/m-contour/p/17214921.html">vscode-vim键盘操作配置 - HangX-Ma - 博客园 (cnblogs.com)</a></li><li><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim/splitting-windows/">Splits, Tabs and Switching Between Them | Barbarian Meets Coding</a></li></ul><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><ul><li><a href="https://blog.csdn.net/Youth_lql/article/details/115146647">hexo搭建博客-butterfly主题详细版_hexo butterfly_youthlql的博客-CSDN博客</a></li></ul><h1 id="ai"><a href="#ai" class="headerlink" title="ai"></a>ai</h1><ul><li><a href="https://poe.com/Sage">https://poe.com/Sage</a></li><li><a href="https://ora.ai/openai/gpt4">GPT4 | ora.ai</a></li><li><a href="https://chatgpt-plus.github.io/chatgpt-plus/">国内开通Chat GPT Plus保姆级教程【典藏】 | ChatGPT Plus官方推荐新手教程 (chatgpt-plus.github.io)</a></li></ul><h2 id="openai"><a href="#openai" class="headerlink" title="openai"></a>openai</h2><ul><li><a href="https://platform.openai.com/account/usage">Usage - OpenAI API</a></li></ul><h1 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h1><ul><li><a href="https://acking-you.github.io/">L_B__ (acking-you.github.io)</a></li><li><a href="https://www.nickxu.top/2022/12/14/%E3%80%8ECI-CD%E3%80%8F%E7%BB%93%E5%90%88GitHub-Actions-Docker%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/#%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8B%89%E5%8F%96%E6%B5%8B%E8%AF%95">『CI&#x2F;CD』结合GitHub Actions+Docker实现自动化部署 | NX の 博客 (nickxu.top)</a></li></ul><h1 id="病毒免杀"><a href="#病毒免杀" class="headerlink" title="病毒免杀"></a>病毒免杀</h1><ul><li><a href="https://link.springer.com/article/10.1007/s10207-021-00541-y">[m]allotROPism: a metamorphic engine for malicious software variation development | SpringerLink</a></li><li><a href="https://link.springer.com/article/10.1007/s11416-013-0194-3">Metamorphic code generation from LLVM bytecode | SpringerLink</a></li></ul><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p><strong>github.dev</strong> 或按下句号键帮你在线看源码。</p><p><a href="http://www.gitpod.io/">www.gitpod.io</a> 帮你在云上搭建好开发环境并直接运行项目。</p>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmake从入门到精通</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/xmake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/xmake%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/96031862">xmake从入门到精通9：交叉编译详解 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/97094249">xmake从入门到精通10：多个子工程目标的依赖配置 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/129064618">xmake从入门到精通11：如何组织构建大型工程 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/161553522">xmake从入门到精通12：通过自定义脚本实现更灵活地配置 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接单私活</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E6%8E%A5%E5%8D%95%E7%A7%81%E6%B4%BB.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E6%8E%A5%E5%8D%95%E7%A7%81%E6%B4%BB.html</url>
      
        <content type="html"><![CDATA[<p>tutorzzz，注册流程比较简单，直接注册就好了，不过也是邀请制，也是需要内部人邀请你才能注册。</p><p>你可以用我的邀请码：<strong>9HC0KJ</strong>，有我的邀请码审核会快点，注册步骤： </p><p>（1）点击链接注册填写信息：<a href="https://tutorzzz.cn/h5/#/pages/invitationPub/invitationPub/?inviteCode=9HC0KJ">https://tutorzzz.cn/h5/#/pages/invitationPub/invitationPub/?inviteCode=9HC0KJ</a></p><p>（2）注册好后，会出现运营的二维码，加企业微信审核</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习网站</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99.html</url>
      
        <content type="html"><![CDATA[<h2 id="Awesome"><a href="#Awesome" class="headerlink" title="Awesome"></a>Awesome</h2><p><a href="https://github.com/sindresorhus/awesome">https://github.com/sindresorhus/awesome</a></p><p>首先我要推荐的当然是awesome系列。如果我对某项技术想要深入的研究，现在习惯性的会在google搜索awesome系列。比如awesome-promethues，它永远不会让我失望。<br>awesome仓库是所有awesome的集合，涵盖了包括学习、工作、研究领域的各类awesome项目介绍、工程实践、原理探讨、框架扩展等。</p><p>如果你的领导交给你一项新的技术的研究，来这里看看准没错。</p><h2 id="Build-Your-Own-X"><a href="#Build-Your-Own-X" class="headerlink" title="Build Your Own X"></a>Build Your Own X</h2><p><a href="https://github.com/codecrafters-io/build-your-own-x">https://github.com/codecrafters-io/build-your-own-x</a></p><p>搞技术的都有一股探索精神，想要弄清楚框架或者技术背后的原理。</p><p>这个仓库集合了一些非常hack的技术，让你体验一把盘古开天辟地的感觉。比如从零构建一个数据库、操作系统、JVM等。仓库的页面非常简陋，但它收集的内容却惊为天人。</p><p>如果你对一些基础的计算机原理比较感兴趣，这是不可多得的开胃餐。</p><h2 id="System-Design-Primer"><a href="#System-Design-Primer" class="headerlink" title="System Design Primer"></a>System Design Primer</h2><p><a href="https://github.com/donnemartin/system-design-primer">https://github.com/donnemartin/system-design-primer</a></p><p>是不是最近面试的时候发现，系统设计题目多了起来？</p><p>设计可扩展的高并发系统，原是架构师的专利。不过随着要求不断提升，普通开发人员也有了要求。</p><p>这个仓库可以帮助你学习如何构建可扩展的系统。如果你把里面的案例消化了，应对大厂面试的系统设计题目应该不是问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Github主页美化</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Github/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Github/Github%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、创建你的主页"><a href="#1、创建你的主页" class="headerlink" title="1、创建你的主页"></a>1、创建你的主页</h1><p>首先，你可以进入你的 GitHub，创建一个和你_用户名相同_的仓库，然后在里面创建 README文件。</p><p>由于你这个仓库名和你的用户名是相同的，所以这个仓库就变得比较特殊了。</p><p>因为你在这里面的 README 写东西，都会显示到你的 GitHub 主页上。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MstenAhbaEQE9oOEolLZHiatIh86rE3KH8TNDMnvGz9goxuWHGeVO8Y6FNQ/640?wx_fmt=jpeg" alt="图片"></p><h1 id="2、美化的工具"><a href="#2、美化的工具" class="headerlink" title="2、美化的工具"></a>2、美化的工具</h1><p>如果你会点 <code>MarkDown</code> 或 <code>HTML 语言</code>，那么你基本就可以在自己的 <code>README</code> 中 diy 自己的主页了。</p><p>但是没有一些好看好玩的素材，是不是会显得有点单调？</p><p>来，给你推荐一些不错的素材。</p><h2 id="2-1-emoji"><a href="#2-1-emoji" class="headerlink" title="2.1 emoji"></a>2.1 emoji</h2><p>在这里有许多 emoji 的符号代码，你可以直接将它们用到 README 中。</p><blockquote><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteQkQFHT3lAq60DQKMYKXPr9ibFfTicseJcib3cOQEicQMSucicZgAjc74z5g/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-2GitHub-统计卡片"><a href="#2-2GitHub-统计卡片" class="headerlink" title="2.2GitHub 统计卡片"></a>2.2GitHub 统计卡片</h2><p>在这里有不同主题的 GitHub 统计卡片，可以统计到你的 star，commit 等数据。</p><blockquote><p><a href="https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md">https://github.com/anuraghazra/github-readme-stats/blob/master/docs/readme_cn.md</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteSLyA6XdETSxs2ddZfibxTNP36UBPvPkWDCumKAiaF2oSQQyQ39plvV9A/640?wx_fmt=jpeg" alt="图片"></p><p>以及你使用到的编程语言统计：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteeqsYKe4BKlxQBibSRPupzWsCmgianUtInkO31GBb1yffJ1zJiazZnePGw/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-3各种按钮"><a href="#2-3各种按钮" class="headerlink" title="2.3各种按钮"></a>2.3各种按钮</h2><p>在这里有许多按钮样式可以使用。</p><blockquote><p><a href="https://shields.io/">https://shields.io/</a></p></blockquote><p>比如 Stars，Fork：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteEPIzsnn7nTSXFSSOZOu74U8uyhLh24xN3YmAibIaQiascX4Y3Fr6qnsQ/640?wx_fmt=jpeg" alt="图片"></p><p>比如 License 等：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteQXgNfIzBmqFfKLm8XkwOR9pE2AcyicKd5EAbKWawkrUNnSeUe6KQ2Tg/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-4-显示你最近的状态"><a href="#2-4-显示你最近的状态" class="headerlink" title="2.4 显示你最近的状态"></a>2.4 显示你最近的状态</h2><p>在这里可以显示你最近在 GitHub 上面做了些什么。</p><blockquote><p><a href="https://github.com/jamesgeorge007/github-activity-readme">https://github.com/jamesgeorge007/github-activity-readme</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MstebDzwh1qYsIEqFgT8PZ9F3qd2KVhOp8W8H91emOiadZOC3puDyktCH1A/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-5-一堆图标"><a href="#2-5-一堆图标" class="headerlink" title="2.5 一堆图标"></a>2.5 一堆图标</h2><p>在这里还有一大堆图标可以直接使用。</p><blockquote><p><a href="https://simpleicons.org/">https://simpleicons.org/</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7Mste2TV2cObCBibqfahDibygb6tnD4aHMtZm4NiaGPNSTZoicscBeQgr2UicRYw/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-6-展示奖杯"><a href="#2-6-展示奖杯" class="headerlink" title="2.6 展示奖杯"></a>2.6 展示奖杯</h2><p>在这里可以统计 GitHub 的数据，并以奖杯的形式展现。</p><blockquote><p><a href="https://github.com/ryo-ma/github-profile-trophy/blob/master/README.md">https://github.com/ryo-ma/github-profile-trophy/blob/master/README.md</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7Mstevwv5nBGOUbI26mT5be7kyiaPmdmmCicLPQKnPSAbUR1xKAnkd0HGJdAg/640?wx_fmt=jpeg" alt="图片"></p><h2 id="2-7-更多素材资源"><a href="#2-7-更多素材资源" class="headerlink" title="2.7 更多素材资源"></a>2.7 更多素材资源</h2><p>上面这些基本够你用了，如果你还想找更多的素材，可以到这里的 Tool 找到：</p><blockquote><p><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme#tools">https://github.com/abhisheknaiidu/awesome-github-profile-readme#tools</a></p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteibVtNs5O5zX7DjtvpLGEpzn4v7rPszRbKAHsZHOCreF0ZSN3KsPp3gA/640?wx_fmt=jpeg" alt="图片"></p><h1 id="开始去造吧"><a href="#开始去造吧" class="headerlink" title="开始去造吧"></a>开始去造吧</h1><p>有了以上的资源，就可以根据自己的喜欢，打造自己的 GitHub 主页啦。</p><p>你可以直接在 GitHub 上一边编辑一边预览。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteS16zbj7eibn9PGcACS1gx9QHOZB55rPVljLPzquPxVt6gUOItdQ3RDA/640?wx_fmt=jpeg" alt="图片"></p><p>当然了，你还可以在当前仓库上传自己的图片，然后在 README 里面引用它们。</p><p>比如我就上传了自己的头像，然后让它显示并居中：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteYibtYGNq4wuKB0R63sy0QcrmpJVXpicrroT020iaIzKFDKU5VAKCNRJGA/640?wx_fmt=jpeg" alt="图片"> <img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MstexTatLvSCZCxticiaib0kLOeiaAPJoB0Itgctv8cGuBmfH0iaDibFc97gwsNA/640?wx_fmt=jpeg" alt="图片"></p><p>还可以将 GitHub 统计给怼进去，方法也很简单，只要将 username 改为你自己的 GitHub 用户名就可以了：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteNwRhWJ9v5xJOVWez4xlEibIf5RVFnnZck3bniba8SBPIBDSbZbB2zVTw/640?wx_fmt=jpeg" alt="图片"> <img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MstectzHTIcd03TzWrVPgjqmQQ3glAlIgQyKBUpRhia9ATCd3lxQXHbl2Tw/640?wx_fmt=jpeg" alt="图片"></p><p>对了，如果你懒得收集各种图标展示到你的主页上，你还可以直接在这里直接一键生成！！</p><blockquote><p><a href="https://rahuldkjain.github.io/gh-profile-readme-generator/">https://rahuldkjain.github.io/gh-profile-readme-generator/</a></p></blockquote><p>随便勾选几下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteZrmylJvozEtmgob7wZkkQ9JI3hwrgpTtMg0sENSg4FelLhVQfUt0Qw/640?wx_fmt=jpeg" alt="图片"></p><p>然后点击生成就会直接生成相应的代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7MsteStMJ6g1tVsEOkkicx4xibIWOUdUtbvaxdLsxceCl4krP6XEbPAVyg4PA/640?wx_fmt=jpeg" alt="图片"></p><p>用就是了：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/Huhkr9k8o4A1ptVx0FRyJRLMJXx7Mste2MyicukgZwu66L9e2VYlr9ZWjl2RSk4aUVIhAm6WFEopdaFjAkY2pWQ/640?wx_fmt=jpeg" alt="图片"></p><p>对于其他素材的使用方式，你可以直接参照相应文档食用，还是很方便的。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>chrome访问newbing</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ai/chrome%E8%AE%BF%E9%97%AEnewbing.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/ai/chrome%E8%AE%BF%E9%97%AEnewbing.html</url>
      
        <content type="html"><![CDATA[<p>前 New Bing 访问的比较麻烦，这里介绍一种稳定访问的方法。</p><p>首先假设你已经具备了科学上网的能力</p><p>我们可以实现脱离 edge 去访问，可以是 Chrome 浏览器，也可以是其他基于 Chromium 框架的浏览器。</p><p>这里强烈推荐使用 Sidekick 浏览器，能够稳定的保持登录环境和多账号。也是能够稳定访问的关键。下载地址 <a href="https://join.meetsidekick.com/7o7xy">https://join.meetsidekick.com/7o7xyopen in new window</a></p><h3 id="只需要简单的三步操作："><a href="#只需要简单的三步操作：" class="headerlink" title="# 只需要简单的三步操作："></a><a href="#%E5%8F%AA%E9%9C%80%E8%A6%81%E7%AE%80%E5%8D%95%E7%9A%84%E4%B8%89%E6%AD%A5%E6%93%8D%E4%BD%9C">#</a> 只需要简单的三步操作：</h3><ul><li><p>第一步，安装 <a href="https://join.meetsidekick.com/7o7xy">Sidekickopen in new window</a> 浏览器。<a href="https://join.meetsidekick.com/7o7xy">点击下载open in new window</a></p></li><li><p>第二步，安装浏览器插件 <strong>Bing Unchained</strong>，<a href="https://chrome.google.com/webstore/detail/bing-unchained-use-new-bi/laldfnbbeocphnilnofhedhcjcnchbld">点击下载open in new window</a></p></li><li><p>第三步，按快捷键 <code>Ctrl + B</code> 打开 New Bing 网站，登录账号，修改配置</p><ul><li>回到 New Bing 主页，点击右上角的三道杠图标，进入设置</li><li>设置地区为“你 ip 所在的地区”。</li><li>有些朋友这里改过了之后，每次在打开网页就会变。但我的不会变，之所以这里推荐安装 <a href="https://join.meetsidekick.com/7o7xy">Sidekickopen in new window</a> 浏览器的关键点就在这里，会保持你的这个账号环境。</li></ul></li><li><p>推荐安装 <a href="https://join.meetsidekick.com/7o7xy">Sidekickopen in new window</a> 浏览器的关键点就在这里，会保持你的这个账号环境。</p></li><li><p>如果不使用这个浏览器的话，每次重开地区就会恢复</p></li><li><p>你的上网环境 ip 地区不要老是跳动</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> ai </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows清理桌面右键菜单中新增选项中的多余选项</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/%E5%9D%9A%E6%9E%9C%E4%BA%91%E6%B8%85%E9%99%A4.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/%E5%9D%9A%E6%9E%9C%E4%BA%91%E6%B8%85%E9%99%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件资源管理器图标删除"><a href="#文件资源管理器图标删除" class="headerlink" title="文件资源管理器图标删除"></a>文件资源管理器图标删除</h1><p>使用电脑应用管理删除坚果云</p><h1 id="windows清理桌面右键菜单中新增选项中的多余选项"><a href="#windows清理桌面右键菜单中新增选项中的多余选项" class="headerlink" title="windows清理桌面右键菜单中新增选项中的多余选项"></a>windows清理桌面右键菜单中新增选项中的多余选项</h1><p>在卸载坚果云时一开始没注意，最近在使用的时候发现右键新增的里面出现了<code>.nol</code>等坚果云的文件，于是找了一下能删除多余选项的方法。<br>感觉自己以后还能用到所以记下来方便自己查阅。</p><ol><li><p>找到需要删去选项对应的扩展名</p></li><li><p>打开注册表编辑器</p></li><li><p><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew\Classes</code></p></li></ol><p><img src="/../../../img/blog/%E5%9D%9A%E6%9E%9C%E4%BA%91%E6%B8%85%E9%99%A4-1.png"><br>4.  删去其中你不要的扩展名</p><p><a href="https://img2022.cnblogs.com/blog/2885713/202209/2885713-20220923210322894-1198841920.png"><img src="https://img2022.cnblogs.com/blog/2885713/202209/2885713-20220923210322894-1198841920.png"></a></p><ol start="5"><li>按照以上步骤操作完成后，发现已经消失的残留项再次出现，说明软件卸载后，注册表未清理干净。请按照以下路径寻找【<code>HKEY_CLASSES_ROOT\.gf\ShellNew</code>】，右键单击【NullFile】，左键单击【删除（D）】。</li></ol><p><a href="https://img2022.cnblogs.com/blog/2885713/202209/2885713-20220923210352104-629990835.png"><img src="https://img2022.cnblogs.com/blog/2885713/202209/2885713-20220923210352104-629990835.png"></a></p><blockquote><p>我自己并没有出现<code>NullFile</code>选项，我选择将整个ShellNew都给删去了</p></blockquote><p>此时回到桌面查看右键新建菜单应该已经清理完毕</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 06. 测试发布</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2006.%20%E6%B5%8B%E8%AF%95%E5%8F%91%E5%B8%83.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2006.%20%E6%B5%8B%E8%AF%95%E5%8F%91%E5%B8%83.html</url>
      
        <content type="html"><![CDATA[<h3 id="工程信息"><a href="#工程信息" class="headerlink" title="工程信息"></a>工程信息</h3><p>对于较为正式的工程，xmake推荐设置几个工程信息：</p><ul><li>工程名称。使用<code>set_project</code>语句设定，在一份<code>xmake.lua</code>中只能存在一份。</li><li>工程版本。使用<code>set_version</code>语句设定。</li><li>最低允许的xmake版本。使用<code>set_xmakever</code>指定。无法使用低于此版本的xmake编译项目。</li></ul><p>举例如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set_project(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">set_version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">set_xmakever(<span class="string">&quot;2.6.1&quot;</span>)</span><br></pre></td></tr></table></figure><p>在此处设置的版本号会产生几个自动定义的配置变量：<code>$&#123;VERSION&#125;</code>、<code>$&#123;VERSION_MAJOR&#125;</code>等。如果工程使用Git进行版本管理，xmake还会定义<code>$&#123;GIT_COMMIT&#125;</code>等变量。</p><blockquote><p>Tips. Windows上对于产生的二进制&#x2F;动态库，可以为其添加版本信息。这需要编写resource文件并将其加入工程中。xmake中可以直接使用<code>add_files</code>接口添加这些文件。</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>以google test框架为例进行说明。建立以下C++库结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- include</span><br><span class="line">    |- mylib.h</span><br><span class="line">|- src</span><br><span class="line">    |- mylib.cpp</span><br><span class="line">    |- mylib.def</span><br><span class="line">|- test</span><br><span class="line">    |- add.cpp</span><br><span class="line">    |- distract.cpp</span><br><span class="line">|- xmake.lua</span><br></pre></td></tr></table></figure><p>其中mylib.cpp中定义了<code>int mylib_add(int, int)</code>和<code>int mylib_distract(int, int)</code>两个函数。mylib.def文件为Windows definition module文件，这个文件可以在不声明<code>__declspec(dllexport)</code>的情况下生成动态链接库，xmake中可直接使用<code>add_files</code>接口将其加入项目。mylib.def内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY mylib</span><br><span class="line">EXPORTS</span><br><span class="line">    mylib_add</span><br><span class="line">    mylib_distract</span><br></pre></td></tr></table></figure><blockquote><p>Tips. xmake中也可使用<code>add_rules(&quot;utils.symbols.export_all&quot;)</code>来生成def文件，并导出所有符号。</p></blockquote><p>test文件夹下含有两个测试文件。add.cpp内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtest/gtest.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylib.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    ::testing::<span class="built_in">InitGoogleTest</span>(&amp;argc, argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RUN_ALL_TESTS</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TEST</span>(mylib, sum_zero) &#123;</span><br><span class="line">    <span class="keyword">auto</span> result = <span class="built_in">mylib_add</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(result, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">TEST</span>(mylib, sum_five) &#123;</span><br><span class="line">    <span class="keyword">auto</span> result = <span class="built_in">mylib_add</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">ASSERT_EQ</span>(result, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>distract.cpp类似，包含两个distract函数的测试。xmake.lua内容如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">set_project(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">set_version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">set_xmakever(<span class="string">&quot;2.6.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">add_requires(<span class="string">&quot;gtest&quot;</span>)</span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;$(kind)&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/mylib.cpp&quot;</span>)</span><br><span class="line">    add_includedirs(<span class="string">&quot;include&quot;</span>, &#123;public = <span class="literal">true</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> is_plat(<span class="string">&quot;windows&quot;</span>) <span class="keyword">and</span> is_kind(<span class="string">&quot;shared&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_files(<span class="string">&quot;src/mylib.def&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;test_add&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    set_group(<span class="string">&quot;tests&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;test/add.cpp&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    add_packages(<span class="string">&quot;gtest&quot;</span>)</span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;test_distract&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    set_group(<span class="string">&quot;tests&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;test/distract.cpp&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    add_packages(<span class="string">&quot;gtest&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行<code>xmake</code>编译上述程序。再运行<code>xmake run test_add</code>即可看到add.cpp测试的结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ xmake run test_add</span><br><span class="line">[==========] Running 2 tests from 1 test suite.</span><br><span class="line">[----------] Global test environment set-up.</span><br><span class="line">[----------] 2 tests from mylib</span><br><span class="line">[ RUN      ] mylib.sum_zero</span><br><span class="line">[       OK ] mylib.sum_zero (0 ms)</span><br><span class="line">[ RUN      ] mylib.sum_five</span><br><span class="line">[       OK ] mylib.sum_five (0 ms)</span><br><span class="line">[----------] 2 tests from mylib (1 ms total)</span><br><span class="line"></span><br><span class="line">[----------] Global test environment tear-down</span><br><span class="line">[==========] 2 tests from 1 test suite ran. (3 ms total)</span><br><span class="line">[  PASSED  ] 2 tests.</span><br></pre></td></tr></table></figure><p>注意xmake.lua中出现了一个新语句<code>set_group</code>。这一语句将target加入一个名为tests的group中，在运行时可以一键全部运行：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake run -g tests</span><br></pre></td></tr></table></figure><p>用这种方法可以执行项目中的全部测试。当某项测试失败时，该命令会直接退出。</p><p>测试当然也并不局限于框架。在测试target中可以通过<code>on_run</code>接口执行任意命令：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target(<span class="string">&quot;test_script&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;phony&quot;</span>)</span><br><span class="line">    set_group(<span class="string">&quot;tests&quot;</span>)</span><br><span class="line">    on_run(<span class="function"><span class="keyword">function</span> <span class="params">(target)</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;log message&quot;</span>)</span><br><span class="line">        <span class="built_in">os</span>.exec(<span class="string">&quot;whatever you want&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Tips. 类型为<code>phony</code>的target不会产生任何库或者可执行文件。它们可以用于理顺依赖结构、处理自定义命令等。</p></blockquote><h2 id="安装与发布"><a href="#安装与发布" class="headerlink" title="安装与发布"></a>安装与发布</h2><p>如果测试过程没有找到问题，那么就可以准备安装&#x2F;发布了。按照一般约定，C&#x2F;C++程序的安装目录结构如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- bin</span><br><span class="line">|- include</span><br><span class="line">|- lib</span><br><span class="line">|- share</span><br><span class="line">|- ...</span><br></pre></td></tr></table></figure><p>这里<code>bin</code>存放生成的二进制文件和Windows上动态链接库文件，<code>include</code>存放头文件，<code>lib</code>存放链接库以及Windows上动态链接库的导入库（import library），<code>share</code>则存放文档、数据等其他文件。当然这一目录也并不绝对，根据需求的不同，有时不按照约定反而更加方便。</p><p>xmake中使用如下命令来安装一个项目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake install -o &lt;dist&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;dist&gt;</code>既可以是系统上存放第三方库的目录，也可以是自定义的其他目录（用于后续打包发布）。不同于cmake等构建系统，xmake中安装路径是在编译完毕安装时进行指定的（而不是编译前），因此同一个项目在编译完成后可以被安装到多个位置。</p><h3 id="指定头文件"><a href="#指定头文件" class="headerlink" title="指定头文件"></a>指定头文件</h3><p>执行安装命令时，如果在xmake.lua中没有特殊指定，target生成的二进制和库文件都会自动按上述约定路径安装。而要安装的头文件比较复杂，需要使用<code>add_headerfiles</code>语句指定。这一语句的基本用法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_headerfiles(<span class="string">&quot;include/(**.h)&quot;</span>, &#123;prefixdir = <span class="string">&quot;mylib&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>通配符<code>include/**.h</code>匹配include目录及其子目录的所有.h后缀文件。对于<code>add_headerfiles</code>语句，如果不加括号，则所有文件都会被直接安装到<code>include</code>文件夹下，目录结构将会丢失；而括号的作用在于保持括号内的目录结构。例如<code>a/(b/c.h)</code>安装后会变成<code>include/b/c.h</code>。而在设置中的<code>prefixdir</code>选项则将所有头文件放在<code>include</code>的子目录中。如对于上述设置<code>&#123;prefixdir = &quot;mylib&quot;&#125;</code>，<code>a/(b/c.h)</code>安装后会变成<code>include/mylib/b/c.h</code>。</p><blockquote><p>Tips. 对部分IDE项目生成器，<code>add_headerfiles</code>不仅指定安装时安装的头文件，还设定了IDE项目中可见的头文件。如果仅将此语句用于项目生成，不希望对应头文件被安装，可以使用<code>add_headerfiles(&lt;file&gt;, &#123;install = false&#125;)</code>选项。</p></blockquote><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><p>有时候使用xmake构建的库需要导出给使用其他构建系统的项目使用，这就需要对应构建工具的配置文件。xmake提供pkg-config配置文件和cmake配置文件的生成。对于需要导出的target，使用如下语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;utils.install.pkgconfig_importfiles&quot;</span>)</span><br><span class="line">add_rules(<span class="string">&quot;utils.install.cmake_importfiles&quot;</span>)</span><br></pre></td></tr></table></figure><p>这两个语句会在<code>lib</code>文件夹下生成对应的配置文件。关于如何使用这些配置文件，请参考对应构建工具的文档。</p><h3 id="安装其它文件"><a href="#安装其它文件" class="headerlink" title="安装其它文件"></a>安装其它文件</h3><p>对于头文件之外的安装文件，xmake提供了类似的接口<code>add_installfiles</code>，它与<code>add_headerfiles</code>的区别在于，<code>prefixdir</code>将直接放在安装目录下而不是<code>include</code>文件夹下。例如文档安装可以写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_installfiles(<span class="string">&quot;doc/*.md&quot;</span>, &#123;prefixdir = <span class="string">&quot;share/doc&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>数据等文件同理。</p><h3 id="自定义安装过程"><a href="#自定义安装过程" class="headerlink" title="自定义安装过程"></a>自定义安装过程</h3><p>有时候，项目生成的库和二进制不要按约定的<code>bin</code>和<code>lib</code>目录存放，甚至不需要被安装。还有时候，安装的文件需要根据安装目录做一定的更改。这时可以使用<code>on_install</code>语句来重载target的安装过程。例如，将生成的库文件安装到<code>mylib</code>文件夹：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">target(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    on_install(<span class="function"><span class="keyword">function</span> <span class="params">(target)</span></span></span><br><span class="line">        <span class="keyword">local</span> libdir = <span class="built_in">path</span>.join(target:installdir(), <span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">        <span class="built_in">os</span>.mkdir(libdir)</span><br><span class="line">        <span class="built_in">os</span>.cp(target:targetfile(), libdir)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> includedir = <span class="built_in">path</span>.join(target:installdir(), <span class="string">&quot;myinclude&quot;</span>)</span><br><span class="line">        <span class="built_in">os</span>.mkdir(includedir)</span><br><span class="line">        <span class="keyword">for</span> _, headerfile <span class="keyword">in</span> <span class="built_in">ipairs</span>(target:headerfiles()) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">os</span>.cp(headerfile, includedir)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>在重载target中部分过程时，可以参考xmake内部的实现。可以使用git clone xmake项目到本地，使用IDE中的搜索功能搜索需要的实现部分（例如搜索install_headers），也可以访问<a href="https://link.zhihu.com/?target=https://github1s.com/xmake-io/xmake">在线编辑器</a>来查看。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 05. 构建选项</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2005.%20%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2005.%20%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用C-x2F-C-项目描述设置详解"><a href="#常用C-x2F-C-项目描述设置详解" class="headerlink" title="常用C&#x2F;C++项目描述设置详解"></a>常用C&#x2F;C++项目描述设置详解</h1><h3 id="先来一段最简短的"><a href="#先来一段最简短的" class="headerlink" title="先来一段最简短的"></a>先来一段最简短的</h3><p>一行描述即可编译src目录下所有c源文件，然后生成一个名为demo的可执行文件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;demo&quot;, &#123;kind = &quot;binary&quot;, files = &quot;src/*.c&quot;&#125;)</span><br></pre></td></tr></table></figure><p>上面的写法是精简写法，通常我们更推荐使用下面展开式写法：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;demo&quot;) </span><br><span class="line">    set_kind(&quot;binary&quot;) </span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br></pre></td></tr></table></figure><p>这两者完全等价，如果配置很简短，可以完全精简成一行，而拆分成多行更加方便灵活配置。</p><p>如果没有特殊目的，下文我们都会采用第二段的写法。</p><h3 id="配置项目目标类型"><a href="#配置项目目标类型" class="headerlink" title="配置项目目标类型"></a>配置项目目标类型</h3><p>通常的C&#x2F;C++项目生成的目标文件猪油三大类：可执行程序，静态库，动态库。</p><p>我们可以通过<code>set_kind()</code>配置来设置，分别对应：binary, static, shared</p><p>例如，我们想要编译动态库，只需要修改kind：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;demo&quot;) </span><br><span class="line">    set_kind(&quot;shared&quot;) </span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br></pre></td></tr></table></figure><h3 id="添加宏定义"><a href="#添加宏定义" class="headerlink" title="添加宏定义"></a>添加宏定义</h3><p>编译宏的设置，大多数c&#x2F;c++项目都会用到，一般如果我们设置编译flags传给gcc&#x2F;clang，都是要配置：<code>-DXXX</code></p><p>而在xmake里面，提供了<code>add_defines()</code>内置接口来配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;demo&quot;) </span><br><span class="line">    set_kind(&quot;shared&quot;) </span><br><span class="line">    add_files(&quot;src/*.c&quot;) </span><br><span class="line">    add_defines(&quot;XXX&quot;)</span><br></pre></td></tr></table></figure><h3 id="条件配置"><a href="#条件配置" class="headerlink" title="条件配置"></a>条件配置</h3><p>那如果我们想在不同编译平台，分别设置不同的宏开关呢？我们可以利用lua内置的if语句很方便的实现：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;demo&quot;) </span><br><span class="line">    set_kind(&quot;shared&quot;) </span><br><span class="line">    add_files(&quot;src/*.c&quot;) </span><br><span class="line">    add_defines(&quot;XXX&quot;) </span><br><span class="line">    if is_plat(&quot;linux&quot;, &quot;macosx&quot;) then </span><br><span class="line">       add_defines(&quot;YYY&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们通过<code>is_plat()</code>判断，如果当前编译目标平台是linux或者macosx，那么target会额外增加<code>-DYYY</code>宏定义。</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>我们在<code>target(&quot;demo&quot;)</code>下面的所有配置，都属于demo这个target子域，并不是全局的，所以你会看到通常配置上都加了缩进，就是为了凸显作用域的影响范围。</p><p>通常如果多个target连续定义，下一个target定义就会自动结束上个target的作用域，每个target的配置完全独立，互不干扰：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test1&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST1&quot;)</span><br><span class="line"></span><br><span class="line">target(&quot;test2&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST2&quot;)</span><br></pre></td></tr></table></figure><p>例如，上面的配置两个target，各自拥有自己独立的宏定义：<code>TEST1</code>和<code>TEST2</code>。</p><p>那么，我们要对这两个target，设置共用的宏定义，应该如何配置呢？</p><p>每个target下面都配置一遍<code>add_defines(&quot;TEST&quot;)</code>? 当然可以，不过这样就有点冗余了，配置多了就会很难维护，其实我们只需要放置到全局根作用域就行了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 全局设置</span><br><span class="line">add_defines(&quot;TEST&quot;)</span><br><span class="line">if is_arch(&quot;arm64&quot;, &quot;armv7&quot;) then</span><br><span class="line">    add_defines(&quot;ARM&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target(&quot;test1&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST1&quot;)</span><br><span class="line"></span><br><span class="line">target(&quot;test2&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST2&quot;)</span><br></pre></td></tr></table></figure><p>在target的外层的所有配置都属于全局配置，我们也可以调用<code>target_end()</code>强制结束target子域，切回全局作用域：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test1&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST1&quot;)</span><br><span class="line">target_end()</span><br><span class="line"></span><br><span class="line">-- 全局设置</span><br><span class="line">add_defines(&quot;TEST&quot;)</span><br><span class="line">if is_arch(&quot;arm64&quot;, &quot;armv7&quot;) then</span><br><span class="line">    add_defines(&quot;ARM&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">target(&quot;test2&quot;)</span><br><span class="line">    set_kind(&quot;shared&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_defines(&quot;TEST2&quot;)</span><br><span class="line">target_end()</span><br></pre></td></tr></table></figure><h3 id="添加编译选项"><a href="#添加编译选项" class="headerlink" title="添加编译选项"></a>添加编译选项</h3><p>如果有些编译选项，xmake没有提供内置api设置，那么我们可以退化到<code>add_cflags</code>, <code>add_cxflags</code>, <code>add_cxxflags</code>来设置， 不过这就需要用户自己去判断编译平台了，因为并不是所有编译flags每个平台都支持。</p><p>比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_cflags(&quot;-g&quot;, &quot;-O2&quot;, &quot;-DDEBUG&quot;)</span><br><span class="line">if is_plat(&quot;windows&quot;) then</span><br><span class="line">    add_cflags(&quot;/MT&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>所有选项值都基于gcc的定义为标准，如果其他编译器不兼容（例如：vc），xmake会自动内部将其转换成对应编译器支持的选项值。 用户无需操心其兼容性，如果其他编译器没有对应的匹配值，那么xmake会自动忽略器设置。</p><p>我们也可以通过force参数来强制禁用flags的自动检测，直接传入编译器，哪怕编译器有可能不支持，也会设置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_cflags(&quot;-g&quot;, &quot;-O2&quot;, &#123;force = true&#125;)</span><br></pre></td></tr></table></figure><p>那如何知道，哪些flags检测失败给忽略了呢，带<code>-v</code>编译就可以看到，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ xmake -v</span><br><span class="line">checking for the /usr/bin/xcrun -sdk macosx clang ... ok</span><br><span class="line">checking for the flags (-Oz) ... ok</span><br><span class="line">checking for the flags (-Wno-error=deprecated-declarations) ... ok</span><br><span class="line">checking for the flags (-fno-strict-aliasing) ... ok</span><br><span class="line">checking for the flags (-Wno-error=expansion-to-defined) ... no</span><br></pre></td></tr></table></figure><p>最后备注下这三个api的区别：</p><ul><li><code>add_cflags</code>：仅添加C代码相关编译flags</li><li><code>add_cxflags</code>：添加C&#x2F;C++代码相关编译flags</li><li><code>add_cxxflags</code>：仅添加C++代码相关编译flags</li></ul><h3 id="添加库相关设置"><a href="#添加库相关设置" class="headerlink" title="添加库相关设置"></a>添加库相关设置</h3><p>一个C&#x2F;C++库的集成使用，通常需要设置头文件搜索目录，链接库名，库搜索目录，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_links(&quot;pthread&quot;)</span><br><span class="line">    add_includedirs(&quot;/usr/local/include&quot;)</span><br><span class="line">    add_linkdirs(&quot;/usr/local/lib&quot;)</span><br></pre></td></tr></table></figure><p>通常，为了保证链接库的依赖顺序，系统库链接通常都会比较靠后，我们通过<code>add_syslinks()</code>来专门设置系统库链接，而<code>add_links()</code>通常用于非系统库链接：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;) </span><br><span class="line">    set_kind(&quot;binary&quot;) </span><br><span class="line">    add_links(&quot;A&quot;, &quot;B&quot;) </span><br><span class="line">    add_syslinks(&quot;pthread&quot;)</span><br></pre></td></tr></table></figure><p>上面的配置，我们添加了两个第三方链接库：A, B，以及系统库pthread，整个完整的链接顺序是：<code>-lA -lB -lpthread</code>，syslinks会放在最后面。</p><p>如果你不确定实际的链接顺序，我们可以执行<code>xmake -v</code>编译，查看完整的链接参数命令行。</p><h3 id="设置语言标准"><a href="#设置语言标准" class="headerlink" title="设置语言标准"></a>设置语言标准</h3><p>c标准和c++标准可同时进行设置，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 设置c代码标准：c99， c++代码标准：c++11</span><br><span class="line">set_languages(&quot;c99&quot;, &quot;c++11&quot;)</span><br></pre></td></tr></table></figure><p>注：并不是设置了指定的标准，编译器就一定会按这个标准来编译，毕竟每个编译器支持的力度不一样，但是xmake会尽最大可能的去适配当前编译工具的支持标准。</p><p>例如：windows下vs的编译器并不支持按c99的标准来编译c代码，只能支持到c89，但是xmake为了尽可能的支持它，所以在设置c99的标准后， xmake会强制按c++代码模式去编译c代码，从一定程度上解决了windows下编译c99的c代码问题。</p><h3 id="设置编译优化"><a href="#设置编译优化" class="headerlink" title="设置编译优化"></a>设置编译优化</h3><p>xmake提供了几种内置的编译优化配置：none, fast, faster, fastest, smallest, aggressive，来实现各种级别的编译优化。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_optimize(&quot;fastest&quot;)</span><br></pre></td></tr></table></figure><p>如果用户通过flags来设置，还需额外考虑不同编译器的不同编译选项，xmake对其进行了内部映射处理，极大程度方便用户提供跨平台性。</p><p>如果想查看详细的映射规则，可以到xmake的官方文档进行查看：<a href="https://link.zhihu.com/?target=https://xmake.io/%23/zh-cn/manual/project_target?id=targetset_optimize">编译优化设置</a></p><h3 id="调试和发布模式"><a href="#调试和发布模式" class="headerlink" title="调试和发布模式"></a>调试和发布模式</h3><p>即使xmake提供了<code>set_optimize</code>简化了不同编译器的复杂配置，但是对于不同的编译模式: debug&#x2F;release，还是要自己做一些繁琐的判断和配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;debug&quot;) then</span><br><span class="line">    set_symbols(&quot;debug&quot;)</span><br><span class="line">    set_optimize(&quot;none&quot;)</span><br><span class="line">end</span><br><span class="line">if is_mode(&quot;release&quot;) then</span><br><span class="line">    set_symbols(&quot;hidden&quot;)</span><br><span class="line">    set_strip(&quot;all&quot;)</span><br><span class="line">    if is_plat(&quot;iphoneos&quot;, &quot;android&quot;) then</span><br><span class="line">        set_optimize(&quot;smallest&quot;)</span><br><span class="line">    else</span><br><span class="line">        set_optimize(&quot;fastest&quot;)</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这些看似常用的设置，如果每个项目都来一遍，那也很繁琐了，导致xmake.lua不够精简可读，因此xmake提供了一些常用内置规则来简化设置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.release&quot;, &quot;mode.debug&quot;)</span><br></pre></td></tr></table></figure><p>只需这一行即可，效果是完全一致，用户还可以基于此在做一些额外的定制化配置来改写：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.release&quot;, &quot;mode.debug&quot;) </span><br><span class="line">if is_mode(&quot;release&quot;) then </span><br><span class="line">    set_optimize(&quot;fastest&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>比如我想在release模式下，强制启用fastest编译优化，既然有了模式配置，那我们怎么切换到debug模式编译呢？（默认是release编译）</p><p>答案：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake f -m debug; xmake</span><br></pre></td></tr></table></figure><h3 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h3><p>最后，我们在介绍下xmake最常用，也最为强大的设置之一，也就是对编译源文件的配置管理：<code>add_files()</code>。</p><p>我们可以用这个接口，添加各类xmake支持的源文件，比如：c&#x2F;c++, asm, objc, swift, go, dlang等源文件，甚至是：<code>.obj</code>, <code>.a/.lib</code>等二进制对象和库文件。</p><p>例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_files(&quot;src/test_*.c&quot;) </span><br><span class="line">add_files(&quot;src/xxx/**.cpp&quot;) </span><br><span class="line">add_files(&quot;src/asm/*.S&quot;, &quot;src/objc/**/hello.m&quot;)</span><br></pre></td></tr></table></figure><p>其中通配符<code>*</code>表示匹配当前目录下文件，而<code>**</code>则匹配多级目录下的文件。</p><p><code>add_files</code>的使用其实是相当灵活方便的，其匹配模式借鉴了premake的风格，但是又对其进行了改善和增强。</p><p>使得不仅可以匹配文件，还有可以在添加文件同时，过滤排除指定模式的一批文件。</p><p>例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 递归添加src下的所有c文件，但是不包括src/impl/下的所有c文件</span><br><span class="line">add_files(&quot;src/**.c|impl/*.c&quot;)</span><br><span class="line"></span><br><span class="line">-- 添加src下的所有cpp文件，但是不包括src/test.cpp、src/hello.cpp以及src下所有带xx_前缀的cpp文件</span><br><span class="line">add_files(&quot;src/*.cpp|test.cpp|hello.cpp|xx_*.cpp&quot;)</span><br></pre></td></tr></table></figure><p>其中分隔符<code>|</code>之后的都是需要排除的文件，这些文件也同样支持匹配模式，并且可以同时添加多个过滤模式，只要中间用<code>|</code>分割就行了。。</p><p>添加文件的时候支持过滤一些文件的一个好处就是，可以为后续根据不同开关逻辑添加文件提供基础。</p><p>注：为了使得描述上更加的精简，<code>|</code>之后的过滤描述都是基于起一个模式：<code>src/*.cpp</code> 中<code>*</code>之前的目录为基础的。 所以上面的例子后面过滤的都是在src下的文件，这个是要注意的。</p><p>2.1.6版本之后，对<code>add_files</code>进行了改进，支持基于files更细粒度的编译选项控制，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    add_defines(&quot;TEST1&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_files(&quot;test/*.c&quot;, &quot;test2/test2.c&quot;, &#123;defines = &quot;TEST2&quot;, languages = &quot;c99&quot;, includedirs = &quot;.&quot;, cflags = &quot;-O0&quot;&#125;)</span><br></pre></td></tr></table></figure><p>可以在<code>add_files</code>的最后一个参数，传入一个配置table，去控制指定files的编译选项，里面的配置参数跟target的一致，并且这些文件还会继承target的通用配置<code>-DTEST1</code>。</p><p>2.1.9版本之后，支持添加未知的代码文件，通过设置rule自定义规则，实现这些文件的自定义构建，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;) </span><br><span class="line">    -- ... </span><br><span class="line">    add_files(&quot;src/test/*.md&quot;, &#123;rule = &quot;markdown&quot;&#125;)</span><br></pre></td></tr></table></figure><p>并且在2.1.9版本之后，可以通过force参数来强制禁用cxflags,cflags等编译选项的自动检测，直接传入编译器，哪怕编译器有可能不支持，也会设置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_files(&quot;src/*.c&quot;, &#123;force = &#123;cxflags = &quot;-DTEST&quot;, mflags = &quot;-framework xxx&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除指定源文件"><a href="#删除指定源文件" class="headerlink" title="删除指定源文件"></a>删除指定源文件</h3><p>既然讲到了添加源文件，那么如何删除，我们也顺带着讲下吧，我们只需要通过<code>del_files()</code>接口，就可以从前面<code>add_files</code>接口添加的文件列表中，删除指定的文件，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;) </span><br><span class="line">    add_files(&quot;src/*.c&quot;) </span><br><span class="line">    del_files(&quot;src/test.c&quot;)</span><br></pre></td></tr></table></figure><p>上面的例子，可以从<code>src</code>目录下添加除<code>test.c</code>以外的所有文件，当然这个也可以通过<code>add_files(&quot;src/*.c|test.c&quot;)</code>来达到相同的目的，但是这种方式更加灵活。</p><p>例如，我们可以条件判断来控制删除哪些文件，并且此接口也支持<code>add_files</code>的匹配模式，过滤模式，进行批量移除。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;) </span><br><span class="line">    add_files(&quot;src/**.c&quot;) </span><br><span class="line">    del_files(&quot;src/test*.c&quot;) </span><br><span class="line">    del_files(&quot;src/subdir/*.c|xxx.c&quot;) </span><br><span class="line">    if is_plat(&quot;iphoneos&quot;) then </span><br><span class="line">        add_files(&quot;xxx.m&quot;) </span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p>通过上面的例子，我们可以看出<code>add_files</code>和<code>del_files</code>是根据调用顺序，进行顺序添加和删除的，并且通过<code>del_files(&quot;src/subdir/*.c|xxx.c&quot;)</code>删除一批文件， 并且排除<code>src/subdir/xxx.c</code>（就是说，不删除这个文件）。</p><h1 id="使用选项切换构建参数"><a href="#使用选项切换构建参数" class="headerlink" title="使用选项切换构建参数"></a>使用选项切换构建参数</h1><h3 id="添加构建选项"><a href="#添加构建选项" class="headerlink" title="添加构建选项"></a>添加构建选项</h3><p>xmake中使用<code>option</code>语句来声明构建选项。<code>option</code>的基本用法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">option(<span class="string">&quot;enable-verbose&quot;</span>)</span><br><span class="line">    set_default(<span class="literal">false</span>)</span><br><span class="line">    set_description(<span class="string">&quot;Enable verbose logging.&quot;</span>)</span><br><span class="line">    add_defines(<span class="string">&quot;MYEXE_VERBOSE&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexe&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">    add_options(<span class="string">&quot;enable-verbose&quot;</span>)</span><br></pre></td></tr></table></figure><p>注意与<code>target</code>语句类似，<code>option</code>也是一个作用域的开始，之后一直到另一个作用域开始，或者显式的<code>option_end</code>调用之前的语句都是修饰当前option的。在上面的语句中，<code>option</code>作用域一共含有三条语句。</p><ul><li><code>set_default</code>语句设置option的默认值。xmake中option可分为两类：boolean和string。boolean类型的默认值可以是<code>true</code>、<code>false</code>或者<code>nil</code>，string类型的默认值可以是任意字符串或者<code>nil</code>。</li><li><code>set_description</code>语句设置option的描述语句。这一描述可以在通过运行<code>xmake config -h</code>或者<code>xmake config --menu</code>查看所有option时看到。</li><li><code>add_defines</code>为option加入了一个预定义宏。默认情况下，在使用<code>add_options</code>将option加入target时，如果option含有预定义宏、编译参数等，并且option的状态是启用的（不是<code>nil</code>或<code>false</code>），则target也会加入这些预定义宏和编译参数。</li></ul><blockquote><p>Tips. xmake中作用域级别的语句有六种：<code>target</code>和<code>target_end</code>、<code>package</code>和<code>package_end</code>，<code>option</code>和<code>option_end</code>、<code>rule</code>和<code>rule_end</code>、<code>toolchain</code>和<code>toolchain_end</code>、<code>task</code>和<code>task_end</code>。其中前面三种比较常用。</p></blockquote><p>除了<code>add_defines</code>之外，xmake中的option还支持<code>add_&lt;language&gt;flags</code>系列函数。如果要作更复杂的控制，可以使用<code>has_config</code>和<code>is_config</code>语句来进行判断：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">option(<span class="string">&quot;with-openssl&quot;</span>, &#123;default = <span class="literal">false</span>, description = <span class="string">&quot;Build with OpenSSL.&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> has_config(<span class="string">&quot;with-openssl&quot;</span>) <span class="keyword">then</span></span><br><span class="line">    add_requires(<span class="string">&quot;openssl&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">target(<span class="string">&quot;myexe&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> has_config(<span class="string">&quot;with-openssl&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_packages(<span class="string">&quot;openssl&quot;</span>)</span><br><span class="line">        add_defines(<span class="string">&quot;MYEXE_HAVE_OPENSSL&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里用到了<code>option</code>的简写格式，这一格式下<code>option</code>不再作为作用域开始的标记。</p><h3 id="内置选项"><a href="#内置选项" class="headerlink" title="内置选项"></a>内置选项</h3><p>xmake提供了一系列内置选项，在给自定义选项命名时记得避免与内置选项重名！常用的内置选项有：</p><ul><li><code>plat</code>：设置构建目标平台。</li><li><code>arch</code>：设置构建目标架构。</li><li><code>mode</code>：设置构建模式。</li><li><code>kind</code>：设置默认链接库类型。</li><li><code>buildir</code>：设置生成位置。默认为<code>build</code>，可以使用这一选项更改。推荐对不同的选项组合使用不同的生成位置以避免冲突。</li></ul><p>还有一些可能比较少用但很容易重名的内置选项，包括<code>qt</code>、<code>cuda</code>、<code>ndk</code>、<code>sdk</code>等。这些选项的清单及其作用可以运行<code>xmake config -h</code>查看。</p><h3 id="指定构建选项"><a href="#指定构建选项" class="headerlink" title="指定构建选项"></a>指定构建选项</h3><p>xmake在configure阶段指定各种构建选项。对boolean选项与string选项类型的指定方式类似，稍有不同：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --opt1=yes --opt2=y --opt3=on # yes/no, y/n, on/off are all valid</span><br><span class="line">$ xmake config --str1=mystr &quot;--str2=some string&quot;</span><br></pre></td></tr></table></figure><p>当构建选项较多时，一个一个指定是一件很困难的事情。这时可以将一组选项导出为列表，切换时可以在列表间切换。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --opt1=yes --opt2=mystr --buildir=build-preset1</span><br><span class="line">$ xmake config --export=preset1.txt</span><br></pre></td></tr></table></figure><p>这样就可以把当前所有构建选项导出到preset1.txt文件。需要导入构建选项时，执行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config -c --import=preset1.txt</span><br></pre></td></tr></table></figure><p>这里<code>-c</code>表示先清除其他选项设置，避免干扰。</p><h3 id="构建选项依赖"><a href="#构建选项依赖" class="headerlink" title="构建选项依赖"></a>构建选项依赖</h3><p>xmake中使用<code>add_deps</code>语句来声明选项之间的依赖关系。例如，选项opt2依赖选项opt1，当设置opt1时opt2自动取消，xmake.lua如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="string">&quot;opt1&quot;</span>, &#123;default = <span class="literal">false</span>&#125;)</span><br><span class="line">option(<span class="string">&quot;opt2&quot;</span>)</span><br><span class="line">    set_default(<span class="literal">true</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;opt1&quot;</span>)</span><br><span class="line">    after_check(<span class="function"><span class="keyword">function</span> <span class="params">(option)</span></span></span><br><span class="line">        <span class="keyword">if</span> option:dep(<span class="string">&quot;opt1&quot;</span>):enabled() <span class="keyword">then</span></span><br><span class="line">            option:enable(<span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">option_end()</span><br></pre></td></tr></table></figure><p>这里<code>after_check</code>语句接收了一个Lua lambda表达式作为参数，这个表达式函数会在选项的检查结束后执行，将opt2设置为与opt1相容的值。<code>option：enable(false)</code>中<code>option</code>是函数的参数，调用函数时这个参数由xmake来构造。<code>enable</code>是<code>option</code>的一个函数，用于修改boolean类型option的值。对于string类型的option，这里可以使用<code>set_value</code>函数来设置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> option:dep(<span class="string">&quot;opt1&quot;</span>):enabled() <span class="keyword">then</span></span><br><span class="line">    option:set_value(<span class="string">&quot;opt1&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips. 所有<code>option</code>默认是并行检查的，其先后顺序仅能通过<code>add_deps</code>控制。不加<code>add_deps</code>语句，在<code>after_check</code>中取其他<code>option</code>的值是未定义行为！</p></blockquote><p>xmake中大量使用了这类函数式方法用来灵活控制构建的每个过程。在lambda表达式函数之内的部分称为Script Scope，与之对应的xmake.lua中外面的部分称为Description Scope。Description Scope胜在简洁方便，易读易写；而只有在Script Scope内才可以使用xmake提供的全部功能，包括xmake提供的大量第三方Lua模块。这些功能可以在官方文档中找到。</p><blockquote><p>Tips. Description Scope内的语句会多次解析执行，而Script Scope内的语句只会执行一遍。不同option&#x2F;不同target的Script Scope默认是并行执行的。调试用的<code>print</code>语句应当写在Script Scope内，并标注当前所在的option&#x2F;target。</p></blockquote><p>常用的能够进入Script Scope的语句目前有如下一些。</p><p>option：</p><ul><li><code>before_check</code>&#x2F;<code>on_check</code>&#x2F;<code>after_check</code> configure阶段</li></ul><p>target：</p><ul><li><code>on_config</code> configure阶段</li><li><code>before_build</code>&#x2F;<code>on_build</code>&#x2F;<code>after_build</code> build阶段</li><li><code>before_link</code>&#x2F;<code>on_link</code>&#x2F;<code>after_link</code> build阶段</li><li><code>before_run</code>&#x2F;<code>on_run</code>&#x2F;<code>after_run</code> 运行<code>xmake run &lt;target&gt;</code>时</li><li><code>before_install</code>&#x2F;<code>on_install</code>&#x2F;<code>after_install</code> 运行<code>xmake install &lt;target&gt;</code>时</li><li><code>on_uninstall</code> 运行<code>xmake uninstall &lt;target&gt;</code>时</li><li><code>before_clean</code>&#x2F;<code>on_clean</code>&#x2F;<code>after_clean</code> 运行<code>xmake clean &lt;target&gt;</code>时</li></ul><h2 id="检测开发环境"><a href="#检测开发环境" class="headerlink" title="检测开发环境"></a>检测开发环境</h2><p>xmake中，option不仅用来处理用户指定的构建选项，还可以用来执行环境检测。这时option的写法为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="string">&quot;__have_longlong&quot;</span>)</span><br><span class="line">    set_default(<span class="literal">false</span>)</span><br><span class="line">    set_showmenu(<span class="literal">false</span>) <span class="comment">-- do not show this option in the configuration menu</span></span><br><span class="line">    add_ctypes(<span class="string">&quot;long long int&quot;</span>)</span><br><span class="line">option_end()</span><br><span class="line"><span class="keyword">if</span> has_config(<span class="string">&quot;__have_longlong&quot;</span>) <span class="keyword">then</span></span><br><span class="line">    add_defines(<span class="string">&quot;HAVE_LONGLONG&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里在<code>option</code>中加入了<code>add_ctypes</code>语句，这使得<code>__have_longlong</code>这个option成为了一个检测option。xmake中，包含以下语句中一个或者多个的option为检测option：</p><ul><li><code>add_cincludes</code>&#x2F;<code>add_cxxincludes</code>：检测是否能找到某个头文件。</li><li><code>add_ctypes</code>&#x2F;<code>add_cxxtypes</code>：检测是否声明某个类型。通常与上一条联合使用，通过<code>add_cincludes</code>添加头文件，再通过<code>add_ctypes</code>检测头文件中声明的类型。</li><li><code>add_cfuncs</code>&#x2F;<code>add_cxxfuncs</code>：检测是否声明某个函数。同上，通常通过<code>add_cincludes</code>添加头文件，再通过<code>add_cfuncs</code>检测头文件中声明的函数。</li><li><code>add_links</code>：检测是否能找到某个链接库。</li><li><code>add_features</code>：检测编译器功能，例如<code>add_features(&quot;cxx_std_11&quot;)</code>检测是否支持C++11.</li><li><code>add_csnippets</code>&#x2F;<code>add_cxxsnippets</code>：检测是否能通过编译某代码片段。这条语句功能最强大，可以实现上面提到的各种功能，还可以通过添加参数来检测是否能运行某代码片段，获取该代码片段的输出。详情可参考官方文档。</li></ul><p>使用option进行检测有时还是太复杂了，这时可以使用xmake提供的更简单的检测接口。下面的代码段和上面检测<code>long long int</code>的片段作用相同：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">includes(<span class="string">&quot;check_ctypes.lua&quot;</span>)</span><br><span class="line">check_ctypes(<span class="string">&quot;HAVE_LONGLONG&quot;</span>, <span class="string">&quot;long long int&quot;</span>)</span><br><span class="line"><span class="comment">--[[ if has_config(&quot;__HAVE_LONGLONG&quot;) then</span></span><br><span class="line"><span class="comment">    do something</span></span><br><span class="line"><span class="comment">end --]]</span></span><br></pre></td></tr></table></figure><p>检测接口通过<code>includes</code>方法引入，其中<code>check_ctypes.lua</code>为xmake内置的扩展脚本。需要注意的是，为了避免选项冲突，xmake会自动将这里定义的选项命名为双下划线<code>__</code>接要定义的宏名称<code>HAVE_LONGLONG</code>。xmake中一共提供了如下简化检测接口。</p><ul><li><code>check_cflags.lua</code>&#x2F;<code>check_cxxflags.lua</code></li><li><code>check_cincludes.lua</code>&#x2F;<code>check_cxxincludes.lua</code></li><li><code>check_ctypes.lua</code>&#x2F;<code>check_cxxtypes.lua</code></li><li><code>check_cfuncs.lua</code>&#x2F;<code>check_cxxfuncs.lua</code></li><li><code>check_csnippets.lua</code>&#x2F;<code>check_cxxsnippets.lua</code></li><li><code>check_links.lua</code></li><li><code>check_features.lua</code></li><li><code>check_macros.lua</code></li></ul><p>大部分接口都和上面<code>option</code>的同名函数一一对应。其中三个接口例外：<code>check_cflags</code>和<code>check_cxxflags</code>检测编译器是否支持某个编译参数，而<code>check_macros</code>检测编译器是否设置某个预定义宏。<code>macros</code>检测都可以通过在<code>option</code>中设置<code>add_csnippets</code>和<code>add_cxxsnippets</code>来实现，而<code>flags</code>检测需要借助<code>on_check</code>进入Script Scope来处理。感兴趣的读者可以从<code>path/to/xmake/includes</code>找到这些接口的实现。</p><h2 id="生成配置头文件"><a href="#生成配置头文件" class="headerlink" title="生成配置头文件"></a>生成配置头文件</h2><p>当各种配置选项定义的宏仅影响源文件时，上面的开发环境检测功能就足够了。但是，当这些宏还影响头文件时，光在构建期检测是不够的，因为打包发布库与头文件时，不会包含任何检测结果的数据，这会导致头文件与库中的函数不匹配，最终导致链接失败。解决办法就是使用配置头文件（Configuration Headers）。</p><p>配置头文件是一个在构建时生成的文件，它根据检测到的各类选项来设置其中定义的宏变量。在构建过程中，先生成配置头文件，然后将该头文件加入项目中一起编译，最后一起打包发布。由于配置头文件的内容在构建时已经固定下来，如果构建头文件使用正确，头文件中将不再含有不清晰的分支，这也就避免了函数不匹配的问题。</p><p>一个使用配置头文件的项目目录如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- include</span><br><span class="line">    |- mylib</span><br><span class="line">        |- mylib.h</span><br><span class="line">        |- config.h.in</span><br><span class="line">|- src</span><br><span class="line">    |- mylib.cpp</span><br><span class="line">|- xmake.lua</span><br></pre></td></tr></table></figure><p>其中mylib.h文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;config.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __WIN32__</span></span><br><span class="line"><span class="meta">#  <span class="keyword">ifdef</span> MYLIB_STATIC</span></span><br><span class="line"><span class="meta">#    <span class="keyword">define</span> MYLIB_EXPORT</span></span><br><span class="line"><span class="meta">#  <span class="keyword">elif</span> defined(MYLIB_BUILDING)</span></span><br><span class="line"><span class="meta">#    <span class="keyword">define</span> MYLIB_EXPORT __declspec(dllexport)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="keyword">define</span> MYLIB_EXPORT __declspec(dllimport)</span></span><br><span class="line"><span class="meta">#  <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="keyword">define</span> MYLIB_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">MYLIB_EXPORT <span class="type">int</span> <span class="title">myfunc</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>mylib.cpp包含<code>myfunc</code>函数的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylib/mylib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myfunc</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123; <span class="keyword">return</span> a + <span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure><p><a href="https://link.zhihu.com/?target=http://config.h.in">http://config.h.in</a>文件内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line">$&#123;define MYLIB_STATIC&#125;</span><br></pre></td></tr></table></figure><p>xmake.lua内容如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add_rules</span>(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line"><span class="built_in">target</span>(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    <span class="built_in">set_kind</span>(<span class="string">&quot;$(kind)&quot;</span>)</span><br><span class="line">    <span class="built_in">add_files</span>(<span class="string">&quot;src/mylib.cpp&quot;</span>)</span><br><span class="line">    <span class="built_in">add_includedirs</span>(<span class="string">&quot;include&quot;</span>)</span><br><span class="line">    <span class="built_in">add_defines</span>(<span class="string">&quot;MYLIB_BUILDING&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">is_kind</span><span class="params">(<span class="string">&quot;static&quot;</span>)</span> then</span></span><br><span class="line"><span class="function">        <span class="title">set_configvar</span><span class="params">(<span class="string">&quot;MYLIB_STATIC&quot;</span>, <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    end</span></span><br><span class="line"><span class="function">    <span class="title">set_configdir</span><span class="params">(<span class="string">&quot;$(buildir)/mylib&quot;</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">add_includedirs</span><span class="params">(<span class="string">&quot;$(buildir)/mylib&quot;</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">add_configfiles</span><span class="params">(<span class="string">&quot;include/mylib/config.h.in&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p>运行<code>xmake</code>构建以上项目后，可以在<code>build/mylib</code>文件夹下找到一个文件config.h：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYLIB_STATIC 1</span></span><br></pre></td></tr></table></figure><p>在<code>mylib.h</code>文件中引用的头文件<code>config.h</code>正是这一文件。在发布时，将这一文件与<code>include</code>文件夹下的头文件一同打包，即可把<code>MYLIB_STATIC</code>这个设置项固定下来了。当其他文件引用<code>mylib.h</code>时，宏<code>MYLIB_EXPORT</code>将始终展开为空值。</p><blockquote><p>Tips. 上面的头文件设置看似很复杂，但却是大型C++项目中非常常见的做法。这么做的原因是在Windows上要使用MSVC导出可以链接的动态库，必须要显式声明需要导出的符号，声明的方式其一是在<code>.def</code>文件中集中声明，其二就是在函数前加<code>__declspec(dllexport)</code>。加导出声明后，相应函数的符号会以<code>__imp_</code>开头，以区分于静态库符号。为了避免符号冲突，若需要其他项目链接该动态库，则必须在库的头文件相应函数前加<code>__declspec(dllimport)</code>。<br>Tips. config.h是一个很常见的名称，如果安装的时候直接把这个文件所在的文件夹放在<code>include</code>下，很容易引起混乱。解决办法有两种：一种是改名mylib_config.h，另一种是放在文件夹mylib下。这也是上面写<code>#include &quot;mylib/mylib.h&quot;</code>的原因。</p></blockquote><p>xmake中，默认配置头文件以后缀<code>.h.in</code>结尾，在生成文件时去掉后缀的<code>.in</code>。这一行为也可以通过添加参数<code>&#123;filename = ...&#125;</code>进行更改。在配置头文件中有两种方法声明需替换的配置变量：</p><ul><li><code>$&#123;VAR&#125;</code>：替换为变量<code>VAR</code>的值，或者空字符串。常用于<code>#define VAR $&#123;VAR&#125;</code>。</li><li><code>$&#123;define VAR&#125;</code>：如果<code>VAR</code>的值存在，则定义<code>VAR</code>，否则注释掉当前行。要求写在行首。</li></ul><p>变量的值可以用<code>set_configvar</code>语句指定。<code>set_configvar</code>语句可以结合<code>option</code>使用，根据不同的选项设置不同的配置变量：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">option(<span class="string">&quot;with-openssl&quot;</span>, &#123;default = <span class="literal">false</span>, description = <span class="string">&quot;Build with OpenSSL.&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> has_config(<span class="string">&quot;with-openssl&quot;</span>) <span class="keyword">then</span></span><br><span class="line">    add_requires(<span class="string">&quot;openssl&quot;</span>)</span><br><span class="line">    set_configvar(<span class="string">&quot;WITH_OPENSSL&quot;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>进一步还可以结合<code>set_configvar</code>与环境探测。xmake中已经预先提供了这样的接口，它们与<code>check_xxx</code>系列接口一脉相承，命名为<code>configvar_check_xxx</code>，用法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">includes(<span class="string">&quot;check_ctypes.lua&quot;</span>)</span><br><span class="line">configvar_check_ctypes(<span class="string">&quot;HAVE_LONGLONG&quot;</span>, <span class="string">&quot;long long int&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果类型<code>long long int</code>可以通过编译，则变量<code>HAVE_LONGLONG</code>将被替换为1，否则变量<code>HAVE_LONGLONG</code>值不存在。使用<code>configvar_check_xxx</code>接口设置的option选项命名仍为双下划线<code>__</code>+变量名。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 04. 依赖仓库</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2004.%20%E4%BE%9D%E8%B5%96%E4%BB%93%E5%BA%93.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2004.%20%E4%BE%9D%E8%B5%96%E4%BB%93%E5%BA%93.html</url>
      
        <content type="html"><![CDATA[<h2 id="编写包描述文件"><a href="#编写包描述文件" class="headerlink" title="编写包描述文件"></a>编写包描述文件</h2><p>前文说到，当xmake-repo未收录时，可以自己编写包描述文件。xmake的官方仓库<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo">xmake-repo</a>就是由一个个包描述文件组成的；它们也是编写包描述文件的最佳参考。</p><h3 id="远程拉取源码编译"><a href="#远程拉取源码编译" class="headerlink" title="远程拉取源码编译"></a>远程拉取源码编译</h3><p>一个package描述文件由一个package作用域组成，以<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo/blob/master/packages/j/jsoncpp/xmake.lua">jsoncpp</a>为例，其包描述文件如下（为方便起见作了部分删改）：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;jsoncpp&quot;</span>)</span><br><span class="line"></span><br><span class="line">    set_homepage(<span class="string">&quot;https://github.com/open-source-parsers/jsoncpp/wiki&quot;</span>)</span><br><span class="line">    set_description(<span class="string">&quot;A C++ library for interacting with JSON.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    add_urls(<span class="string">&quot;https://github.com/open-source-parsers/jsoncpp/archive/$(version).zip&quot;</span>,</span><br><span class="line">             <span class="string">&quot;https://github.com/open-source-parsers/jsoncpp.git&quot;</span>)</span><br><span class="line">    add_versions(<span class="string">&quot;1.9.5&quot;</span>, <span class="string">&quot;a074e1b38083484e8e07789fd683599d19da8bb960959c83751cd0284bdf2043&quot;</span>)</span><br><span class="line"></span><br><span class="line">    add_deps(<span class="string">&quot;cmake&quot;</span>)</span><br><span class="line">    on_load(<span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">package</span>:<span class="built_in">config</span>(<span class="string">&quot;shared&quot;</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">package</span>:add(<span class="string">&quot;defines&quot;</span>, <span class="string">&quot;JSON_DLL&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    on_install(<span class="string">&quot;linux&quot;</span>, <span class="string">&quot;macosx&quot;</span>, <span class="string">&quot;android&quot;</span>, <span class="string">&quot;iphoneos&quot;</span>, <span class="string">&quot;windows&quot;</span>, <span class="string">&quot;mingw&quot;</span>, <span class="string">&quot;cross&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="keyword">local</span> configs = &#123;<span class="string">&quot;-DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF&quot;</span>, <span class="string">&quot;-DJSONCPP_WITH_TESTS=OFF&quot;</span>, <span class="string">&quot;-DJSONCPP_WITH_EXAMPLE=OFF&quot;</span>, <span class="string">&quot;-DBUILD_OBJECT_LIBS=OFF&quot;</span>&#125;</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(configs, <span class="string">&quot;-DCMAKE_BUILD_TYPE=&quot;</span> .. (<span class="built_in">package</span>:<span class="built_in">debug</span>() <span class="keyword">and</span> <span class="string">&quot;Debug&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Release&quot;</span>))</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(configs, <span class="string">&quot;-DBUILD_SHARED_LIBS=&quot;</span> .. (<span class="built_in">package</span>:<span class="built_in">config</span>(<span class="string">&quot;shared&quot;</span>) <span class="keyword">and</span> <span class="string">&quot;ON&quot;</span> <span class="keyword">or</span> <span class="string">&quot;OFF&quot;</span>))</span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">insert</span>(configs, <span class="string">&quot;-DBUILD_STATIC_LIBS=&quot;</span> .. (<span class="built_in">package</span>:<span class="built_in">config</span>(<span class="string">&quot;shared&quot;</span>) <span class="keyword">and</span> <span class="string">&quot;OFF&quot;</span> <span class="keyword">or</span> <span class="string">&quot;ON&quot;</span>))</span><br><span class="line">        import(<span class="string">&quot;package.tools.cmake&quot;</span>).install(<span class="built_in">package</span>, configs)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    on_test(<span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="built_in">assert</span>(<span class="built_in">package</span>:check_cxxsnippets(&#123;test = <span class="string">[[</span></span><br><span class="line"><span class="string">            void test() &#123;</span></span><br><span class="line"><span class="string">                Json::Value root;</span></span><br><span class="line"><span class="string">                Json::CharReaderBuilder builder;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]]</span>&#125;, &#123;configs = &#123;languages = <span class="string">&quot;c++11&quot;</span>&#125;, includes = <span class="string">&quot;json/json.h&quot;</span>&#125;))</span><br><span class="line">    <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>可以看到，整个包描述文件分为四部分：描述、加载、安装、测试。描述部分最简洁，也很容易读懂，这里包括包名、项目主页、项目简介、url、版本、依赖等。url既可以声明版本对应源码包的下载地址，也可以声明git地址。<code>add_versions</code>语句有两个参数，分别是版本号、对应版本号源码包的sha256或者对应版本号的git commit id。<code>add_deps</code>语句声明了包依赖的其他包。</p><blockquote><p>Tips. xmake提供了计算sha256的命令行接口 <code>shell $ xmake lua hash.sha256 &lt;filename&gt;</code> 除了sha256之外，xmake还提供了hash.md5等其他实用命令行接口。</p></blockquote><p>加载阶段和包描述阶段类似，区别在于加载阶段使用一个lambda函数（Lua中格式为<code>function(t) ... end</code>）来描写加载过程，此处可以使用Lua脚本以及包设置项进行判断。jsoncpp中判断当包作为动态链接库链接时，为使用此库的target添加<code>JSON_DLL</code>预定义宏。由于msvc引入动态库时往往需要在头文件中加限定符<code>__declspec(dllimport)</code>，这样的预定义宏需求在跨平台C++项目中非常常见。</p><p>接下来便是一个包描述文件的重头戏了：安装部分。jsoncpp使用cmake作为构建系统，xmake为之提供了一个模块用于处理cmake包的编译与安装：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import(<span class="string">&quot;package.tools.cmake&quot;</span>).install(<span class="built_in">package</span>, configs)</span><br></pre></td></tr></table></figure><p>这一语句自动调用cmake的安装功能。package为xmake自动生成的代表当前包的对象，configs是一个table，这一语句会根据configs里面的声明来编译当前包。通常configs包含几个方面：</p><ul><li>禁用文档生成、测试与示例程序构建</li><li>编译模式处理（debug&#x2F;release）</li><li>链接库类型处理（static&#x2F;shared）</li><li>指定其他编译选项</li></ul><p>整个安装部分包含在<code>on_install</code>语句中。这个语句除最后一个参数用于描写安装过程之外，其他参数声明了包可以安装的平台&#x2F;架构。有时，一个包在不同平台上需要不同的处理，则可以写多个<code>on_install</code>语句来做跨平台处理，例如<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo/blob/master/packages/f/fftw/xmake.lua">fftw</a>。</p><p><code>on_install</code>语句最后运行的理想结果，是在<code>package:installdir()</code>这个目录下产生如下目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$XMAKE_PKG_INSTALLDIR/m/mylib/&lt;version&gt;/&lt;hash&gt;</span><br><span class="line">|- bin</span><br><span class="line">|- include</span><br><span class="line">|- lib</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>xmake会将<code>include</code>加入头文件目录，将<code>lib</code>加入链接目录，并自动扫描<code>lib</code>下生成的所有库文件对其进行链接。也就是说，无论采用什么方法，只要最后生成的库按此结构放置即可。对常用构建系统，xmake提供了<code>import(&quot;package.tools.xxx&quot;)</code>的接口进行安装。对于使用make&#x2F;nmake管理、没有提供install功能的包，可能需要手动复制其生成文件到<code>package:installdir()</code>，见后文“直接下载包文件”一节。</p><p>部分包不按照这种目录标准安装。xmake也提供了保持其原有目录结构的途径：在<strong>描述阶段</strong>使用<code>add_includedirs</code>和<code>add_linkdirs</code>来指定头文件目录和链接目录（可以指定多个）。默认行为就相当于</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    add_includedirs(<span class="string">&quot;include&quot;</span>)</span><br><span class="line">    add_linkdirs(<span class="string">&quot;lib&quot;</span>)</span><br></pre></td></tr></table></figure><p>类似地，自动扫描链接库目录的行为也可以通过<code>add_links</code>语句自定义，以避免自动扫描时的链接顺序等问题。xmake将按照声明的前后顺序链接各个声明的链接库。</p><p>测试过程发生在安装完毕之后，xmake会试着编译一小段程序以保证包的可用性。这里常常使用<code>assert</code>语句与<code>package:check_cxxsnippets</code>或者<code>package:check_cfuncs</code>语句的组合。这些语句的用法和含义都很直接，其全部参数可以参考官方文档查阅。</p><p>包描述文件可以直接写在xmake.lua所有target定义之前，这样自定义包将可以和xmake-repo中提供的包一样，用<code>add_requires</code>引入。xmake.lua的内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">package_end() <span class="comment">-- explicitly quit the package description scope. IMPORTANT!</span></span><br><span class="line"></span><br><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">add_requires(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexec&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">    add_packages(<span class="string">&quot;mylib&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果包描述文件过于冗长，可以将其单独写在一个lua文件里（例如mylib.lua），使用<code>includes</code>语句引入：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">includes(<span class="string">&quot;mylib.lua&quot;</span>)</span><br><span class="line"></span><br><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">add_requires(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexec&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">    add_packages(<span class="string">&quot;mylib&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Tips. <code>includes</code>是一个非常实用的功能，尤其是在项目含有多个子项目的情况。<code>includes</code>并不仅仅是简单的代码替换，在被包含的文件中，<code>add_files</code>添加的相对路径会改为相对于被包含文件的路径。例如，文件目录如下 <code>root |- lib1 |- lib1.cpp |- xmake.lua |- lib2 |- lib2.cpp |- xmake.lua |- xmake.lua</code> 则在根目录下的<code>xmake.lua</code>可以这样写： <code>lua add_rules(&quot;mode.debug&quot;, &quot;mode.release&quot;) includes(&quot;lib1/xmake.lua&quot;) includes(&quot;lib2/xmake.lua&quot;)</code> 这样一来，更改一个子部分就不再需要对根目录的构建文件进行修改了，构建文件的易维护性大大提升。</p></blockquote><p>由于C++的包构建千奇百怪，xmake使用Lua脚本的形式对包的构建过程提供了充分的自由度，这也导致包描述文件相对构建文件往往更加复杂。但是即使没有完全理解也没有关系，对于包括cmake在内的常见构建系统（xmake，autoconf，etc.），xmake-repo中大多都有对应的示例，可以在复制粘贴基础上进行改动。</p><h3 id="直接下载包文件"><a href="#直接下载包文件" class="headerlink" title="直接下载包文件"></a>直接下载包文件</h3><p>部分包（尤其是header-only的C++库）直接提供头文件和二进制文件下载，无需从源码安装。这时只需要修改<code>on_install</code>的安装部分，将安装改为复制即可。下面的部分摘自<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo/blob/master/packages/o/openblas/xmake.lua">openblas</a>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;openblas&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    on_install(<span class="string">&quot;windows&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="built_in">os</span>.mv(<span class="built_in">path</span>.join(<span class="string">&quot;bin&quot;</span>, <span class="string">&quot;libopenblas.dll&quot;</span>), <span class="built_in">package</span>:installdir(<span class="string">&quot;bin&quot;</span>))</span><br><span class="line">        <span class="built_in">os</span>.mv(<span class="string">&quot;include&quot;</span>, <span class="built_in">package</span>:installdir())</span><br><span class="line">        <span class="built_in">os</span>.mv(<span class="built_in">path</span>.join(<span class="string">&quot;lib&quot;</span>, <span class="string">&quot;libopenblas.lib&quot;</span>), <span class="built_in">path</span>.join(<span class="built_in">package</span>:installdir(<span class="string">&quot;lib&quot;</span>), <span class="string">&quot;openblas.lib&quot;</span>))</span><br><span class="line">        <span class="built_in">package</span>:addenv(<span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;bin&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="从系统查找"><a href="#从系统查找" class="headerlink" title="从系统查找"></a>从系统查找</h3><p>有时候一些包没有独立的源码或二进制，而是由发行版提供，或者强制要求从安装包安装。这时从系统查找的功能就派上用场了。xmake中用<code>on_fetch</code>语句实现查找功能。下面例子摘自<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo/blob/master/packages/m/msmpi/xmake.lua">msmpi</a>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;msmpi&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    on_fetch(<span class="string">&quot;windows&quot;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(package, opt)</span></span></span><br><span class="line">        <span class="keyword">if</span> opt.system <span class="keyword">then</span></span><br><span class="line">            import(<span class="string">&quot;lib.detect.find_path&quot;</span>)</span><br><span class="line">            import(<span class="string">&quot;lib.detect.find_library&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">-- init search paths</span></span><br><span class="line">            <span class="keyword">local</span> paths = &#123;</span><br><span class="line">                <span class="string">&quot;$(env MSMPI_ROOT)&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$(env MSMPI_INC)\\..&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$(env PROGRAMFILES%(x86%))\\Microsoft SDKs\\MPI&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">-- find library</span></span><br><span class="line">            <span class="keyword">local</span> result = &#123;links = &#123;&#125;, linkdirs = &#123;&#125;, includedirs = &#123;&#125;&#125;</span><br><span class="line">            <span class="keyword">local</span> arch = <span class="built_in">package</span>:is_arch(<span class="string">&quot;x64&quot;</span>) <span class="keyword">and</span> <span class="string">&quot;x64&quot;</span> <span class="keyword">or</span> <span class="string">&quot;x86&quot;</span></span><br><span class="line">            <span class="keyword">for</span> _, lib <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;<span class="string">&quot;msmpi&quot;</span>, <span class="string">&quot;msmpifec&quot;</span>, <span class="string">&quot;msmpifmc&quot;</span>&#125;) <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">local</span> linkinfo = find_library(lib, paths, &#123;suffixes = <span class="built_in">path</span>.join(<span class="string">&quot;Lib&quot;</span>, arch)&#125;)</span><br><span class="line">                <span class="keyword">if</span> linkinfo <span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">table</span>.<span class="built_in">insert</span>(result.linkdirs, linkinfo.linkdir)</span><br><span class="line">                    <span class="built_in">table</span>.<span class="built_in">insert</span>(result.links, lib)</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            result.linkdirs = <span class="built_in">table</span>.unique(result.linkdirs)</span><br><span class="line"></span><br><span class="line">            <span class="comment">-- find headers</span></span><br><span class="line">            <span class="keyword">local</span> <span class="built_in">path</span> = find_path(<span class="string">&quot;mpi.h&quot;</span>, paths, &#123;suffixes = <span class="string">&quot;Include&quot;</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">path</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">table</span>.<span class="built_in">insert</span>(result.includedirs, <span class="built_in">path</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">if</span> #result.includedirs &gt; <span class="number">0</span> <span class="keyword">and</span> #result.linkdirs &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p>从系统查找包，最重要的是路径的设置。一般来说，通过环境变量或者注册表获取路径是最佳选择，如果没有就默认安装路径查找，并且还需要提供一个用户可自定义的环境变量（此处<code>MSMPI_ROOT</code>）用于手动指定查找路径。如果要与cmake保持一致，建议使用<code>&lt;package&gt;_ROOT</code>作为该环境变量的名称。有了路径之后，配合使用<code>lib.detect.find_library</code>模块与<code>lib.detect.find_path</code>模块即可完成包链接目录、头文件目录的设置。</p><p>除了显式查找之外，xmake还会到系统包管理器查找，查找时使用的名称由<code>add_extsources</code>语句指定。下面的例子来自<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo/blob/master/packages/e/eigen/xmake.lua">eigen</a>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;eigen&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> is_plat(<span class="string">&quot;mingw&quot;</span>) <span class="keyword">and</span> is_subhost(<span class="string">&quot;msys&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_extsources(<span class="string">&quot;pacman::eigen3&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> is_plat(<span class="string">&quot;linux&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_extsources(<span class="string">&quot;pacman::eigen&quot;</span>, <span class="string">&quot;apt::libeigen3-dev&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> is_plat(<span class="string">&quot;macosx&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_extsources(<span class="string">&quot;brew::eigen&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="远程拉取与系统查找相结合"><a href="#远程拉取与系统查找相结合" class="headerlink" title="远程拉取与系统查找相结合"></a>远程拉取与系统查找相结合</h3><p>一个包可以同时支持远程拉取与系统查找。例如CUDA Samples包的描述文件为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">package</span>(<span class="string">&quot;cuda_samples&quot;</span>)</span><br><span class="line"></span><br><span class="line">    set_kind(<span class="string">&quot;library&quot;</span>, &#123;headeronly = <span class="literal">true</span>&#125;)</span><br><span class="line">    set_homepage(<span class="string">&quot;https://github.com/NVIDIA/cuda-samples&quot;</span>)</span><br><span class="line">    set_description(<span class="string">&quot;CUDA Sample Utility Code&quot;</span>)</span><br><span class="line"></span><br><span class="line">    add_urls(<span class="string">&quot;https://github.com/NVIDIA/cuda-samples/archive/refs/tags/$(version).tar.gz&quot;</span>,</span><br><span class="line">             <span class="string">&quot;https://github.com/NVIDIA/cuda-samples.git&quot;</span>)</span><br><span class="line">    add_versions(<span class="string">&quot;v11.6&quot;</span>, <span class="string">&quot;9b5542747bc0aa66371b29043e46b3438266586332637001f2184d75415b920d&quot;</span>)</span><br><span class="line"></span><br><span class="line">    on_fetch(<span class="function"><span class="keyword">function</span> <span class="params">(package, opt)</span></span></span><br><span class="line">        <span class="keyword">if</span> opt.system <span class="keyword">then</span></span><br><span class="line">            import(<span class="string">&quot;lib.detect.find_path&quot;</span>)</span><br><span class="line">            <span class="keyword">local</span> paths = &#123;</span><br><span class="line">                <span class="string">&quot;C:\\ProgramData\\NVIDIA Corporation\\CUDA Samples\\v*\\common&quot;</span></span><br><span class="line">                <span class="comment">-- add your custom path here</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">local</span> headerpath = find_path(<span class="string">&quot;helper_cuda.h&quot;</span>, paths, &#123;suffixes = &#123;<span class="string">&quot;inc&quot;</span>&#125;&#125;)</span><br><span class="line">            <span class="keyword">if</span> headerpath <span class="keyword">then</span></span><br><span class="line">                vprint(<span class="string">&quot;CUDA Samples Found: &quot;</span> .. <span class="built_in">path</span>.directory(headerpath))</span><br><span class="line">                <span class="keyword">return</span> &#123;includedirs = &#123;headerpath&#125;&#125;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    add_includedirs(<span class="string">&quot;include/Common&quot;</span>)</span><br><span class="line">    on_install(<span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="built_in">os</span>.cp(<span class="string">&quot;Common&quot;</span>, <span class="built_in">package</span>:installdir(<span class="string">&quot;include&quot;</span>)) <span class="comment">-- for header only</span></span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    on_test(<span class="function"><span class="keyword">function</span> <span class="params">(package)</span></span></span><br><span class="line">        <span class="built_in">assert</span>(<span class="built_in">os</span>.isfile(<span class="built_in">path</span>.join(<span class="built_in">package</span>:installdir(<span class="string">&quot;include&quot;</span>), <span class="string">&quot;Common&quot;</span>, <span class="string">&quot;helper_cuda.h&quot;</span>)))</span><br><span class="line">    <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">package_end()</span><br></pre></td></tr></table></figure><p>在使用<code>add_requires</code>集成时，xmake会优先执行<code>on_fetch</code>定义的从系统查找过程，如果找到，则将其加入项目；如果没有找到，则从远程下载。由于仅用到sample里面的头文件，这里的<code>on_install</code>函数仅做了简单的copy，这是纯头文件库的一大好处：安装方便。对纯头文件库，xmake提供了语句<code>set_kind(&quot;library&quot;, &#123;headeronly = true&#125;)</code>，这一语句写在描述域，作用是忽略该库的链接时设置，例如动态库&#x2F;静态库、动态runtime&#x2F;静态runtime等。</p><h3 id="从本地源码编译"><a href="#从本地源码编译" class="headerlink" title="从本地源码编译"></a>从本地源码编译</h3><p>xmake的包管理既支持远程路径，也支持本地路径。这一功能可以用于集成源码在本地的第三方库（特别是，使用git submodules管理的第三方库源码）。远程路径用<code>add_urls</code>来声明，本地路径则用<code>set_sourcedir</code>语句来声明。例如，第三方库放在相对于包描述文件（直接写进xmake.lua的情况，包描述文件也就是xmake.lua构建描述文件）的<code>third_party/mylib</code>文件夹下，则<code>add_urls</code>和<code>add_versions</code>语句换为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_sourcedir(<span class="built_in">path</span>.join(<span class="built_in">os</span>.scriptdir(), <span class="string">&quot;third_party&quot;</span>, <span class="string">&quot;mylib&quot;</span>))</span><br></pre></td></tr></table></figure><p>其他全部与前文一致即可。</p><p>从零开始编写包描述文件绝不是一件容易的事情，甚至仅仅完全读懂上面的代码、理解其中每一个函数也是有一定难度的。限于篇幅，此处无法对其一一介绍，感兴趣的读者可以在官方文档中找到更多说明。如果你希望编写某个包描述文件并发布到仓库，但现有仓库中的包描述文件都不满足需要时，欢迎来GitHub讨论区交流获取灵感！</p><h2 id="自建xmake-repo仓库"><a href="#自建xmake-repo仓库" class="headerlink" title="自建xmake-repo仓库"></a>自建xmake-repo仓库</h2><p>xmake支持自建仓库与官方仓库共存。一个仓库的基本结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- packages</span><br><span class="line">    |- a</span><br><span class="line">        |- abc</span><br><span class="line">            |- xmake.lua</span><br><span class="line">    ...</span><br><span class="line">|- xmake.lua</span><br></pre></td></tr></table></figure><p>package文件夹存放所有的包描述文件。这些文件放在<strong>与包名一致</strong>的文件夹内，包名文件夹又按照其首字母区分放在不同的文件夹内。这里文件夹名一定要与包描述文件里<code>package(&quot;xxx&quot;)</code>语句写的包名一致！最外层的xmake.lua是仓库的描述文件，其结构如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_xmakever(<span class="string">&quot;2.6.1&quot;</span>) <span class="comment">-- minimal xmake version requirement for the repository</span></span><br><span class="line">set_description(<span class="string">&quot;repository for project xxx&quot;</span>) <span class="comment">-- description of the repository</span></span><br></pre></td></tr></table></figure><p>这一仓库既可以放在本地，也可以放在云端。例如，仓库的文件夹名为myrepo，放在项目根目录下，则可以用如下语句将仓库加入构建文件中：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_repositories(<span class="string">&quot;local-repo myrepo&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>add_repositories</code>语句接收一个字符串，字符串的各个部分以空格进行拼接。第一部分表示仓库的显示名称，第二部分为仓库的路径。如果路径为相对路径，则默认为相对于项目根目录的路径。<code>add_repositories</code>语句还可以声明远程仓库：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_repositories(<span class="string">&quot;remote-repo git@github.com:myrepo/xmake-repo.git dev&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里的第三部分表示git仓库的branch或者commit，可以省略，此时xmake将使用其默认branch。在xmake.lua中添加自建仓库后，自建仓库的<strong>所有包</strong>都可以直接通过<code>add_requires</code>引入了。也就是说，如果需要批量引入自定义第三方库，自建仓库是你最好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 03. 依赖管理</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2003.%20%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2003.%20%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="引入远程依赖"><a href="#引入远程依赖" class="headerlink" title="引入远程依赖"></a>引入远程依赖</h2><p>xmake中引入远程依赖的形式非常简单，一行<code>add_requires</code>语句即可。以imgui为例，建立目录结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- src</span><br><span class="line">    |- main.cpp</span><br><span class="line">|- xmake.lua</span><br></pre></td></tr></table></figure><p>源文件来自imgui的示例文件<a href="https://link.zhihu.com/?target=https://github.com/ocornut/imgui/blob/v1.88/examples/example_glfw_opengl3/main.cpp">main.cpp</a>，在文件的开头需要加一行<code>#include &quot;imgui_impl_opengl3_loader.h&quot;</code>。xmake.lua文件内容如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">add_requires(<span class="string">&quot;imgui 1.88&quot;</span>, &#123;configs = &#123;glfw_opengl3 = <span class="literal">true</span>&#125;&#125;)</span><br><span class="line">target(<span class="string">&quot;imgui-demo&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/main.cpp&quot;</span>)</span><br><span class="line">    add_packages(<span class="string">&quot;imgui&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里用到了<code>add_requires</code>语句。这一语句的基本用法为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;&lt;package&gt; &lt;version-range&gt;&quot;</span>, &#123;&lt;options&gt;, configs = &#123;&lt;<span class="built_in">config</span>-options&gt;&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;package&gt;</code>顾名思义表示包名，一个包在xmake-repo中的名字可能与想象中不同，这时需要到<a href="https://link.zhihu.com/?target=https://xrepo.xmake.io/%23/">xrepo</a>网站查证，或者在本地命令行运行<code>xrepo search &lt;package&gt;</code>来查证。如果需要的包尚未收录，也不用着急，后面还会介绍其他引入依赖的方式。</p></li><li><p><code>&lt;version-range&gt;</code>表示版本范围。xmake支持多种版本范围声明，以下几种声明都是合法的：</p></li><li><p><code>mylib 1.x</code></p></li><li><p><code>mylib &gt;=1.0.0 &lt;1.2.0</code></p></li><li><p><code>mylib ~1.0.3</code> 详细的语义版本范围见<a href="https://link.zhihu.com/?target=https://github.com/uael/sv%23versions">uael&#x2F;sv</a>。</p></li><li><p><code>&lt;options&gt;</code>包含了一系列限定选项，例如<code>&#123;system = true&#125;</code>表示仅从系统查找，<code>&#123;optional = true&#125;</code>表示允许查找和安装都失败，<code>&#123;verify = false&#125;</code>表示跳过验证强制启用声明的版本，等等。</p></li><li><p><code>&lt;config-options&gt;</code>用于声明包本身的构建选项。这一选项因项目而异，常用有<code>&#123;shared = true&#125;</code>表示使用动态库等。一个包可更改的构建选项可以用<code>xrepo info &lt;package&gt;</code>查看。</p></li></ul><p>从上面的xmake.lua代码片段还可以看到一个语句<code>add_packages</code>。这一语句的作用是将引入的第三方库导入对应的target作为依赖。这一语句作用的target在编译时会自动带上第三方库的头文件目录，链接到第三方库，并设置第三方库可能带来的一些编译参数。默认情况下，引入的头文件目录不会继承给子target，但是可以用<code>add_packages(&lt;package&gt;, &#123;public = true&#125;)</code>来更改这一默认行为。</p><p>上述代码设置好之后，输入<code>xmake</code>编译，<code>xmake run</code>运行，就可以看到imgui的demo窗口了。是不是很简单呢？</p><p>imgui是一个比较简单的库，没有太多的依赖项。然而，对于一些更复杂的库，他们本身又依赖其他的库，最终形成一个<strong>依赖链</strong>。仅仅更改库本身的选项，而不处理依赖链的选项，很容易造成依赖链上的库冲突。为了减少这种冲突现象，xmake也提供了修改依赖链上库的语句：<code>add_requireconfs</code>。例如，libpng依赖zlib，要是希望libpng和zlib都被编译为动态链接库，则应该使用如下语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;libpng&quot;</span>, &#123;configs = &#123;shared = <span class="literal">true</span>&#125;&#125;)</span><br><span class="line">add_requireconfs(<span class="string">&quot;libpng.zlib&quot;</span>, &#123;configs = &#123;shared = <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>如果还希望使用的zlib为1.2.12版本，则可以这样写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;libpng&quot;</span>, &#123;configs = &#123;shared = <span class="literal">true</span>&#125;&#125;)</span><br><span class="line">add_requireconfs(<span class="string">&quot;libpng.zlib&quot;</span>, &#123;version = <span class="string">&quot;1.2.12&quot;</span>, configs = &#123;shared = <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这一功能还可以用于解决菱形依赖问题。xmake中，可以用一行语句使依赖链上的每一个依赖zlib的包都依赖同一个zlib包（这时依赖链变成依赖图）：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requireconfs(<span class="string">&quot;*.zlib&quot;</span>, &#123;version = <span class="string">&quot;1.2.12&quot;</span>, configs = &#123;shared = <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>关于<code>add_requireconfs</code>的更多用法，请参考xmake官方文档。</p><blockquote><p>Tips. 对于远程依赖，依赖的引入可能导致构建一致性被破坏。要想固定远程依赖的版本，xmake也有相应的语句。只需要在<code>add_requires</code>之前写 <code>lua set_policy(&quot;package.requires_lock&quot;, true)</code> 这时，在第一次构建成功后会生成<code>xmake-requires.lock</code>文件。这一文件存在时，所有依赖的版本将被固定，不会自动升级。如果能将<code>xmake-requires.lock</code>上传到git，其他人在编译你的项目时再也不会因为依赖版本不匹配而烦恼了！</p></blockquote><h2 id="使用本地依赖"><a href="#使用本地依赖" class="headerlink" title="使用本地依赖"></a>使用本地依赖</h2><p>第0节-简介中提到，xmake可以使用来自系统包管理器、vcpkg、conan、conda等多个包管理器的包。这些包的引入丰富了xmake支持的第三方库源，即使xmake-repo未能收录的包，也可以通过这些方式间接引入。部分包在包描述文件中已经写有搜索部分，直接使用<code>add_requires</code>就可以自动从系统查找，例如<code>cuda</code>；而其他包则需要显示说明第三方包管理器源。引入其他包管理器的包基本语法仍是使用<code>add_requires</code>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;conan::poco/1.12.1&quot;</span>, &#123;alias = <span class="string">&quot;poco&quot;</span>,</span><br><span class="line">    configs = &#123;settings = &#123;<span class="string">&quot;compiler=gcc&quot;</span>, <span class="string">&quot;compiler.libcxx=libstdc++11&quot;</span>&#125;&#125;&#125;)</span><br><span class="line">add_requires(<span class="string">&quot;apt::libudev-dev&quot;</span>, &#123;alias = <span class="string">&quot;libudev&quot;</span>&#125;)</span><br><span class="line">add_requires(<span class="string">&quot;conda::openssl&quot;</span>, &#123;alias = <span class="string">&quot;openssl&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>各个包管理器的参数设置方式可以在官方文档中找到。这里设置alias别名的好处是后面使用<code>add_packages</code>添加包时较为简单，无需考虑包的来源。需要注意的是，Windows上包管理器安装的包需要注意其runtime是静态还是动态。xmake默认使用静态runtime，但是大部分其他包管理器默认使用动态runtime。可以使用如下语句切换xmake默认runtime为动态：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_runtimes(<span class="string">&quot;MD&quot;</span>)</span><br></pre></td></tr></table></figure><p>这一语句通常放在所有target声明之前，全局生效，以避免链接冲突。</p><p>对于包管理器未收录的包，xmake还支持从pkg-config文件和cmake文件中查找。其使用方法也类似于包管理器：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;pkg-config::cairo&quot;</span>, &#123;alias = <span class="string">&quot;cairo&quot;</span>&#125;)</span><br><span class="line">add_requires(<span class="string">&quot;cmake::Vulkan&quot;</span>, &#123;alias = <span class="string">&quot;vulkan&quot;</span>,</span><br><span class="line">    configs = &#123;envs = &#123;CMAKE_PREFIX_PATH = <span class="string">&quot;/usr/local/vulkan-sdk&quot;</span>&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>从cmake查找包的功能还不是很成熟，如果遇到问题，请在GitHub的讨论区或issue报告。</p><p>如果上述方案都不奏效，怎么办呢？一种办法是回归最原始的依赖管理——submodule形式，使用submodule将第三方库的源码也作为项目的一部分。这时可以写一个xmake.lua来编译第三方库，使用<code>includes</code>语句来引入第三方库，例如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">includes(<span class="string">&quot;third_party/dep1&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;example1&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;dep1&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;examples/example1.cpp&quot;</span>)</span><br></pre></td></tr></table></figure><p>这种方法对中小型依赖都比较方便。一般情况下，使用cmake 1000行左右的构建文件，使用xmake重写只用大概200行。另一种办法就是下一节要讲到的依赖仓库功能了。你可以自己编写自己的包描述文件，xmake会将你自己编写的包像已经收录到xmake-repo中一样处理。当然，如果能将你编写的包描述文件贡献到xmake-repo中造福后人，那就更好了！</p><h2 id="管理已安装的包"><a href="#管理已安装的包" class="headerlink" title="管理已安装的包"></a>管理已安装的包</h2><blockquote><p>Tips. xmake默认会将第三方库安装到<code>~/.xmake</code>文件夹下（Windows上为<code>C:\Users\&lt;username&gt;\Appdata\Local\.xmake</code>）。这一行为可以通过环境变量<code>XMAKE_PKG_CACHEDIR</code>和<code>XMAKE_PKG_INSTALLDIR</code>更改。</p></blockquote><p>xmake使用xrepo命令作为单独的包管理命令。xrepo的一些常用功能列举如下：</p><ul><li><code>xrepo search &lt;package&gt;</code>：用于搜索含有特定字符串的包。如果有浏览器，也可以使用<a href="https://link.zhihu.com/?target=https://xrepo.xmake.io/%23/">xrepo</a>网站的搜索功能。</li><li><code>xrepo info &lt;package&gt;</code>：用于查看包的详细信息。</li><li><code>xrepo scan</code>：用于查看所有已安装的包。</li><li><code>xrepo clean</code>：用于清理安装远程包时的缓存，以及清理一段时间内未使用过的包。</li><li><code>xrepo install &lt;package&gt;</code>：用于安装远程包到本地。可以使用<code>-f</code>参数声明远程包的构建选项。</li><li><code>xrepo remove &lt;package&gt;</code>：用于移除本地包。这一命令只会移除默认参数的本地包，要想完全移除，需要加上<code>--all</code>参数。</li></ul><p>xrepo命令还有一些非常强大的功能，这些功能将在后面的章节中展开。</p><h2 id="一些特殊的依赖库"><a href="#一些特殊的依赖库" class="headerlink" title="一些特殊的依赖库"></a>一些特殊的依赖库</h2><h3 id="OpenMP"><a href="#OpenMP" class="headerlink" title="OpenMP"></a>OpenMP</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;openmp&quot;</span>)</span><br></pre></td></tr></table></figure><p>可用的configs： - <code>runtime</code>：设置OpenMP提供商。有<code>default</code>和<code>custom</code>两种选项，默认使用第一种，即使用平台默认的OpenMP，对msvc为内置的OpenMP实现vcomp，对gcc采用libgomp，对clang采用libomp。如果想要使用其他的实现，可以设置该项为<code>custom</code>，然后自己手动链接其他openmp实现。 - <code>experimental</code>：启用实验性的OpenMP功能，目前仅对msvc生效。</p><h3 id="CUDA"><a href="#CUDA" class="headerlink" title="CUDA"></a>CUDA</h3><p>正常使用CUDA语言无需引入依赖，使用<code>add_files</code>添加.cu源文件即可。由于NVIDIA不开放CUDA的脚本安装，xmake并不执行CUDA的下载安装部分，使用CUDA需要用户自行在机器上安装好CUDA。如果CUDA Toolkit安装在默认位置，configure阶段可以直接设置使用的CUDA版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --cuda=11.7</span><br></pre></td></tr></table></figure><p>否则，需要声明CUDA Toolkit的安装位置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --cuda=/path/to/cuda-toolkit</span><br></pre></td></tr></table></figure><p>当使用CUDA提供的库（cublas，cusolver等）时，这才需要引入依赖。引入CUDA依赖的语句为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;cuda&quot;</span>, &#123;configs = &#123;utils = &#123;<span class="string">&quot;cublas&quot;</span>, <span class="string">&quot;cusolver&quot;</span>, ...&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>之后正常使用<code>add_packages</code>添加依赖即可。</p><h3 id="Boost"><a href="#Boost" class="headerlink" title="Boost"></a>Boost</h3><p>Boost是一个很多库的集合，xmake中使用configs控制需要安装的组件。如果只使用Boost纯头文件的部分，直接<code>add_requires(&quot;boost&quot;)</code>即可。如果用到Boost需要编译安装的组件（例如filesystem，serialization）可以用如下语句：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;boost&quot;</span>, &#123;configs = &#123;filesystem = <span class="literal">true</span>, serialization = <span class="literal">true</span>, ...&#125;&#125;)</span><br></pre></td></tr></table></figure><p>如果图方便，可以直接安装boost的所有组件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;boost&quot;</span>, &#123;configs = &#123;all = <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>很多第三方库依赖boost。为了避免菱形依赖问题，最好能自行分析好同时满足项目要求与第三方库要求的boost配置，然后使用<code>add_requireconfs</code>进行设置。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> boost_configs = &#123;filesystem = <span class="literal">true</span>, serialization = <span class="literal">true</span>, ...&#125;</span><br><span class="line">add_requires(<span class="string">&quot;boost 1.79.0&quot;</span>, &#123;configs = boost_configs&#125;)</span><br><span class="line">add_requireconfs(<span class="string">&quot;*.boost&quot;</span>, &#123;version = <span class="string">&quot;1.79.0&quot;</span>, configs = boost_configs&#125;)</span><br></pre></td></tr></table></figure><h3 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h3><p>Qt是一个非常庞大的C++类库，xmake针对Qt做了特殊处理，部分语句有所变化。类似CUDA，Qt的安装较为复杂，最好能自行安装好Qt，由xmake来查找。xmake目前提供了部分Qt库的下载安装功能，但尚不完整。安装Qt后，可以在configure阶段设置Qt安装位置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --qt=/path/to/qt</span><br></pre></td></tr></table></figure><p>Qt不仅提供了一系列类库，还提供了moc、uic等代码生成器，并通过这些生成器对C++语言进行了扩展，因此<code>add_requires</code>无法满足Qt的需要。这时就该<code>add_rules</code>来发挥作用了。对于一个Qt Widget Application，写法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;qtmain&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_rules(<span class="string">&quot;qt.widget&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.h&quot;</span>) <span class="comment">-- pass header files to qt meta-object-compiler(moc)</span></span><br><span class="line">    add_frameworks(<span class="string">&quot;QtCore&quot;</span>, <span class="string">&quot;QtGui&quot;</span>, <span class="string">&quot;QtWidgets&quot;</span>) <span class="comment">-- set enabled qt frameworks</span></span><br></pre></td></tr></table></figure><p>关于Qt程序的更多细节，请参考官方文档。</p><blockquote><p>Tips. <code>add_frameworks</code>的本来作用是在Mac OS上添加Framework依赖，例如<code>add_frameworks(&quot;CoreFoundation&quot;)</code>。只有在Qt程序中才可以用来表示启用Qt Framework。</p></blockquote><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>如果系统已安装有python3，可以用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;python 3.x&quot;</span>, &#123;system = <span class="literal">true</span>, kind = <span class="string">&quot;binary&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>引入python解释器作为依赖。如果xmake没有找到python解释器，就会报错。如果要引入python作为库链接到程序，去掉<code>kind</code>设定即可：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;python 3.x&quot;</span>, &#123;system = <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p>xmake还提供python的下载安装功能。如果不想使用系统上的python，可以使用xmake安装的python：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(<span class="string">&quot;python 3.x&quot;</span>, &#123;system = <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><p>如果使用xmake安装的python，在项目根目录运行<code>xrepo env shell</code>即可进入虚拟环境，执行<code>python</code>进入python解释器，执行<code>pip install numpy ...</code>来安装python的各种包。在虚拟环境执行的操作都会保存，直到这次python安装被清理。运行<code>xrepo remove --all python</code>可以交互式地移除xmake安装的python包。</p><blockquote><p>Tips. 如果系统上尚未安装python，xmake提供了一键下载安装激活python环境的命令： <code>shell $ xrepo env -b python3 shell</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 02. 编译选项</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2002.%20%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2002.%20%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9.html</url>
      
        <content type="html"><![CDATA[<h3 id="创建空工程"><a href="#创建空工程" class="headerlink" title="创建空工程"></a>创建空工程</h3><p>xmake提供了<code>xmake create</code>命令，可以很方便的快速创建基于c&#x2F;c++, swift, objc等各种语言的空工程项目，比如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ xmake create test create test ...   </span><br><span class="line">[+]: xmake.lua   </span><br><span class="line">[+]: src/main.cpp   </span><br><span class="line">[+]: .gitignore create ok!</span><br></pre></td></tr></table></figure><p>默认会创建一个c++的hello world工程，根目录下会生成一个xmake.lua用于描述项目的构建规则。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.debug&quot;, &quot;mode.release&quot;) </span><br><span class="line">target(&quot;test&quot;) </span><br><span class="line">    set_kind(&quot;binary&quot;) </span><br><span class="line">    add_files(&quot;src/*.cpp&quot;)</span><br></pre></td></tr></table></figure><p>这是一个非常简单的xmake.lua描述，<code>target(&quot;test&quot;)</code>定义了一个子工程模块test，每个target会生成一个对应的目标文件，此处的binary类型，指定创建一个最基础的可执行文件。</p><p>而最上面的<code>mode.debug</code>和<code>mode.release</code>规则设置，是可选设置，但是通常我们都会建议加上，这样默认就可以生效两种常用的构建模式：debug和release</p><h3 id="执行编译"><a href="#执行编译" class="headerlink" title="执行编译"></a>执行编译</h3><p>通常我们如果只是编译当前主机环境的可执行文件，只需要执行xmake这个命令就可以了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xmake </span><br><span class="line">checking for the Xcode directory ... /Applications/Xcode.app </span><br><span class="line">checking for the SDK version of Xcode ... 10.15 </span><br><span class="line">[  0%]: ccache compiling.release src/main.cpp </span><br><span class="line">[100%]: linking.release test</span><br></pre></td></tr></table></figure><p>xmake默认会检测当前环境已存在的构建环境，比如笔者当前的xcode环境，然后默认采用release模式编译，如果设置了<code>mode.release</code>规则，那么就会生效。</p><h3 id="编译模式切换"><a href="#编译模式切换" class="headerlink" title="编译模式切换"></a>编译模式切换</h3><p>而如果我们要切到<code>mode.debug</code>编译，只需要：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake f -m debug</span><br><span class="line">$ xmake</span><br></pre></td></tr></table></figure><p>其中，<code>xmake f</code>是<code>xmake config</code>命令的简写，用来快速的切换配置，如果上手之后，通常采用简写会更加方便，更多命令的简写，都可执行<code>xmake --help</code>查看。</p><h3 id="创建其他模板工程"><a href="#创建其他模板工程" class="headerlink" title="创建其他模板工程"></a>创建其他模板工程</h3><p><code>xmake create</code>还可以用来创建各种其他类型的工程项目，我们可以敲<code>xmake create --help</code></p><p>可以通过<code>-l/--language</code>来指定工程语言，而<code>-t/--template</code>用来指定闯将的工程模板类型。</p><p>比如，我们创建一个基于c的静态库项目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ xmake create -l c -t static test</span><br><span class="line">create test ...</span><br><span class="line">  [+]: xmake.lua</span><br><span class="line">  [+]: src/interface.c</span><br><span class="line">  [+]: src/interface.h</span><br><span class="line">  [+]: src/test.c</span><br><span class="line">  [+]: src/main.cpp</span><br><span class="line">  [+]: .gitignore</span><br><span class="line">create ok!</span><br></pre></td></tr></table></figure><p>我们也可以创建基于qt的quickapp项目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ xmake create -l c++ -t qt.quickapp test</span><br><span class="line">create test ...</span><br><span class="line">  [+]: xmake.lua</span><br><span class="line">  [+]: src/interface.c</span><br><span class="line">  [+]: src/main.qml</span><br><span class="line">  [+]: src/interface.h</span><br><span class="line">  [+]: src/test.c</span><br><span class="line">  [+]: src/main.cpp</span><br><span class="line">  [+]: src/qml.qrc</span><br><span class="line">  [+]: .gitignore</span><br><span class="line">create ok!</span><br></pre></td></tr></table></figure><p>除了c&#x2F;c++项目，xmake还支持其他语言的项目编译，但xmake重点还是在c&#x2F;c++上，支持其他语言也主要是为了支持跟c&#x2F;c++进行混合编译，毕竟其他语言向rust什么的官方有提供更好的构建方案。</p><p>不过我们还是可以使用xmake来尝试编译他们：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ xmake create -l rust test</span><br><span class="line">create test ...</span><br><span class="line">  [+]: xmake.lua</span><br><span class="line">  [+]: src/main.rs</span><br><span class="line">  [+]: .gitignore</span><br><span class="line">create ok!</span><br><span class="line"></span><br><span class="line">$ xmake</span><br><span class="line">checking for the architecture ... x86_64</span><br><span class="line">checking for the Xcode directory ... /Applications/Xcode.app</span><br><span class="line">checking for the SDK version of Xcode ... 10.15</span><br><span class="line">[  0%]: linking.release test</span><br></pre></td></tr></table></figure><h3 id="运行生成目标"><a href="#运行生成目标" class="headerlink" title="运行生成目标"></a>运行生成目标</h3><p>xmake也提供了run命令，直接运行生成后的可执行文件，用于方便快速的进行测试，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake run</span><br><span class="line">hello xmake!</span><br></pre></td></tr></table></figure><h3 id="添加运行环境变量"><a href="#添加运行环境变量" class="headerlink" title="添加运行环境变量"></a>添加运行环境变量</h3><p>我们也可以在xmake.lua中通过<code>add_runenvs</code>接口来添加设置默认运行target程序的环境变量。</p><p>所以，对于PATH这种，通过此接口追加值是非常方便的，而且此接口支持多值设置，所以通常就是用来设置带有path sep的多值env。。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_runenvs(&quot;PATH&quot;, &quot;/tmp/bin&quot;, &quot;xxx/bin&quot;)</span><br><span class="line">    add_runenvs(&quot;LD_LIBRARY_PATH&quot;, &quot;/tmp/lib&quot;, &quot;xxx/lib&quot;)</span><br></pre></td></tr></table></figure><p>更多关于此接口的描述，可以看下文档：<a href="https://link.zhihu.com/?target=https://xmake.io/%23/zh-cn/manual/project_target?id=targetadd_runenvs">add_runenvs接口文档</a></p><h3 id="自定义运行逻辑"><a href="#自定义运行逻辑" class="headerlink" title="自定义运行逻辑"></a>自定义运行逻辑</h3><p>如果单纯的环境设置，以及默认的加载运行规则不满足需求，我们可以通过定制化<code>on_run</code>脚本，实现更加复杂的运行逻辑：</p><p>例如，运行安装好的apk程序：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    -- ...</span><br><span class="line">    -- 设置自定义运行脚本，自动运行安装好的app程序，并且自动获取设备输出信息</span><br><span class="line">    on_run(function (target) </span><br><span class="line">        os.run(&quot;adb shell am start -n com.demo/com.demo.DemoTest&quot;)</span><br><span class="line">        os.run(&quot;adb logcat&quot;)</span><br><span class="line">    end)</span><br></pre></td></tr></table></figure><h3 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h3><h3 id="命令行调试"><a href="#命令行调试" class="headerlink" title="命令行调试"></a>命令行调试</h3><p>我们也可以传递<code>-d</code>参数，调用gdb&#x2F;lldb等调试器程序，加载目标文件进行调试：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake run -d</span><br></pre></td></tr></table></figure><p>xmake将会使用系统自带的调试器去加载程序运行，目前支持：lldb, gdb, windbg, vsjitdebugger, ollydbg 等各种调试器。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[lldb]$target create &quot;build/hello&quot;</span><br><span class="line">Current executable set to &#x27;build/hello&#x27; (x86_64).</span><br><span class="line">[lldb]$b main</span><br><span class="line">Breakpoint 1: where = hello`main, address = 0x0000000100000f50</span><br><span class="line">[lldb]$r</span><br><span class="line">Process 7509 launched: &#x27;/private/tmp/hello/build/hello&#x27; (x86_64)</span><br><span class="line">Process 7509 stopped</span><br><span class="line">* thread #1: tid = 0x435a2, 0x0000000100000f50 hello`main, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1</span><br><span class="line">    frame #0: 0x0000000100000f50 hello`main</span><br><span class="line">hello`main:</span><br><span class="line">-&gt;  0x100000f50 &lt;+0&gt;:  pushq  %rbp</span><br><span class="line">    0x100000f51 &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class="line">    0x100000f54 &lt;+4&gt;:  leaq   0x2b(%rip), %rdi          ; &quot;hello world!&quot;</span><br><span class="line">    0x100000f5b &lt;+11&gt;: callq  0x100000f64               ; symbol stub for: puts</span><br><span class="line">[lldb]$</span><br></pre></td></tr></table></figure><h3 id="使用vscode进行断点调试"><a href="#使用vscode进行断点调试" class="headerlink" title="使用vscode进行断点调试"></a>使用vscode进行断点调试</h3><p>我们还可以通过<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-vscode">xmake-vscode</a>插件配合vscode来实现对c&#x2F;c++项目的断点调试支持。</p><p>另外我们还需要依赖vscode的C++插件才能进行调试支持，不过由于开发c&#x2F;c++程序，这个插件几乎是必需，所以并没有太大问题。</p><p>就算没有安装此插件，xmake-vscode也会加载lldb&#x2F;gdb&#x2F;vsjitdebugger等系统调试器，直接加载调试。</p><p><img src="https://pic1.zhimg.com/80/v2-c4a72bac142cff2479d2af9511396990_1440w.webp"></p><h2 id="常用的编译器参数"><a href="#常用的编译器参数" class="headerlink" title="常用的编译器参数"></a>常用的编译器参数</h2><p>在xmake中添加编译参数的通用做法是使用<code>add_&lt;language&gt;flags</code>家族的几个函数：</p><ul><li><code>add_cflags</code>：添加C编译器的编译参数</li><li><code>add_cxxflags</code>：添加C++编译器的编译参数</li><li><code>add_cuflags</code>：添加CUDA编译器的编译参数</li><li><code>add_asflags</code>：添加汇编语言的汇编参数</li><li><code>add_cxflags</code>：同时对C编译器和C++编译器启用的编译参数</li><li><code>add_ldflags</code>：添加二进制文件链接参数</li><li><code>add_arflags</code>：添加静态库生成参数</li><li><code>add_shflags</code>：添加动态链接库生成参数</li></ul><p>在使用这些函数添加编译参数时，xmake会自动检查编译参数的可用性，并对当前编译器启用可用的参数。若想略过这一检查过程，可以使用<code>force</code>参数指定。一个简单例子如下。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/main.cpp&quot;</span>)</span><br><span class="line">    add_cxxflags(<span class="string">&quot;-fno-strict-aliasing&quot;</span>, <span class="string">&quot;-fno-implicit-templates&quot;</span>)</span><br><span class="line">    add_cxxflags(<span class="string">&quot;-march=native&quot;</span>, &#123;force = <span class="literal">true</span>&#125;) <span class="comment">-- skip the check</span></span><br></pre></td></tr></table></figure><blockquote><p>Tips. Lua语言使用双横线<code>--</code>作为单行注释的标记。多行注释则使用<code>--[[</code>作为开头，<code>--]]</code>作为结束。</p></blockquote><p>xmake对一些常用的参数作了抽象，对这些参数无需手动指定其内容，实际编译时这些参数会自动根据编译器不同而变化。下面介绍其中的一些。</p><h3 id="指定语言版本"><a href="#指定语言版本" class="headerlink" title="指定语言版本"></a>指定语言版本</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_languages(<span class="string">&quot;c11&quot;</span>, <span class="string">&quot;cxx20&quot;</span>)</span><br></pre></td></tr></table></figure><p>xmake中使用<code>set_languages</code>语句设置语言版本。与大部分声明不同，设置语言版本的语句通常放在所有target声明之前，全局生效，否则容易导致标准库冲突。xmake中还提供了一个特殊的版本：<code>set_languages(&quot;cxxlatest&quot;)</code>，对msvc展开为<code>-std:c++latest</code>，而对gcc&#x2F;clang则自动检测当前编译器支持的C++标准并使用其中最新的标准。</p><h3 id="添加头文件目录"><a href="#添加头文件目录" class="headerlink" title="添加头文件目录"></a>添加头文件目录</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_includedirs(<span class="string">&quot;include&quot;</span>)</span><br></pre></td></tr></table></figure><p>头文件目录是C&#x2F;C++编译器查找头文件的根目录，xmake中使用<code>add_includedirs</code>指定。这一语句通常对单个target生效，在msvc、gcc、clang均展开为<code>-Iinclude</code>。</p><h3 id="添加链接目录与链接库"><a href="#添加链接目录与链接库" class="headerlink" title="添加链接目录与链接库"></a>添加链接目录与链接库</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_linkdirs(<span class="string">&quot;ext/lib&quot;</span>)</span><br><span class="line">add_links(<span class="string">&quot;myext&quot;</span>)</span><br><span class="line">add_syslinks(<span class="string">&quot;pthread&quot;</span>, <span class="string">&quot;m&quot;</span>)</span><br></pre></td></tr></table></figure><p>链接目录是链接器查找第三方链接库的目录，xmake中使用<code>add_linkdirs</code>指定，而第三方链接库则使用<code>add_links</code>指定。有一些第三方链接库是系统提供的，这些库需要放在链接顺序的末尾以规避链接顺序问题，这时可使用<code>add_syslinks</code>来指定。通过<code>add_syslinks</code>添加的链接库会在所有通过<code>add_links</code>添加的链接库之后链接。</p><h3 id="添加预定义宏"><a href="#添加预定义宏" class="headerlink" title="添加预定义宏"></a>添加预定义宏</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_defines(<span class="string">&quot;MYMACRO=hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>预定义宏是C&#x2F;C++编译器在预处理阶段加入的额外宏定义，可以在编译时从命令行传入。这个功能是C&#x2F;C++中通过选项控制编译内容的最常见方法。xmake中使用<code>add_defines</code>来加入预定义宏，例如上面的语句将展开为<code>-DMYMACRO=hello</code>。当预定义宏含有空格或歧义字符时，需要用户处理转义：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_defines(<span class="string">&quot;MYMACRO=\&quot;hello world\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="设置warning等级"><a href="#设置warning等级" class="headerlink" title="设置warning等级"></a>设置warning等级</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_warnings(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">set_warnings(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><p>xmake中使用<code>set_warnings</code>来设置编译器警告的等级。例如，上述代码在gcc上展开为<code>-Wall -Werror</code>。对msvc，xmake将自动将警告等级转换为msvc对应的级别，上述级别在msvc的对应为<code>-W3 -WX</code>。需要注意的一点是，为了避免警告刷屏，xmake默认不显示警告信息，除非设置<code>set_warnings(&quot;error&quot;)</code>将警告视为错误。要显示警告，可以运行<code>xmake -w</code>来查看。</p><h3 id="设置optimize等级"><a href="#设置optimize等级" class="headerlink" title="设置optimize等级"></a>设置optimize等级</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_optimize(<span class="string">&quot;faster&quot;</span>)</span><br></pre></td></tr></table></figure><p>通常情况下，引入mode.debug与mode.release后就无需单独设置optimize等级了。但是对于希望更精细优化等级控制的开发者而言，可能需要手动设置optimize等级。xmake通过<code>set_optimize</code>函数提供了4个预定义的optimize等级：<code>none</code>、<code>faster</code>、<code>fastest</code>、<code>smallest</code>。一般情况，即使需要这些等级，也用不着直接调用<code>set_optimize</code>，因为内置的mode并不只有debug和release，对应于这些等级有：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.releasedbg&quot;</span>, <span class="string">&quot;mode.release&quot;</span>, <span class="string">&quot;mode.minsizerel&quot;</span>)</span><br></pre></td></tr></table></figure><p>在xmake的configure过程，运行<code>xmake config --mode &lt;mode&gt;</code>即可在不同的优化等级之间切换。更多的内置mode可运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake show -l buildmodes</span><br></pre></td></tr></table></figure><p>来查看。</p><h3 id="一个完整的示例"><a href="#一个完整的示例" class="headerlink" title="一个完整的示例"></a>一个完整的示例</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">set_languages(<span class="string">&quot;cxxlatest&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_includedirs(<span class="string">&quot;ext/include&quot;</span>)</span><br><span class="line">    add_linkdirs(<span class="string">&quot;ext/lib&quot;</span>)</span><br><span class="line">    add_links(<span class="string">&quot;myext&quot;</span>)</span><br><span class="line">    add_syslinks(<span class="string">&quot;pthread&quot;</span>, <span class="string">&quot;m&quot;</span>)</span><br><span class="line">    add_defines(<span class="string">&quot;MYMACRO=\&quot;hello world\&quot;&quot;</span>)</span><br><span class="line">    set_warnings(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;error&quot;</span>)</span><br><span class="line">    set_optimize(<span class="string">&quot;smallest&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/**.cpp&quot;</span>) <span class="comment">-- recursively add all .cpp files in src folder and its subfolders</span></span><br><span class="line">    add_cxxflags(<span class="string">&quot;-march=native&quot;</span>, &#123;force = <span class="literal">true</span>&#125;) <span class="comment">-- skip the check</span></span><br></pre></td></tr></table></figure><p>运行<code>xmake -v</code>，看看xmake实际执行的编译命令吧！（由于libmyext.a或者myext.lib并不存在，这里编译会失败。）</p><h2 id="通过选择与循环添加编译器参数"><a href="#通过选择与循环添加编译器参数" class="headerlink" title="通过选择与循环添加编译器参数"></a>通过选择与循环添加编译器参数</h2><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><p>Lua语言中选择语句的结构如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition1&gt; <span class="keyword">then</span></span><br><span class="line">    &lt;task1&gt;</span><br><span class="line"><span class="keyword">elseif</span> &lt;condition2&gt; <span class="keyword">then</span></span><br><span class="line">    &lt;task2&gt;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &lt;task3&gt;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这一结构可以直接在xmake.lua中使用，在处理跨平台编译问题时尤为重要。例如，要在windows上和linux上定义不同的宏，可以这样写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set_allowedplats(<span class="string">&quot;windows&quot;</span>, <span class="string">&quot;linux&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/**.cpp&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> is_plat(<span class="string">&quot;windows&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_defines(<span class="string">&quot;PLAT_WINDOWS&quot;</span>)</span><br><span class="line">    <span class="keyword">elseif</span> is_plat(<span class="string">&quot;linux&quot;</span>) <span class="keyword">then</span></span><br><span class="line">        add_defines(<span class="string">&quot;PLAT_LINUX&quot;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>其中<code>set_allowedplats</code>用于限定支持的平台。可以注意到，这里用到了<code>is_plat</code>来判断编译的目标平台。xmake提供了如下几个常用条件判断语句：</p><ul><li><code>is_plat</code>：判断编译的目标平台。configure阶段选定。</li><li><code>is_host</code>：判断编译器的宿主平台（交叉编译时不同于目标平台）。</li><li><code>is_arch</code>：判断编译的目标架构。configure阶段选定。</li><li><code>is_mode</code>：判断configure阶段选定的编译模式。</li><li><code>is_kind</code>：判断configure阶段选定的默认链接库类型。</li><li><code>has_config</code>：判断option是否被启用。这一语句的用法详见第5节-项目选项。</li></ul><blockquote><p>Tips. 这些判断支持Lua正则表达式匹配。这一功能的一个重要用途是判断目标架构是否为64位：<code>is_arch(&quot;.+64.*&quot;)</code>。关于Lua正则表达式的更多信息，请参考Lua语言文档。</p></blockquote><p>这些语句可以通过逻辑运算形成复合表达式。Lua中逻辑判断的混合使用<code>and</code>、<code>or</code>和<code>not</code>运算符。例如，要限定windows系统x64架构，可以写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> is_plat(<span class="string">&quot;windows&quot;</span>) <span class="keyword">and</span> is_arch(<span class="string">&quot;x64&quot;</span>) <span class="keyword">then</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>xmake在各平台上支持的各架构名称可以运行如下命令查看：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake show -l architectures</span><br></pre></td></tr></table></figure><p>前面提到，<code>plat</code>、<code>arch</code>、<code>mode</code>、<code>kind</code>都是可以在configure阶段修改的。前两个参数的修改可以支持交叉编译时选择不同的平台与架构，后两个参数则可以调整编译模式以及默认链接库类型。也就是说，configure阶段的完整写法应该是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --plat=... --arch=... --mode=... --kind=... ...</span><br><span class="line">$ xmake f -p ... -a ... -m ... -k ... ... # same with above</span><br></pre></td></tr></table></figure><p>实际使用大部分情况不需要这么复杂的设置，非交叉编译时plat和arch可以不用声明，只有mode默认为release、kind默认为static可能需要修改。</p><blockquote><p>Tips. Windows上使用mingw也算交叉编译，所以需要运行<code>xmake f -p mingw</code>，这就是第1节中提到的那个命令的由来。</p></blockquote><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>Lua语言支持三种循环结构：<code>for</code>循环、<code>while</code>循环与<code>repeat</code>循环。xmake中常用第一种结构中的table循环，即<code>for</code>循环中的table循环。</p><p>说循环结构之前，得先说说Lua语言的变量系统。Lua语言声明变量的方式如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> b = a + <span class="number">1</span></span><br><span class="line"><span class="keyword">local</span> v = &#123;a, b, b + <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">local</span> m = &#123;first = a, second = b&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>local</code>关键字表示声明变量为局部变量，<code>=</code>用于赋值，常用的四则运算与比较运算符除了不等关系以外都与C&#x2F;C++一致。Lua中使用<code>~=</code>表示不等判断。Lua中的变量有nil、boolean、数值、字符串、table、function等，table还同时是数组（类似std::vector）和映射（类似std::map）。需要注意的一点是，Lua中数组的下标从1开始。Lua中使用运算符<code>#</code>来获取table的尺寸：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> len_v = #v</span><br></pre></td></tr></table></figure><p>关于Lua语言的更多内容请参考<a href="https://link.zhihu.com/?target=https://www.lua.org/manual/5.4/manual.html">Lua官方文档</a>。</p><p><code>for</code>循环中table循环结构如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(&lt;<span class="built_in">table</span>-vector&gt;) <span class="keyword">do</span></span><br><span class="line">    &lt;task-vector&gt;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> name, value <span class="keyword">in</span> <span class="built_in">pairs</span>(&lt;<span class="built_in">table</span>-map&gt;) <span class="keyword">do</span></span><br><span class="line">    &lt;task-map&gt;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里<code>ipairs</code>和<code>pairs</code>是Lua的标准库函数，它们分别被用来遍历数组型table和映射型table。这一功能常常可以用来简化xmake.lua的书写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> supported_platform = &#123;<span class="string">&quot;windows&quot;</span>, <span class="string">&quot;macosx&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;mingw&quot;</span>&#125;</span><br><span class="line">set_allowedplats(supported_platform) <span class="comment">-- xmake functions can accept table as input</span></span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/**.cpp&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> _, p <span class="keyword">in</span> <span class="built_in">ipairs</span>(supported_platform) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> is_plat(p) <span class="keyword">then</span></span><br><span class="line">            add_defines(<span class="string">&quot;PLAT_&quot;</span> .. p:<span class="built_in">upper</span>())</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这里用到了Lua的两个特性：字符串拼接运算符<code>..</code>以及函数调用运算符<code>:</code>。<code>..</code>用于拼接两个字符串，将其合成一个；而<code>p:upper()</code>返回字符串<code>p</code>的全大写形式。例如，当<code>p</code>为<code>&quot;windows&quot;</code>时，添加的编译参数为<code>-DPLAT_WINDOWS</code>。对这些特性感兴趣的读者可以参考Lua文档自行研究。</p><h3 id="编译参数在target间的传递"><a href="#编译参数在target间的传递" class="headerlink" title="编译参数在target间的传递"></a>编译参数在target间的传递</h3><p>当存在多个target时，往往target之间存在一定依赖关系。xmake中使用<code>add_deps</code>来描述target间的依赖关系。我们用一个例子来说明这种情况。建立目录结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root</span><br><span class="line">|- include</span><br><span class="line">    |- mylib.h</span><br><span class="line">|- src</span><br><span class="line">    |- mylib.cpp</span><br><span class="line">    |- myexe.cpp</span><br><span class="line">|- xmake.lua</span><br></pre></td></tr></table></figure><p>其中mylib.h包含函数<code>myfunc</code>声明，mylib.cpp包含函数<code>myfunc</code>定义，myexe.cpp使用<code>myfunc</code>。xmake.lua文件结构如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;cxx20&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;static&quot;</span>)</span><br><span class="line">    add_includedirs(<span class="string">&quot;include&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/mylib.cpp&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexe&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/myexe.cpp&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;mylib&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>add_deps</code>将<code>mylib</code>设置为<code>myexe</code>的依赖，编译时将先链接<code>mylib</code>，再链接<code>myexe</code>，并在<code>myexe</code>链接时自动链接到libmylib.a或者mylib.lib（取决于平台）。但是，这么写会编译报错找不到’mylib.h’文件！为什么呢？因为”include”这个文件夹仅被设置为<code>mylib</code>的头文件目录，而没有被设置成<code>myexe</code>的头文件目录。为了解决这个问题，需要做一个小小的改动。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;cxx20&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;static&quot;</span>)</span><br><span class="line">    add_includedirs(<span class="string">&quot;include&quot;</span>, &#123;public = <span class="literal">true</span>&#125;)</span><br><span class="line">    add_files(<span class="string">&quot;src/mylib.cpp&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexe&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/myexe.cpp&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;mylib&quot;</span>)</span><br></pre></td></tr></table></figure><p>再次输入<code>xmake</code>，发现可以正确编译了！这是因为<code>mylib</code>的头文件目录被设置为”public”，也就是说，这一属性会被依赖于<code>mylib</code>的<code>myexe</code>继承。对于<code>add_defines</code>、<code>add_cxflags</code>等接口，也有类似的设置选项。</p><p>在依赖时，xmake默认会将依赖项生成的库文件链接到当前target。然而，如果这一行为是不想要的，也可以通过选项来避免这一行为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;cxx20&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;mylib&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;static&quot;</span>)</span><br><span class="line">    add_includedirs(<span class="string">&quot;include&quot;</span>, &#123;public = <span class="literal">true</span>&#125;)</span><br><span class="line">    add_files(<span class="string">&quot;src/mylib.cpp&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;myexe&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/myexe.cpp&quot;</span>)</span><br><span class="line">    add_deps(<span class="string">&quot;mylib&quot;</span>, &#123;inherit = <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><p>这样一来<code>myexe</code>就不会链接到<code>mylib</code>了。</p><h1 id="切换编译模式"><a href="#切换编译模式" class="headerlink" title="切换编译模式"></a>切换编译模式</h1><h3 id="调试和发布模式"><a href="#调试和发布模式" class="headerlink" title="调试和发布模式"></a>调试和发布模式</h3><p>通常，如果我们是通过<code>xmake create</code>命令创建的项目，会在xmake.lua里面自动添加一行编译规则的配置，如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.release&quot;, &quot;mode.debug&quot;) </span><br><span class="line">target(&quot;hello&quot;) </span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br></pre></td></tr></table></figure><p>通过<code>add_rules</code>接口，我们默认添加了release和debug两个常用的内置规则，它们会在编译的时候附带上对应模式相关的一些编译flags，来开启优化用于发布或者调试编译。</p><p>如果仅仅执行了<code>xmake</code>命令，没有额外的配置，那么默认就会是release编译，等价于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xmake f -m release </span><br><span class="line">$ xmake</span><br><span class="line">[  0%]: ccache compiling.release src/main.cpp </span><br><span class="line">[100%]: linking.release test </span><br><span class="line">build ok!</span><br></pre></td></tr></table></figure><p>如果我们要切换到debug编译模式，只需要：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xmake f -m debug </span><br><span class="line">$ xmake </span><br><span class="line">[  0%]: ccache compiling.debug src/main.cpp </span><br><span class="line">[100%]: linking.debug test </span><br><span class="line">build ok!</span><br></pre></td></tr></table></figure><p>上面的<code>-m/--mode=</code>参数就是用来设置编译模式，会跟<code>mode.release</code>和<code>mode.debug</code>这两个规则做关联。</p><p>那么，他们是如何关联上的呢？我们可以先来看下这两个规则的内部实现：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">rule(&quot;mode.debug&quot;)</span><br><span class="line">    after_load(function (target)</span><br><span class="line">        if is_mode(&quot;debug&quot;) then</span><br><span class="line">            if not target:get(&quot;symbols&quot;) then</span><br><span class="line">                target:set(&quot;symbols&quot;, &quot;debug&quot;)</span><br><span class="line">            end</span><br><span class="line">            if not target:get(&quot;optimize&quot;) then</span><br><span class="line">                target:set(&quot;optimize&quot;, &quot;none&quot;)</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end)</span><br><span class="line"></span><br><span class="line">rule(&quot;mode.release&quot;)</span><br><span class="line">    after_load(function (target)</span><br><span class="line">        if is_mode(&quot;release&quot;) then</span><br><span class="line">            if not target:get(&quot;symbols&quot;) and target:targetkind() ~= &quot;shared&quot; then</span><br><span class="line">                target:set(&quot;symbols&quot;, &quot;hidden&quot;)</span><br><span class="line">            end</span><br><span class="line">            if not target:get(&quot;optimize&quot;) then</span><br><span class="line">                if is_plat(&quot;android&quot;, &quot;iphoneos&quot;) then</span><br><span class="line">                    target:set(&quot;optimize&quot;, &quot;smallest&quot;)</span><br><span class="line">                else</span><br><span class="line">                    target:set(&quot;optimize&quot;, &quot;fastest&quot;)</span><br><span class="line">                end</span><br><span class="line">            end</span><br><span class="line">            if not target:get(&quot;strip&quot;) then</span><br><span class="line">                target:set(&quot;strip&quot;, &quot;all&quot;)</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end)</span><br></pre></td></tr></table></figure><p>可以看到，在target被加载阶段，xmake会去判断用户对<code>xmake f --mode=xxx</code>的参数配置，如果通过<code>is_mode()</code>接口获取到是debug模式，那么会禁用相关优化并且启用符号输出。 而如果是release模式，那么会开启编译优化并且strip掉所有调试符号。</p><h3 id="定制化的模式配置"><a href="#定制化的模式配置" class="headerlink" title="定制化的模式配置"></a>定制化的模式配置</h3><p>当然，内置的这两规则默认设置的这些编译配置，只能满足大部分场景的常规需求，如果用户想要在不同的编译模式下定制化一些个人的编译配置，那么需要自己在xmake.lua做判断。</p><p>例如，我们想在release下也启用调试符号，那么只需要：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;release&quot;) then</span><br><span class="line">   set_symbols(&quot;debug&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>或者额外增加一些编译flags：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;release&quot;) then </span><br><span class="line">    add_cflags(&quot;-fomit-frame-pointer&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>注：如果用户自己的配置和<code>mode.release</code>内置的配置冲突，会优先使用用户的设置。</p><p>当然，我们也可以完全不去通过<code>add_rules(&quot;mode.debug&quot;, &quot;mode.release&quot;)</code>添加默认的配置规则，让用户完全自己控制模式配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">-- 如果当前编译模式是debug</span><br><span class="line">if is_mode(&quot;debug&quot;) then</span><br><span class="line"></span><br><span class="line">    -- 添加DEBUG编译宏</span><br><span class="line">    add_defines(&quot;DEBUG&quot;)</span><br><span class="line"></span><br><span class="line">    -- 启用调试符号</span><br><span class="line">    set_symbols(&quot;debug&quot;)</span><br><span class="line"></span><br><span class="line">    -- 禁用优化</span><br><span class="line">    set_optimize(&quot;none&quot;)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">-- 如果是release或者profile模式</span><br><span class="line">if is_mode(&quot;release&quot;, &quot;profile&quot;) then</span><br><span class="line"></span><br><span class="line">    -- 如果是release模式</span><br><span class="line">    if is_mode(&quot;release&quot;) then</span><br><span class="line"></span><br><span class="line">        -- 隐藏符号</span><br><span class="line">        set_symbols(&quot;hidden&quot;)</span><br><span class="line"></span><br><span class="line">        -- strip所有符号</span><br><span class="line">        set_strip(&quot;all&quot;)</span><br><span class="line"></span><br><span class="line">        -- 忽略帧指针</span><br><span class="line">        add_cxflags(&quot;-fomit-frame-pointer&quot;)</span><br><span class="line">        add_mxflags(&quot;-fomit-frame-pointer&quot;)</span><br><span class="line"></span><br><span class="line">    -- 如果是profile模式</span><br><span class="line">    else</span><br><span class="line">        -- 启用调试符号</span><br><span class="line">        set_symbols(&quot;debug&quot;)</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    -- 添加扩展指令集</span><br><span class="line">    add_vectorexts(&quot;sse2&quot;, &quot;sse3&quot;, &quot;ssse3&quot;, &quot;mmx&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="其他内置模式规则"><a href="#其他内置模式规则" class="headerlink" title="其他内置模式规则"></a>其他内置模式规则</h3><p>通过上文的例子，我们看到除了debug&#x2F;release模式，还加了个profile模式的配置判断，其实xmake也提供了对应的内置模式，还有哪些，我们具体来看下：</p><h3 id="mode-debug"><a href="#mode-debug" class="headerlink" title="mode.debug"></a>mode.debug</h3><p>为当前工程xmake.lua添加debug编译模式的配置规则，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.debug&quot;)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;debug&quot;) then </span><br><span class="line">    set_symbols(&quot;debug&quot;) </span><br><span class="line">    set_optimize(&quot;none&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们可以通过：<code>xmake f -m debug</code>来切换到此编译模式。</p><h3 id="mode-release"><a href="#mode-release" class="headerlink" title="mode.release"></a>mode.release</h3><p>为当前工程xmake.lua添加release编译模式的配置规则，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.release&quot;)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;release&quot;) then </span><br><span class="line">    set_symbols(&quot;hidden&quot;) </span><br><span class="line">    set_optimize(&quot;fastest&quot;) </span><br><span class="line">    set_strip(&quot;all&quot;) </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们可以通过：<code>xmake f -m release</code>来切换到此编译模式。</p><h3 id="mode-check"><a href="#mode-check" class="headerlink" title="mode.check"></a>mode.check</h3><p>为当前工程xmake.lua添加check编译模式的配置规则，一般用于内存检测，例如：</p><p>add_rules**(<strong>“mode.check”</strong>)**</p><p>相当于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;check&quot;) then</span><br><span class="line">    set_symbols(&quot;debug&quot;)</span><br><span class="line">    set_optimize(&quot;none&quot;)</span><br><span class="line">    add_cxflags(&quot;-fsanitize=address&quot;, &quot;-ftrapv&quot;)</span><br><span class="line">    add_mxflags(&quot;-fsanitize=address&quot;, &quot;-ftrapv&quot;)</span><br><span class="line">    add_ldflags(&quot;-fsanitize=address&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们可以通过：<code>xmake f -m check</code>来切换到此编译模式。</p><h3 id="mode-profile"><a href="#mode-profile" class="headerlink" title="mode.profile"></a>mode.profile</h3><p>为当前工程xmake.lua添加profile编译模式的配置规则，一般用于性能分析，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.profile&quot;)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;profile&quot;) then</span><br><span class="line">    set_symbols(&quot;debug&quot;)</span><br><span class="line">    add_cxflags(&quot;-pg&quot;)</span><br><span class="line">    add_ldflags(&quot;-pg&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们可以通过：<code>xmake f -m profile</code>来切换到此编译模式。</p><h3 id="mode-coverage"><a href="#mode-coverage" class="headerlink" title="mode.coverage"></a>mode.coverage</h3><p>为当前工程xmake.lua添加coverage编译模式的配置规则，一般用于覆盖分析，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_rules(&quot;mode.coverage&quot;)</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;coverage&quot;) then</span><br><span class="line">    add_cxflags(&quot;--coverage&quot;)</span><br><span class="line">    add_mxflags(&quot;--coverage&quot;)</span><br><span class="line">    add_ldflags(&quot;--coverage&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们可以通过：<code>xmake f -m coverage</code>来切换到此编译模式。</p><p>注：生成的gcno文件一般都是个obj所在目录对应的哦，因此需要从build目录下去找。</p><h3 id="扩展自己的编译模式"><a href="#扩展自己的编译模式" class="headerlink" title="扩展自己的编译模式"></a>扩展自己的编译模式</h3><p>xmake的模式配置，并没有固定值，用户可以随意传入和配置，只要<code>xmake f -m/--mode=xxx</code>传入的模式值和xmake.lua里面的<code>is_mode(&quot;xxx&quot;)</code>能对应上就行。</p><p>比如，我们设置了一个自己独有的编译模式<code>my_mode</code>，可以直接在命令行配置切换；</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ xmake f -m my_mode </span><br><span class="line">$ xmake </span><br><span class="line">[  0%]: ccache compiling.my_mode src/main.cpp </span><br><span class="line">[100%]: linking.my_mode test </span><br><span class="line">build ok!</span><br></pre></td></tr></table></figure><p>然后xmake.lua里面对相应的值进行判断即可：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if is_mode(&quot;my_mode&quot;) then </span><br><span class="line">    add_defines(&quot;ENABLE_MY_MODE&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="使用模式变量"><a href="#使用模式变量" class="headerlink" title="使用模式变量"></a>使用模式变量</h3><p>我们也可以直接在配置值中传递模式变量<code>$(mode)</code>，比如根据不同模式选择链接不同的库：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_links(&quot;xxx_$(mode)&quot;)</span><br></pre></td></tr></table></figure><p>上面的配置，如果是调试模式编译就会选择链接：<code>libxxx_debug.a</code>库，而release下就会链接<code>libxxx_release.a</code>，当然，我们也可以设置到库搜索路径中，根据目录来选择对应的库。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_linkdirs(&quot;lib/$(mode)&quot;)</span><br><span class="line">    add_links(&quot;xxx&quot;)</span><br></pre></td></tr></table></figure><p>另外，我们可以通过<code>get_config(&quot;mode&quot;)</code>直接获取到传入的模式配置值，并且这几种获取方式，在自定义脚本也是同样有效的哦，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">target(&quot;test&quot;)</span><br><span class="line">    set_kind(&quot;binary&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    on_load(function (target)</span><br><span class="line">        if is_mode(&quot;release&quot;) then</span><br><span class="line">            print(get_config(&quot;mode&quot;), &quot;$(mode)&quot;)</span><br><span class="line">        end</span><br><span class="line">    end)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 00. 简介</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2000.%20%E7%AE%80%E4%BB%8B.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2000.%20%E7%AE%80%E4%BB%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是构建系统"><a href="#什么是构建系统" class="headerlink" title="什么是构建系统?"></a>什么是构建系统?</h2><p>程序从一段代码到可执行文件的构建过程，往往中间要经过编译、链接等步骤，因此在不同的运行平台上需要各种各样的编译器和链接器。除了编译与链接之外，在构建过程中经常还需要调整配置、管理依赖、生成代码、打包代码库等操作。管理构建过程的程序叫做构建系统。构建系统并不执行编译本身，只是调用编译器和其他工具来执行构建任务。通常构建系统会使用<strong>配置文件</strong>来描述构建过程。几乎所有编译型编程语言都有它们的构建系统，例如C&#x2F;C++的autotools、cmake、xmake等，Java的maven、gradle，Rust的cargo等。解释型编程语言通常在执行时即时编译并运行，因此其构建系统的重心不在编译链接而在构建过程中的其他需求（管理依赖、打包、优化等），例如Python的pip、conda，JavaScript的npm、yarn等。</p><h2 id="为什么需要构建系统？"><a href="#为什么需要构建系统？" class="headerlink" title="为什么需要构建系统？"></a>为什么需要构建系统？</h2><p>理论上只需要一个文本编辑器，一组合适的编译器与链接器就能完成开发任务了。然而，实际上在开发过程中会遇到很多麻烦的工作，而构建系统的任务就是将这些麻烦的工作自动化，解放程序员的双手。构建系统至少有如下几个作用：</p><ol><li>编写大型系统时，需要<strong>保证构建的可重复性</strong>。一个地方的flag出错，可能导致整个构建过程失败。只有将构建过程写进文件中，把构建过程交给构建系统，才能保证构建过程中使用的指令的稳定性。当然由于编译环境和外部依赖不同，使用构建系统也不能完全保证构建的可重复性，这一点需要程序员来保证。</li><li>编码过程中一个合适的IDE可以大大提高编码效率，而IDE需要一些构建描述文件才能“认识”项目。让构建系统来<strong>生成构建描述文件</strong>，则无需在每次增删文件时都手动修改构建描述文件，大大减少无意义的重复工作。</li><li>依赖管理是开发过程中最令人头疼的问题之一。手动引入第三方依赖库很容易遇到版本不对、编译不过、链接繁琐、更新困难、难以调整等问题。使用构建系统来<strong>管理依赖</strong>，大大降低了依赖引入和更新过程中的繁琐步骤。</li><li>开发过程中同一个项目常常需要根据开发环境与用户需要，使用不同的参数和宏来进行构建，生成不同参数的可执行文件。构建系统可以使用option来<strong>管理构建参数</strong>，方便随时切换，解放双手。</li><li>当项目有多个开发者时，一份清晰的构建系统配置文件能大大<strong>降低交流成本</strong>，尤其是对于开源项目，构建系统将成为让别人了解项目结构的第一站。当需要将生成的文件打包分发时，构建系统的打包功能也非常实用。</li></ol><p>对单文件的简单程序，确实不需要构建系统。但是，一旦开发的项目需要大量文件，或者需要引入依赖，或者需要多组构建参数配置，构建系统将成为不可或缺的一部分。</p><h2 id="C-x2F-C-的构建系统简史"><a href="#C-x2F-C-的构建系统简史" class="headerlink" title="C&#x2F;C++的构建系统简史"></a>C&#x2F;C++的构建系统简史</h2><p>C&#x2F;C++从出现一来已经过了几十年，其构建系统也经历了多个阶段的演变。</p><h3 id="第一代：Make"><a href="#第一代：Make" class="headerlink" title="第一代：Make"></a>第一代：Make</h3><p>Make诞生于1976年，此后一直是UNIX系统的自带构建工具，由于UNIX的火爆，Make很快成为了C的标准构建工具。在Make出现之前，大家通常通过shell script来管理构建过程，写起来麻烦、难以修改。Make后来衍生出了多种实现，如GNU Make（gmake，目前是Linux与MacOS上make的标准实现），Microsoft nmake等等。Make创造了一个DSL，使用名为Makefile的文件来描述构建过程，其编译的主要步骤如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">PREFIX=/usr/local make install</span><br></pre></td></tr></table></figure><p>Make最大的特点是引入了<strong>依赖机制</strong>：只有当被依赖的文件更新时，才重新编译对应的中间文件。这一机制大大减少了中大型项目等待编译的时间。美中不足的是，Make仅仅通过简单的语句来描写依赖机制，对构建过程本身没有做任何抽象，虽然这增加了Make的使用场景，但也使得Make对C&#x2F;C++中常见的各种需求（跨平台、跨编译器等）力不从心。</p><h3 id="第二代：GNU-Autotools"><a href="#第二代：GNU-Autotools" class="headerlink" title="第二代：GNU Autotools"></a>第二代：GNU Autotools</h3><p>在Make诞生之后，UNIX产生了多种变种，运行UNIX-like操作系统的软硬件环境都各不相同，这给程序带来了<strong>跨平台</strong>需求。最笨的办法是为支持的每一种平台单独写一份Makefile。这种做法不仅低效，也难以维护（虽然如此，至今仍有不少项目采取这种跨平台方法）。在这样的背景下，1991年，GNU Autoconf出现了，并在之后演变成为一整套构建系统，通常统称GNU Autotools。Autotools由三部分组成：Autoconf，Automake，Libtool。这三部分联合在一起，使得Autotools可以在任意UNIX-like操作系统上生成库与可执行文件，并且可以自动分析系统上已有的头文件与第三方库，同时据此调整项目的编译参数。Autotools使用m4语言来描写构建过程，用户需要编写或者使用工具生成configure.ac与<a href="https://link.zhihu.com/?target=http://Makefile.am">http://Makefile.am</a>文件，然后Autotools经过一系列复杂的操作生成一个configure文件。configure是一个bash script，可以运行于任何支持bash的操作系统上，分析系统的编译环境并生成Makefile文件，用户随后执行标准的Make命令完成编译。主要步骤如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>Autotools出发点是解决跨平台的问题，但又没能跳出UNIX-like系统的限制，其使用强依赖于bash，因此在Windows系统上非常缓慢，非常难以使用（受限于MinGW环境与Windows的进程管理机制）。同时，Autotools无比复杂的生成流程也使得开发者们望而却步。如今，Autotools正在慢慢淡出人们的视野。</p><h3 id="第三代：CMake"><a href="#第三代：CMake" class="headerlink" title="第三代：CMake"></a>第三代：CMake</h3><p>Autotools得到普及之后，一个跨平台C&#x2F;C++项目的基本配置是一份configure文件和一份Visual Studio项目文件（Windows开发的标准流程是使用Visual Studio）。在这样的构建模式下，哪怕添加或删除一个文件的小操作都是一场灾难。终于在1999年，C++图形库VTK的开发者们无法继续忍受Autotools，于是他们创造了一个新的构建系统。这个系统就是后来的CMake。CMake实现了真正的跨平台：一次编写，到处编译，无论在UNIX-like操作系统还是Windows操作系统。CMake自创了一套基于字符串的DSL，并使用CMakeLists.txt文件作为构建描述文件。CMake语言相比bash脚本在易读性上大大提升，用户再也不需要去读数万行的configure文件了。实际上，在CMake刚刚出现的年代，它只是做完了Autotools未完成的部分。随着不断的更新，CMake引入了测试、打包等越来越多的新功能，并积累了大量的Module扩展，越来越多的C&#x2F;C++项目选择CMake作为构建工具，这时CMake才真正成为了名副其实的第三代构建工具。<strong>可扩展性</strong>是第三代构建系统的核心。CMake的使用步骤如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>在Windows上，CMake会生成一个Visual Studio工程，使用Visual Studio打开即可完成编译。CMake远远不是完美的；在CMake诞生的年代，受限于当时的技术以及作者的认识，CMake的DSL设计的非常糟糕。无数人一边使用CMake，一边忍受着CMake语言的折磨，而CMake自己也因为设计上的失误bug频出。CMake的作者Bill Hoffman后来写道：“如果能重来，我们一定会选择一个已有的嵌入式语言而不是另起炉灶。Lua可能是最适合这种情况的语言。”【<a href="https://link.zhihu.com/?target=https://www.aosabook.org/en/cmake.html">CMake</a>】</p><p>同属第三代的构建系统还有许多。与CMake同时代的SCons，后来的Meson，bjam，premake等都属于这一级别。这些构建系统由于疏于维护、功能缺失、使用麻烦、缺少文档、带有外部依赖等原因，未能像CMake一样流行开来。</p><h3 id="第3-5代：GN-Ninja"><a href="#第3-5代：GN-Ninja" class="headerlink" title="第3.5代：GN+Ninja"></a>第3.5代：GN+Ninja</h3><p>2008年，Google首次推出了他们的浏览器：Chrome。随着web技术的不断发展与变化，Chrome变得越来越复杂，如今已成为了有史以来最庞大的C++项目之一。要支撑起如此巨大的一个项目，对构建系统是一个不小的挑战。第一个挑战，就是构建时间。在当时，要编译40000个文件的Chrome项目需要相当长的时间，这大大影响了Chrome的开发效率。为此Google开发了构建工具Ninja，其功能类似Make，但运行速度远远快于Make，并附带了一些更强的额外功能。Ninja在设计时并未加入过分复杂的语法，因为在设计时Ninja定位就不是手写的文件，而是给其他的元构建系统（Meta-Build System）生成的文件。在Google，这一元构建系统就是GYP，也就是后来的GN。GN同样自创了一套类似Python的DSL Starlark，其可读性要比CMake好得多。为了支撑Chromium以及后来的Fuchsia操作系统，GN的功能非常丰富，在toolchain管理、选项设置、依赖图生成、调试上都有内置的支持，但由于其使用场景主要为Google内部，其文档也相对比较随意。GN的使用步骤如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gn gen -C out</span><br><span class="line">ninja -C out</span><br></pre></td></tr></table></figure><p>除了ninja之外，GN还可以生成Visual Studio、XCode等项目文件，以便于在IDE中开发。需要注意的是，可以生成Ninja文件的元构建系统并不只有GN，CMake也支持Ninja生成器（虽然实际使用时CMake的Ninja生成器bug挺多的）。相比于CMake，GN更多地解决了一些痛点（语法、编译时间、调试），但并没有作出根本上的改变，因此只能算作3.5代构建系统。</p><h3 id="第四代：xmake"><a href="#第四代：xmake" class="headerlink" title="第四代：xmake"></a>第四代：xmake</h3><p>第三代的各种构建系统并没有解决一个至关重要的问题：<strong>依赖管理</strong>问题。对于一个中大型CMake项目，在编译项目之前必须手动安装项目的各种依赖，手动声明各种依赖参数。虽然CMake提供了依赖查找的接口，但繁杂的语句、简略的文档、大量的坑对开发者提出了不小的挑战。很少有人能正确使用CMake的依赖查找部分，依赖安装失败也成为了困扰CMake使用者的噩梦。为此，2015年，xmake诞生了。xmake语法基于Lua语言，并使用xmake.lua文件描述构建过程。xmake提出了中心仓库+自建仓库的依赖管理方式，添加第三方依赖再也不用繁复的安装、调试、调整各种参数和安装位置，只需要一行<code>add_requires</code>语句即可完成。xmake的设计哲学是与其他工具共存而不是取代，因此xmake支持引入使用包括CMake在内的任何构建工具的第三方库，也支持导出pkg-config&#x2F;CMake的配置文件，还支持使用来自vcpkg&#x2F;conan&#x2F;conda&#x2F;homebrew&#x2F;Linux各发行版包管理器等各类第三方仓库源的库。除了解决依赖管理问题之外，xmake还拥有等同Ninja的构建速度，基于Lua的易读易写语法，内置可扩展的各种工具链支持，虚拟环境功能，分布式编译&#x2F;远程编译，以及一系列实用小功能（例如自动生成Windows的动态库def文件）。类似GN，xmake也可以生成Visual Studio等IDE项目文件，甚至可以导出CMakeLists.txt直接复用CMake的IDE生态。xmake的使用步骤如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmake</span><br><span class="line">xmake install -o /usr/local</span><br></pre></td></tr></table></figure><p>xmake在强大功能与简洁性之间做了完美的平衡（翻译：我全都要）。xmake既集成了此前各种构建工具的强大功能，又保持了语法和项目配置的简单，甚至xmake本体安装包在嵌入了一个Lua解释器的情况下体积仅有3.68MB（截至2.6.9版本）。xmake的缺点在于年龄不够长，因此流行程度不如第三代各种构建工具，并且其开发策略相对比较激进，即使Release版本，在发行前也不会经过充分的beta测试。尽管存在一些非根本性的bug，但这些bug通常很快就会在dev分支中修复，因此并不会产生太大的影响。</p><p>纵观构建系统的发展史，可以看到每一代构建系统的设计都是对前人思想的扬弃。笔者相信，xmake不会是C&#x2F;C++构建系统的终点，未来一定会有新的需求，并产生新的构建系统。作为开发者，最好的选择是想清楚自己的需要，然后选择最适合自己的构建系统。</p><h2 id="教程概览"><a href="#教程概览" class="headerlink" title="教程概览"></a>教程概览</h2><p>本教程分为三部分：</p><p>第一部分 概述</p><ol start="0"><li>简介，简要介绍xmake与C&#x2F;C++的构建系统史。</li></ol><p>第二部分 基本功能</p><ol><li><p>快速入门，介绍如何配置并运行第一个xmake项目。</p></li><li><p>编译选项，介绍一些C&#x2F;C++项目中常用编译选项设置。</p></li><li><p>依赖管理，介绍如何在xmake项目中查找并引入第三方库。</p></li><li><p>依赖仓库，介绍xmake仓库的包描述文件，以及自建仓库&#x2F;引用其它项目的方法。</p></li><li><p>构建选项，介绍如何通过选项控制构建过程，以及如何根据环境检测控制选项。</p></li><li><p>测试发布，介绍如何添加测试、安装&#x2F;发布生成的库与可执行文件（以及可能的文档）。</p></li></ol><p>第三部分 高级特性（暂定）</p><ol start="7"><li><p>跨语言项目，介绍C&#x2F;C++&#x2F;CUDA&#x2F;Python等多语言混合项目在xmake中的设置。</p></li><li><p>自定义规则，介绍xmake中的自定义规则与自定义工具链。</p></li><li><p>Lua编程，介绍如何在xmake中使用Lua语言编写脚本解决复杂问题。</p></li><li><p>代码生成，介绍xmake对编译时生成代码的处理方式。</p></li></ol><p>实际上，只需要阅读到第二部分即可满足大部分项目的需要了。对于具有特殊需求的项目，第三部分仅对其中一部分作简要介绍，一些重要特性例如分布式编译未能涵盖。对此类项目，在教程之外更应根据需求参考官方文档、已有的其他项目进行补充，必要时可以在讨论区提问。本教程或有一定疏漏之处，恳请读者批评指正！</p><h2 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h2><p>xmake的官方文档：<a href="https://xmake.io/">xmake</a></p><p>xmake-repo的搜索站：<a href="https://xrepo.xmake.io/">xrepo</a></p><p>xmake的GitHub仓库：<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake">xmake-io&#x2F;xmake</a></p><p>xmake-repo的GitHub仓库：<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake-repo">xmake-io&#x2F;xmake-repo</a></p><p>xmake提问讨论区：<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake/discussions">Discussions</a></p><p>xmake Discord：<a href="https://link.zhihu.com/?target=https://discord.gg/xmake">xmake channel</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/column/c_1537535487199281152">A Tour of xmake - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of xmake - 01. 快速入门</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2001.%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/A%20Tour%20of%20xmake%20-%2001.%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装xmake"><a href="#安装xmake" class="headerlink" title="安装xmake"></a>安装xmake</h2><blockquote><p>Tips. 由于xmake的更新、依赖管理等都依赖<a href="https://link.zhihu.com/?target=https://git-scm.com/">git</a>，强烈建议在安装xmake前先安装好git。</p></blockquote><p>xmake推荐使用shell脚本安装。<br>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget https://xmake.io/shget.text -O -)</span><br></pre></td></tr></table></figure><p>Powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-Expression</span> (<span class="built_in">Invoke-Webrequest</span> <span class="string">&#x27;https://xmake.io/psget.text&#x27;</span> <span class="literal">-UseBasicParsing</span>).Content</span><br></pre></td></tr></table></figure><p>Windows上也可下载<a href="https://link.zhihu.com/?target=https://github.com/xmake-io/xmake/releases">安装包</a>手动安装。运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake --help</span><br></pre></td></tr></table></figure><p>能正常输出则说明安装成功。</p><p>使用shell脚本安装的xmake已经带有自动补全和虚拟环境功能。对于其他方式安装的xmake，如果想要启用xmake的自动补全和虚拟环境功能，需要在安装完毕后运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake update --integrate</span><br></pre></td></tr></table></figure><p>安装之后，若要将xmake更新至最新版，使用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake update</span><br></pre></td></tr></table></figure><p>卸载xmake时，运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake update --uninstall</span><br></pre></td></tr></table></figure><h2 id="更新升级"><a href="#更新升级" class="headerlink" title="更新升级"></a>更新升级</h2><p>从v2.2.3版本开始，新增了<code>xmake update</code>命令，来快速进行自我更新和升级，默认是升级到最新版本，当然也可以指定升级或者回退到某个版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake update 2.2.4</span><br></pre></td></tr></table></figure><p>我们也可以指定更新到master&#x2F;dev分支版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake update master </span><br><span class="line">$ xmake update dev</span><br></pre></td></tr></table></figure><p>从指定git源更新</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xmake update github:xmake-io/xmake#master </span><br><span class="line">$ xmake update gitee:tboox/xmake#dev # gitee镜像</span><br></pre></td></tr></table></figure><p>如果xmake&#x2F;core没动过，仅仅更新xmake的lua脚本改动，可以加<code>-s/--scriptonly</code>快速更新lua脚本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake update -s dev</span><br></pre></td></tr></table></figure><p>最后，我们如果要卸载xmake，也是支持的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmake update --uninstall </span><br></pre></td></tr></table></figure><h2 id="一个最简单的xmake项目"><a href="#一个最简单的xmake项目" class="headerlink" title="一个最简单的xmake项目"></a>一个最简单的xmake项目</h2><blockquote><p>Hint. 在之后的示例中，如无特殊说明，均以$符号开头表示在shell中运行的命令。</p></blockquote><p>使用shell切换至一个有足够权限的文件目录，运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake create helloworld</span><br></pre></td></tr></table></figure><p>即可产生一个最简单的xmake项目。项目仅包含main.cpp一个文件，配置文件xmake.lua的内容如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/main.cpp&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果你已经安装了C&#x2F;C++的编译器（gcc&#x2F;XCode&#x2F;Visual Studio），那么可以直接在shell中编译并运行这个项目：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd helloworld</span><br><span class="line">$ xmake</span><br><span class="line">...</span><br><span class="line">$ xmake run helloworld</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>默认情况下，中间缓存会被存储在.xmake文件夹，构建生成的中间文件和目标文件放在build文件夹。</p><p>Windows上若不想安装Visual Studio，可以安装mingw作为编译器。如果在安装时启用了虚拟环境功能，则可以使用xmake提供的mingw虚拟环境（需要联网下载安装）。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xrepo env -b mingw-w64 shell</span><br></pre></td></tr></table></figure><blockquote><p>Tips. 国内由于众所周知的原因，无法顺利访问github。对此，xmake提供了镜像功能，可以将github重定向到国内的镜像站点： <code>shell $ xmake global --proxy_pac=github_mirror.lua</code> 当然，如果本地存在代理，也可以直接在shell中设置环境变量以启用本地代理。<br>Tips. xmake提供了msvc、python3等一系列内置的虚拟环境，可以用<code>xrepo env -l</code>命令查看。关于手动添加虚拟环境的方法请参考官方文档。</p></blockquote><p>激活虚拟环境后，运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mingw-w64] $ cd helloworld</span><br><span class="line">[mingw-w64] $ xmake config -p mingw</span><br><span class="line">...</span><br><span class="line">[mingw-w64] $ xmake</span><br><span class="line">...</span><br><span class="line">[mingw-w64] $ xmake run helloworld</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>其中，<code>xmake config</code>语句切换编译目标平台为mingw。若使用mingw编译器，则编译之前必须执行这一命令，此后不再说明。</p><blockquote><p>Tips. <code>xmake config</code>可以缩写为<code>xmake f</code>，这个阶段称为configure阶段。直接运行xmake之前若未经过这一阶段，xmake将自动运行configure，并采用所有选项的默认参数。运行<code>xmake --help</code>来查看更多缩写！</p></blockquote><p>若不想使用平台默认的工具链（例如想要使用clang而不是gcc），可以通过<code>--toolchain</code>选项来实现。同样在configure阶段，运行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --toolchain=clang</span><br></pre></td></tr></table></figure><p>即可切换编译工具链为clang。</p><p>编译完成后，如果想要清理生成的文件，可以运行<code>xmake clean</code>来清理中间文件与目标文件。<code>xmake clean -a</code>可以连同xmake缓存一同清除。<code>xmake config -c</code>命令仅仅清除xmake缓存并重新生成，不清理中间文件和目标文件。</p><blockquote><p>Tips. xmake文件发生更改后，为提升效率默认原来的缓存继续生效，可能会影响构建过程。建议在xmake文件发生较大更改后，或者遇到问题的时候手动运行<code>xmake f -c</code>来清理缓存。</p></blockquote><h2 id="在IDE中使用xmake"><a href="#在IDE中使用xmake" class="headerlink" title="在IDE中使用xmake"></a>在IDE中使用xmake</h2><p>xmake直接支持生成Makefile、ninja、compile_commands.json等编译数据文件，Visual Studio工程文件，以及CMakeLists.txt文件。通过这些编译数据，xmake可以直接或间接支持各种常见IDE。下以Visual Studio Code为例配置xmake项目的智能提示。</p><p>首先需要安装VSCode以及C&#x2F;C++插件、xmake插件，这两个插件可以在VSCode Marketplace找到。打开项目文件夹，运行<code>xmake config</code>完成configure过程。从View打开Command Palette（默认快捷键Ctrl+Shift+P），运行XMake: Update Intellisense。此时可以在.vscode文件夹中找到自动生成的compile_commands.json。再打开Command Palette，运行C&#x2F;C++: Edit Configurations (UI)，检查编译器、C++语言版本等设置无误后，下拉选中Advanced Settings，再选中Compile commands，输入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;workspaceFolder&#125;/.vscode/compile_commands.json</span><br></pre></td></tr></table></figure><p>退出，再打开src&#x2F;main.cpp文件。此时智能提示已经可以工作了。此后，当项目构建过程发生变化时，运行<code>xmake config</code>后打开Command Palette运行XMake: Update Intellisense即可。</p><p>对于其他IDE&#x2F;编辑器，根据其需要，生成对应的工程文件&#x2F;Compile Commands&#x2F;CMakeLists.txt即可配置智能提示等功能。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ xmake project -k compile_commands</span><br><span class="line">$ xmake project -k cmake</span><br><span class="line">$ xmake project -k vs</span><br><span class="line">$ xmake project -k vsxmake</span><br></pre></td></tr></table></figure><blockquote><p>Tips. 对Visual Studio，xmake提供了两种不同的project生成器：vs和vsxmake。vs生成直接基于MSBuild的构建文件，方便移植到其他机器，但其构建过程与直接执行xmake有可能存在少量差异；vsxmake则在MSBuild中调用xmake进行编译，其构建过程等同于直接执行xmake，但不便移植。对单机项目建议优先使用vsxmake，而有特别需求时可以考虑使用vs。</p></blockquote><h2 id="xmake-lua再探"><a href="#xmake-lua再探" class="headerlink" title="xmake.lua再探"></a>xmake.lua再探</h2><p>让我们回到配置文件本身，看看各行命令的作用是什么。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/main.cpp&quot;</span>)</span><br></pre></td></tr></table></figure><p>第一行的<code>add_rules</code>语句声明了两个mode：debug与release（默认release）。debug模式会关闭编译器优化并保留程序中的调试信息，而release模式会加入更激进的编译器优化。这一行并不是必须的，如果不写这一语句，编译时实际执行的命令中将不含有任何额外的flag。</p><blockquote><p>Tips. 你可以运行<code>xmake -v</code>来查看实际执行的编译命令。在xmake执行出错时，执行<code>xmake -vD</code>可以打印出错的类型与位置，这一点在调试时尤其有用。</p></blockquote><p>第二行的<code>target</code>语句声明了一个target：helloworld。在xmake中，所有的构建目标都用target来表示。如无额外声明，target的名字将被默认作为库&#x2F;可执行文件的名字的主要部分。例如，windows上binary类型的target helloworld其输出文件名为helloworld.exe，linux上static类型的target helloworld其输出文件名为libhelloworld.a。声明target之后进入该target的作用域，直到声明另一个target或者显式调用<code>target_end</code>之前，所有语句都是针对该target生效的。</p><p>第三行的<code>set_kind</code>语句限定target的类型为binary。xmake中target类型一共有5种：binary（默认），static，shared，headeronly，phony，分别对应可执行文件、静态库、动态链接库、纯头文件、伪target。phony类型的target仅用于添加一些可继承的flag、协调target编译顺序，不会执行编译链接操作。</p><p>第四行的<code>add_files</code>语句为target加入了源文件。通过<code>add_files</code>加入的所有源文件都会被编译为中间文件，然后链接到目标文件中。xmake支持通配符匹配添加文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target(...)</span><br><span class="line">    add_files(<span class="string">&quot;src/*.cpp|standalone.cpp&quot;</span>, <span class="string">&quot;src/*.cu&quot;</span>)</span><br></pre></td></tr></table></figure><p>这一语句将src文件夹下所有.cu后缀的文件、除standalone.cpp之外所有.cpp后缀的文件加入target。不显式声明rule重载的情况下，默认.c后缀的文件会自动调用C编译器编译，.cpp&#x2F;.cc&#x2F;.cxx后缀的文件会调用C++编译器编译，.cu后缀的文件会调用CUDA编译器编译，.asm&#x2F;.S后缀的文件会调用汇编器汇编。</p><p>以上就是最简单的可执行文件xmake.lua结构。如果helloworld.cpp中没有main()函数，想要把helloworld编译为一个库，xmake.lua也非常简单：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">target(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">    set_kind(<span class="string">&quot;$(kind)&quot;</span>)</span><br><span class="line">    add_files(<span class="string">&quot;src/main.cpp&quot;</span>)</span><br></pre></td></tr></table></figure><p>唯一的变化是<code>set_kind</code>语句。<code>set_kind(&quot;$(kind)&quot;)</code>中使用了xmake的内置变量<code>kind</code>。这一变量是在configure阶段指定的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xmake config --kind=shared # make libraries shared by default</span><br></pre></td></tr></table></figure><p>未指定情况下，<code>kind</code>的默认值为static。</p><blockquote><p>Tips. “$(val)”的用法在xmake中仅限于字符串内部，其作用为简单的字符串替换。这一替换过程并非即时生效，而是解析完毕后再执行替换，因此不建议在Script Scope使用。详见<a href="https://link.zhihu.com/?target=https://xmake.io/%23/manual/builtin_variables">文档</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E5%85%B6%E4%BB%96.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/%E5%85%B6%E4%BB%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="Remotely-Save"><a href="#Remotely-Save" class="headerlink" title="Remotely Save"></a>Remotely Save</h1><p><a href="https://www.bilibili.com/video/BV1y54y1K7bV/?spm_id_from=333.999.0.0&vd_source=254fbc04b5fe132d6c95727aac670dea">obsidian+webDav网盘同步教程，笔记轻松同步，实现存储自由_哔哩哔哩_bilibili</a></p><h1 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h1><h2 id="设置-Memos"><a href="#设置-Memos" class="headerlink" title="设置 Memos"></a>设置 Memos</h2><p>Memos 的可设置选项比较复杂，这里仅对部分选项作简单说明。</p><p>下图设置了自定义“用户名”、“发送按钮”样式，部分订制 Memos 界面。</p><p><img src="https://pic1.zhimg.com/80/v2-79cbd2c882ee9cc4519a036cd5fc7614_1440w.webp"></p><p><img src="https://pic4.zhimg.com/80/v2-aa289da3601dfc66e39a29afd9831137_1440w.webp"></p><p>这里我还设置了 <code># Memos</code> ，后面在具体使用 Memos 时会讲到。</p><h2 id="使用-Memos"><a href="#使用-Memos" class="headerlink" title="使用 Memos"></a>使用 Memos</h2><p>要注意的是，Obsidian Memos中的文本是储存在核心插件日记中的，因此需要先对核心插件【日记】进行设置。</p><p><img src="https://pic4.zhimg.com/80/v2-2a7c96a201333198a160f3d0b6b3af2f_1440w.webp"></p><p>在设置中打开日记开关</p><p><img src="https://pic3.zhimg.com/80/v2-4e902fb70b04de2e0bd339be7cc6f566_1440w.webp"></p><p>对日记插件进行设置</p><p>至此，Memos插件就可以运行了。</p><p><img src="https://pic4.zhimg.com/80/v2-3747a4f2b1c21a789b60285f7b63e3b3_1440w.webp"></p><h3 id="3-1-基本用法"><a href="#3-1-基本用法" class="headerlink" title="3.1 基本用法"></a>3.1 基本用法</h3><p>首先在我的日记里设置标题 <code># Memos</code> 。</p><p><img src="https://pic1.zhimg.com/80/v2-aac7ed91a3d35ee1f9edb1f0de086724_1440w.webp"></p><p>打开 Memos 界面，输入 Memo，发送。然后就能在日记的 <code># Memos</code> 下看到刚刚发送的 Memo 了。</p><p><img src="https://pic4.zhimg.com/80/v2-2fb1051a31b697c881860a6bce1e4d9f_1440w.webp"></p><p><img src="https://pic1.zhimg.com/80/v2-c8baabb4c312909e4f8ebc650caf42e8_1440w.webp"></p><p>你还可以给你的 Memo 打上标签：</p><p><img src="https://pic2.zhimg.com/80/v2-c0b3bc6eda70b5f07ff2ddaa3af3b8d9_1440w.webp"></p><p><img src="https://pic3.zhimg.com/80/v2-5f2b8bc77e47c357afd3f58f6e64b6c6_1440w.webp"></p><p><strong>注意：</strong> Memos 中出现的标签，在 Obsidian 中也会出现。但 Obsidian 中的标签不会出现在 Memos 中（可通过设置“使用在库内的所有标签”来在 Memos 中查看库标签）</p><p>删除一条 Memo，该 Memo 会被移动到回收站，同时会在存放日记的文件夹下生成一个名为“delete”的文件，用于记录删除日志。 Memo 被删除后，日记中对应的内容也会被删除。</p><p><img src="https://pic2.zhimg.com/80/v2-b1defcd116672ce8cc51751df5de1955_1440w.webp"></p><p><img src="https://pic2.zhimg.com/80/v2-9c94f0bbecc115658a319846e2323055_1440w.webp"></p><p><img src="https://pic1.zhimg.com/80/v2-172ceb849e20542dc94f1d1fb41db220_1440w.webp"></p><p><strong>注意：</strong> 1. 请勿对 <code>delete</code> 文件进行直接编辑，容易导致 Memos 回收站出问题； 2. 回收站文件名可在 Memos 设置里更改。</p><p><img src="https://pic3.zhimg.com/80/v2-d937da147fb76e6e009c7ecdeead6892_1440w.webp"></p><p>Memo 类型除了“列表”外，还可以是“任务”，可以在编辑时切换 Memo 类型，也可以在设置中设定默认类型（我不用 Memos 做待办，所以没改默认类型）</p><p><img src="https://pic4.zhimg.com/80/v2-d797d5c847abba07fa2a4ddfda9b30af_1440w.webp"></p><p><img src="https://pic1.zhimg.com/80/v2-617f4418ef00f8b84dfefec8b6b61d6c_1440w.webp"></p><p><img src="https://pic2.zhimg.com/80/v2-f07c8f6e494af045750b60a847d1bb7d_1440w.webp"></p><p><img src="https://pic3.zhimg.com/80/v2-5efccf74767347151fb2565e3e4a00ba_1440w.webp"></p><h3 id="3-2-检索式"><a href="#3-2-检索式" class="headerlink" title="3.2 检索式"></a>3.2 检索式</h3><p>Memos 中还有个“检索式”功能，你可以根据不同的“标签”、“任务类型”、“文本内容”、“日期”来创建检索器。 这里以标签 <code>#测试</code> 和 <code>#其他标签也可以加入检索式</code> 为例：</p><p><img src="https://pic3.zhimg.com/80/v2-2fd0109adf255ff5a91799a8fda511f6_1440w.webp"></p><p>创建完成后，“检索式”中多出了一个“测试”，作用是把带有标签 <code>#测试</code> 和 <code>#其他标签也可以加入检索式</code> 的 Memos 整合到了一个队列中。 检索式创建成功的同时，日记文件夹下会多出一个“query”文档，用于记录“检索式的创建”。同回收站，该文件名称可通过设置修改，且最好不要直接编辑该文件。</p><p><img src="https://pic1.zhimg.com/80/v2-9ce8fb2c37e839954c412c681a0c7218_1440w.webp"></p><p>通过上面的例子不难看出，检索式的作用就是将 Memos 以一定的形式整合起来，即遵循卡片笔记写作法中“将相关联的卡片笔记串联起来”的原则。</p><h3 id="3-3-引用"><a href="#3-3-引用" class="headerlink" title="3.3 引用"></a>3.3 引用</h3><p>打开任意一个 Memo 的更多选项即可看到引用按钮，点击引用便会在编辑栏中生成一行“引用”文本。</p><p><img src="https://pic4.zhimg.com/80/v2-e29d5da6c8b40a0eb1cd29b4f6b9c2e7_1440w.webp"></p><p><img src="https://pic1.zhimg.com/80/v2-dca6a2ee8c5d3bc0ca5e5229db9b27cc_1440w.webp"></p><p>“阅读”新发送的“引用”文本，即可看到该 Memo 的链接状态：</p><p><img src="https://pic3.zhimg.com/80/v2-8ab99670ac4a2cf338e69c42286d61e2_1440w.webp"></p><p><img src="https://pic4.zhimg.com/80/v2-224d9fd0549104daff7cd987c586d91b_1440w.webp"></p><p>“引用”功能其实和 Obsidian 中的“出链”功能是一样的。学会了使用双链，也自然能用好这个功能。</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> ob配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像使用</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Mysql/docker%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Mysql/docker%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载MySQL镜像"><a href="#下载MySQL镜像" class="headerlink" title="下载MySQL镜像"></a>下载MySQL镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h1 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h1><p>创建data目录用来挂载数据库文件，创建conf目录用来挂载配置文件  </p><h1 id="第一次启动MySQL"><a href="#第一次启动MySQL" class="headerlink" title="第一次启动MySQL"></a>第一次启动MySQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v D:/Docker/MySQL/conf:/etc/mysql/conf.d -v D:/Docker/MySQL/datadir:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br></pre></td></tr></table></figure><p>解释下这条命令的参数</p><p><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</p><p><strong>-d:</strong> 后台运行容器，并返回容器ID；</p><p><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</p><p><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</p><p><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p><p><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</p><p><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</p><p><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</p><p><strong>-h “mars”:</strong> 指定容器的hostname；</p><p><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</p><p><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</p><p><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</p><p>**-m :**设置容器使用内存最大值;</p><p><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</p><p><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</p><p><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</p><p><strong>–volume , -v 本地目录：容器目录:</strong> 绑定一个卷,将容器目录挂载到本地目录</p><h1 id="启动mysqldocker容器"><a href="#启动mysqldocker容器" class="headerlink" title="启动mysqldocker容器"></a>启动mysqldocker容器</h1><p>利用docker ps命令可以查看当前运行的容器，docker ps -a 查看所有容器（包括停止的容器）</p><p>可以命令 停止和启动docker容器</p><p>停止容器：docker stop [CONTAINER ID]</p><p>启动 容器：docker start [CONTAINER ID]</p><p>也可以在windows的docker桌面版里启动</p><p><img src="https://pic2.zhimg.com/80/v2-34dab736546e4554eee26791fb6d6c95_1440w.webp"></p><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>命令 docker exec -it [NAMES] bash，这里names可以用那么也可以使用容器ID即Container ID</p><p><img src="https://pic4.zhimg.com/80/v2-0e83f1e7fd20970a901adee8d023d1db_1440w.webp"></p><h2 id="进入数据库"><a href="#进入数据库" class="headerlink" title="进入数据库"></a>进入数据库</h2><p>使用mysql -uroot -p123456 进入数据库</p><p>使用show databases;查看数据库</p><p><img src="https://pic1.zhimg.com/80/v2-ff897a77db983382e787a57d7deed798_1440w.webp"></p><p>use mysql进入名为mysql的数据库，show tables可以查看当前数据库有哪些表</p><h2 id="使用SQL"><a href="#使用SQL" class="headerlink" title="使用SQL"></a>使用SQL</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/mysql/conf.d/kaoqin.sql</span><br></pre></td></tr></table></figure><h2 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户并开启远程登录</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;你的账号&#x27;</span>@<span class="string">&#x27;%&#x27;</span>  IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;你的密码&#x27;</span>;</span><br><span class="line"># 创建数据库并设置字符集</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `库名` <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line"># 给账号授权数据库</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> 库名.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;你的账号&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"># 刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="为了方便以后远程连接，需要下面操作"><a href="#为了方便以后远程连接，需要下面操作" class="headerlink" title="为了方便以后远程连接，需要下面操作"></a>为了方便以后远程连接，需要下面操作</h2><p>需要修改user表中的user为root变为%。这里没有修改成功，因为一开始就是%</p><p>exit关掉，利用service mysqld restart重新启动mysql服务。</p><p><img src="https://pic3.zhimg.com/80/v2-2b8203b67bcc45461c3ed596f78cccb6_1440w.webp"></p><h2 id="如何远程连接docker的mysql容器"><a href="#如何远程连接docker的mysql容器" class="headerlink" title="如何远程连接docker的mysql容器"></a>如何远程连接docker的mysql容器</h2><p>首先查看dockers镜像ip，在终端输如ifconfig，如果出现 bash: ifconfig: command not found，则需要安装一些东西sudo apt-get install net-tools，现在就可以访问ifconfig</p><p>现在还不能连接成功，给root用户分配权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-83b542352c123d2d6503738fd5a0a336_1440w.webp"></p><p>刷新权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>新装了mysql8.0后再用navicat链接就会报2059的错误。</p><p>上网查了发现是8.0之后mysql更改了密码的加密规则，只要在命令窗口把加密方法改回去即可。</p><p>首先使用以下命令进入MySQL的docker容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it MYSQL8.0 bash</span><br></pre></td></tr></table></figure><p>然后登录MySQL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>然后运行以下SQL即可</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> password expire never;</span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/u014282578/article/details/127920419">写最好的Docker安装最新版MySQL8（mysql-8.0.31）教程（参考Docker Hub和MySQL官方文档）_docker 安装mysql8_大白有点菜的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建maven项目卡在resolving dependencies</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/Java/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/IDEA%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E5%8D%A1%E5%9C%A8resolving%20dependencies.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/Java/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/IDEA%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE%E5%8D%A1%E5%9C%A8resolving%20dependencies.html</url>
      
        <content type="html"><![CDATA[<p>记得在使用IDEA创建maven项目的时候，有时候会一直卡在resolving dependencies…问题上，从而导致创建项目过慢，这是由于在下载jar包的时候由于可能没有设置镜像是从远程进行下载导致过慢，也有可能是网络的原因。这时候我们如果是在开始创建maven项目的时候在Properties的属性面板中添加一项：archetypeCatalog &#x3D; internal即可。配置如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">archetypeCatalog</span><br><span class="line"><span class="keyword">internal</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c91150277c314b36b51f48875feb35b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><p>如果是在项目已经创建过后，在pom文件中添加其他的依赖的时候，也卡在了resolving dependencies…问题上，则我们可以在settings中的maven进行设置，路径和配置如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c57e1cb0e8d4940af4237e89180ed36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="在这里插入图片描述"></p><p>即在vm options 添加参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-DarchetypeCatalog</span>=internal</span><br></pre></td></tr></table></figure><p>-DarchetypeCatalog参数是用来指定archetype-catalog.xml文件从哪里获取的。可以选择的值为：remote，internal ，local等，如果不进行设置的话则默认使用remote，而由于远程的中央仓库的archetype太多， 导致从远程网络加载所以非常慢，这也是之前卡在这里的原因。</p><p>settings设置的是当前项目的配置，如果设置全局的设置，则在other settings进行上述设置，则对其他项目也生效。</p><p>通过上述设置即可解决IDEA创建maven项目过慢，一直卡在resolving dependencies…的问题。</p><h2 id="打开Settings"><a href="#打开Settings" class="headerlink" title="打开Settings"></a>打开Settings</h2><p>修改maven Importing的jvm参数, 默认为700多, 直接修改成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms1024m -Xmx2048m</span><br></pre></td></tr></table></figure><p>（博主的话：猜测这个貌似是maven下载速度的带宽限制，我直接搞成了-Xmx4096m，然后就看到进度条一直处在飞奔的状态。。。）</p><p>Resolving Maven dependencies立刻就消失了。</p><p><img src="https://s2.51cto.com/images/blog/202301/05105838_63b63cde3f9f09607.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp"></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> Java </category>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows+zsh</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/windows+zsh.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/windows+zsh.html</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-Terminal-配置-Git-bash-为默认终端"><a href="#Windows-Terminal-配置-Git-bash-为默认终端" class="headerlink" title="Windows Terminal 配置 Git bash 为默认终端"></a>Windows Terminal 配置 Git bash 为默认终端</h2><p>现在 Windows Terminal 有了图形界面，直接选择就好</p><p><img src="https://pic4.zhimg.com/v2-f5ab73bb87783dd158e5bac6936ca1db_b.jpg"></p><p>具体 json 文件配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;defaultProfile&quot;: &quot;&#123;c891c3d2-b798-4857-83c0-89bf2ea34021&#125;&quot;,</span><br><span class="line">    &quot;profiles&quot;: </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;: </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;list&quot;: </span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;commandline&quot;: &quot;D:\\Environment\\Git\\bin\\bash.exe --login -i&quot;,</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;c891c3d2-b798-4857-83c0-89bf2ea34021&#125;&quot;,</span><br><span class="line">                &quot;name&quot;: &quot;Git Bash&quot;,</span><br><span class="line">                &quot;icon&quot;: &quot;D:\\Program_Files\\Git\\mingw64\\share\\git\\git-for-windows.ico&quot;</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>其中 <code>&quot;commandline&quot;: &quot;D:\\Environment\\Git\\bin\\bash.exe --login -i&quot;,</code></p><h2 id="pacman-环境配置"><a href="#pacman-环境配置" class="headerlink" title="pacman 环境配置"></a>pacman 环境配置</h2><p><a href="https://github.com/LcJuves/lcjuves/blob/main/clang/linux-like/git_bash_install_pacman.sh">lcjuves&#x2F;git_bash_install_pacman.sh at main · LcJuves&#x2F;lcjuves · GitHub</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm /usr/bin/msys-pcre-1.dll</span><br><span class="line">pacman -S zsh</span><br></pre></td></tr></table></figure><h2 id="配置默认启动zsh"><a href="#配置默认启动zsh" class="headerlink" title="配置默认启动zsh"></a>配置默认启动zsh</h2><p>在<code>../Git/etc/bash.bashrc</code>文件末尾追加以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Launch Zsh</span></span><br><span class="line"><span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exec</span> zsh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>之后每次启动&#x2F;新建<code>Git Bash</code>，都会是zsh。</p><h2 id="安装-zsh-autosuggestions-插件"><a href="#安装-zsh-autosuggestions-插件" class="headerlink" title="安装 zsh-autosuggestions 插件"></a>安装 zsh-autosuggestions 插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 终端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scoop</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/Scoop.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/Scoop.html</url>
      
        <content type="html"><![CDATA[<h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h2><h5 id="将Scoop安装到自定义目录-命令行方式-设置环境变量）"><a href="#将Scoop安装到自定义目录-命令行方式-设置环境变量）" class="headerlink" title="将Scoop安装到自定义目录(命令行方式)(设置环境变量）"></a>将Scoop安装到自定义目录(命令行方式)(设置环境变量）</h5><p><code>$env:SCOOP=&#39;D:\Applications\Scoop&#39; </code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP&#39;, $env:SCOOP, &#39;User&#39;)</code></p><h5 id="将Scoop配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式"><a href="#将Scoop配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式" class="headerlink" title="将Scoop配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)"></a>将Scoop配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)</h5><p><code>$env:SCOOP_GLOBAL=&#39;F:\GlobalScoopApps&#39;</code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;, $env:SCOOP_GLOBAL, &#39;Machine&#39;)</code></p><h5 id="安装并镜像加速"><a href="#安装并镜像加速" class="headerlink" title="安装并镜像加速"></a>安装并镜像加速</h5><p><a href="https://gitee.com/glsnames/scoop-installer#31-%E4%BB%A3%E7%90%86%E5%8F%AF%E9%80%89">https://gitee.com/glsnames/scoop-installer#31-%E4%BB%A3%E7%90%86%E5%8F%AF%E9%80%89</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSDN下载文章</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/CSDN%E4%B8%8B%E8%BD%BD%E6%96%87%E7%AB%A0.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/CSDN%E4%B8%8B%E8%BD%BD%E6%96%87%E7%AB%A0.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(function doPrint()&#123;      </span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var articleBox = $(&quot;div.article_content&quot;);</span><br><span class="line">articleBox.removeAttr(&quot;style&quot;);</span><br><span class="line">var head_str = &quot;&quot;;       </span><br><span class="line">var foot_str = &quot;&quot;;   </span><br><span class="line">var older = document.body.innerHTML;       </span><br><span class="line">var title= document.getElementsByClassName(&#x27;article-title-box&#x27;)[0].innerHTML; </span><br><span class="line">var main_body = document.getElementsByClassName(&#x27;article_content&#x27;)[0].innerHTML;</span><br><span class="line">document.body.innerHTML = head_str + title + main_body + foot_str;</span><br><span class="line">$(&quot;#mainBox&quot;).width(&quot;100%&quot;);</span><br><span class="line">document.getElementsByTagName(&#x27;body&#x27;)[0].style.zoom=0.8;     </span><br><span class="line">window.print();</span><br><span class="line">document.body.innerHTML = older;</span><br><span class="line">return false;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/p1279030826/article/details/106602341">【新】CSDN文章一键打印、输出PDF（自动阅读全文、全清爽模式）_csdn打印_JavonPeng的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>backdoor-factory</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/backdoor-factory.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/backdoor-factory.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://github.com/secretsquirrel/the-backdoor-factory">secretsquirrel&#x2F;the-backdoor-factory: Patch PE, ELF, Mach-O binaries with shellcode new version in development, available only to sponsors (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull secretsquirrel/the-backdoor-factory</span><br><span class="line">sudo docker run -it -v /home/icefjl:/home/tmp:Z secretsquirrel/the-backdoor-factory bash</span><br></pre></td></tr></table></figure><h1 id="⾸先检查宿主能否被⽀持”插⼊”shellcode。"><a href="#⾸先检查宿主能否被⽀持”插⼊”shellcode。" class="headerlink" title="⾸先检查宿主能否被⽀持”插⼊”shellcode。"></a>⾸先检查宿主能否被⽀持”插⼊”shellcode。</h1><p>主要使⽤下⾯两个参数 -f：指定测试程序 -S：检查该程序是否支持<br>检查命令: .&#x2F;backdoor.py -f &#x2F;root&#x2F;putty.exe -S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -no-pie hello.c -o hello</span><br></pre></td></tr></table></figure><h1 id="搜索该⽂件可⽤的Code-Caves-代码缝隙"><a href="#搜索该⽂件可⽤的Code-Caves-代码缝隙" class="headerlink" title="搜索该⽂件可⽤的Code Caves(代码缝隙)"></a>搜索该⽂件可⽤的Code Caves(代码缝隙)</h1><p>使⽤命令 .&#x2F;backdoor.py -f test.exe -c -l 600<br>-c：code cave(代码裂缝) -l：代码裂缝大小</p><h1 id="获取该⽂件的可⽤payload"><a href="#获取该⽂件的可⽤payload" class="headerlink" title="获取该⽂件的可⽤payload"></a>获取该⽂件的可⽤payload</h1><p>.&#x2F;backdoor.py -f &#x2F;root&#x2F;putty.exe -s -show</p><h1 id="使⽤backdoor的-user-supplied-shellcode-模块加载⾃定义的shellcode"><a href="#使⽤backdoor的-user-supplied-shellcode-模块加载⾃定义的shellcode" class="headerlink" title="使⽤backdoor的 user_supplied_shellcode 模块加载⾃定义的shellcode"></a>使⽤backdoor的 user_supplied_shellcode 模块加载⾃定义的shellcode</h1><p>先⽤msfvenom⽣成raw格式的shellcode<br>再使⽤backdoor的 user_supplied_shellcode 模块加载⾃定义的shellcode<br>.&#x2F;backdoor.py -f &#x2F;home&#x2F;tmp&#x2F; -s user_supplied_shellcode -U &#x2F;home&#x2F;tmp&#x2F;tp1.shell -o payload2</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 病毒免杀 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker安装和使用</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker 安装 | 菜鸟教程 (runoob.com)</a><br>linux&#x2F;ubuntu 下的安装命令(使用阿里云镜像)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &amp;&amp; curl -fsSL https:``//download``.[docker.com](http://docker.com/)``/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] [http://mirrors.aliyun.com/docker-ce/linux/ubuntu](http://mirrors.aliyun.com/docker-ce/linux/ubuntu) <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>一条命令就可以搞定安装，不过安装可能需要一些时间，等着就行。</p><p>在使用过程中，当需要查找某个镜像的时候，我们可以去docker中央仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a>  查看，从中我们可以看到该名称镜像历史的release的版本，我们可以根据需求选择自己需要的版本。</p><h1 id="docker常用管理命令"><a href="#docker常用管理命令" class="headerlink" title="docker常用管理命令"></a>docker常用管理命令</h1><p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 | 菜鸟教程 (runoob.com)</a><br>service docker start # 启动docker服务器</p><p>(1) 拉取某个镜像</p><p><code>docker pull xxxx</code></p><p>(2)查看镜像与删除镜像</p><p>查看所有镜像：<code>docker images</code></p><p>删除镜像 ：<code>docker rmi xxxx</code></p><p>注意：删除镜像前必须先停用、删除该镜像产生的实例</p><p>(3) 查看与删除实例</p><p>查看所有实例：<code>docker ps -a</code></p><p>查看activate实例：<code>docker ps</code></p><p>删除实例：<code>docker rm xxx</code></p><p>(4)根据镜像创造docker 实例,这里以nginx为例</p><p><code>docker run --name nginx -p 80:80 -v /root/docker_conf/nginx/nginx.conf:/etc/nginx/nginx.conf -d docker.io/nginx</code></p><p>其中: -name是镜像的名称,  -p 是端口映射, -v 是绑定一个卷, 我们可以把自己的文件目录映射到镜像内部目录, 冒号前面为自己的实际机器, :后面是对应镜像的目录。</p><p>(5) 当docker 启动失败的时候debug原因：</p><p><code>docker logs xxID</code></p><p>(6) 进入实例</p><p>根据上面的命令创建的实例之后，如果成功的话会默认启动实例，我们可以使用下列命令进入到该实例内部：</p><p><code>docker exec -it nginx bash</code></p><p><code>docker run -it --rm ubuntu /bin/bash</code>    运行存在的镜像，并以交互的方式进入容器，运行完删除容器 </p><p>(7) 复制文件到实例内部系统</p><p><code>docker cp my.cnf mysql5.7:/etc/mysql/my.cnf</code></p><p>把宿主机文件拷到容器里面<br><code>docker cp 要拷贝的文件路径 容器名: 要拷贝到容器里面对应的路径</code></p><p>容器里面拷文件到主机<br><code>docker cp 容器名: 要拷贝的文件在容器中的路径 要拷贝到宿主机器的响应路径</code></p><p>(8)  实例内系统安装软件</p><p>实例内也是一个操作系统，我们可以安装需要使用的程序：</p><p><code>apt update</code></p><p>例如安装vim命令 :  <code>apt install vim</code></p><p>(9) 停止,启动,重新启动docker 实例</p><p><code>docker start/stop/restart xxx</code></p><p>(10)  卸载docker</p><p><code>yum remove docker-ce</code></p><p>删除镜像、容器、配置文件等内容：</p><p><code>rm -rf /var/lib/docker</code></p><h2 id="docker-资源管理命令"><a href="#docker-资源管理命令" class="headerlink" title="docker 资源管理命令"></a>docker 资源管理命令</h2><p>docker 镜像在很多时候会耗占比较多的内存和cpu, 甚至某个镜像被用来挖矿的情况下, cpu会达到100%(都是血与泪的实践经历啊)， 所以我们可以使用下面的命令来限制性设置某个实例的内存与cpu占用量。</p><p>(1) docker 各个镜像资源使用情况查看(包括cpu和内存)：</p><p><code>docker stats</code></p><p>(2)  限制docker 内存</p><p><code>docker update -m 20M --memory-reservation 20M --memory-swap 20M nginx</code></p><p>（3）限制docker cpu</p><p><code>docker update --cpu-period=100000 --cpu-quota=20000 nginx</code></p><p>在每 100 毫秒的时间里，运行进程使用的 CPU 时间最多为 20 毫秒，这里仅仅考虑百分比。</p><h1 id="docker-常用软件管理"><a href="#docker-常用软件管理" class="headerlink" title="docker 常用软件管理"></a>docker 常用软件管理</h1><h4 id="docker-部署私有的笔记服务-wiznote"><a href="#docker-部署私有的笔记服务-wiznote" class="headerlink" title="docker 部署私有的笔记服务 wiznote"></a>docker 部署私有的笔记服务 wiznote</h4><p>作为一个对写代码有追求的程序员，有一个自己用起来顺手的笔记服务是必不可少的，作者经过大量的筛选，目前主要在使用的就是wiznote 这个软件，个人用户使用5个账号内免费，并且个人功能上的需求完全可以满足，使用docker部署也非常简单便利。</p><p>(1) 部署过程如下：</p><p><code>docker run --name wiz --restart=always -it -d -v /root/docker_conf/wiz_wiki_dat:/wiz/storage -v /etc/localtime:/etc/localtime -p 9191:80 -p 9269:9269/udp wiznote/wizserve</code></p><p>然后我们访问 <code>http://ip:9191</code> 网址即可以访问我们自己的笔记后端服务了。</p><p>初始账号：<code>admin@wiz.cn</code>,  密码：<code>123456，</code>输入后记得自行进行修改啊，否则可能导致被他人登陆。</p><h4 id="docker-部署-mysql"><a href="#docker-部署-mysql" class="headerlink" title="docker 部署 mysql"></a>docker 部署 mysql</h4><p>（1）docker 部署 mysql</p><p>参考wiki: <a href="https://blog.csdn.net/weixin_43888891/article/details/122518719">https://blog.csdn.net/weixin_43888891/article/details/122518719</a></p><p><code>docker pull mysql:5.7   docker run -itd --name mysql5.7 --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=you_mysql_pwd docker.io/mysql:5.7    进入docker 内部：docker exec -it mysql5.7 bash   </code></p><p>(2) 配置数据库可以远程访问</p><p><code>docker exec -it mysql5.7 bash   grant all on *.* to root@&#39;%&#39; identified by &#39;you_mysql_pwd&#39; with grant option;      </code></p><p>(3) 优化docker MySQL 配置</p><p>更新 my.cnf 文件</p><p><code>[mysqld]      max_connect_errors = 1000      lower_case_table_names = 1      performance_schema_max_table_instances = 200      table_definition_cache = 100      table_open_cache = 100      innodb_buffer_pool_size=2M      performance_schema=off   </code></p><p>更新 docker.cnf  文件</p><p><code>skip-host-cache   skip-name-resolve</code> </p><p>（4）覆盖docker 内部文件配置</p><p><code>docker cp docker.cnf  mysql5.7:/etc/mysql/conf.d/docker.cnf   docker cp my.cnf  mysql5.7:/etc/mysql/my.cnf   </code></p><p>(5)  限制docker MYSQL 内存和cpu使用</p><p><code>docker update -m 800M --memory-reservation 800M --memory-swap 800M mysql5.7   docker update  --cpu-period=100000 --cpu-quota=20000 mysql5.7</code></p><h4 id="docker-部署-redis"><a href="#docker-部署-redis" class="headerlink" title="docker 部署 redis"></a>docker 部署 redis</h4><p>(1) docker 使用redis</p><p>docker run –name redis -p 6379:6379 -v &#x2F;root&#x2F;docker_conf&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf -d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</p><p>我们可以把redis常用的配置文件放在 &#x2F;root&#x2F;docker_conf&#x2F;redis&#x2F;redis.conf 这个路径下。</p><p>(2) 外面访问容器里的redis服务</p><p><code>docker exec -it redis redis-cli</code></p><p>(3) 限制redis内存访问</p><p><code>docker update -m 50M --memory-reservation 50M --memory-swap 50M redis</code></p><p>然后我们就可以通过 ip: 6379 端口访问我们的redis 服务了。</p><h4 id="docker-部署-nginx"><a href="#docker-部署-nginx" class="headerlink" title="docker 部署 nginx"></a>docker 部署 nginx</h4><p>(1) docker 使用 nginx</p><p><code>docker pull nginx</code></p><p>&#x2F;&#x2F; 本机卷映射 nginx卷</p><p><code>docker run --name nginx -p 80:80 -v /root/docker_conf/nginx/nginx.conf:/etc/nginx/nginx.conf -d docker.io/nginx</code></p><p>(2) 限制docker 使用内存</p><p><code>docker update -m 50M --memory-reservation 50M --memory-swap 50M nginx</code></p><p>注意，使用docker 之后，映射的服务IP应该改成外部IP，在使用127.0.0.1会报错。</p><p>（3）配置nginx conf</p><p><code>/root/docker_conf/nginx下nginx.conf</code></p><p>这样我们修改本机器上的&#x2F;root&#x2F;docker_conf&#x2F;nginx&#x2F;nginx.conf  路径下的配置文件，就可以直接影响docker nginx服务的配置了。</p><p>然后我们就可以通过 <a href="http://ip/">http://ip:80</a>  端口访问我们的 nginx  服务了。</p><h4 id="docker-部署-gitea"><a href="#docker-部署-gitea" class="headerlink" title="docker 部署 gitea"></a>docker 部署 gitea</h4><p>在很多时候我们会需要部署我们自己的git版本管理仓库，可以使用gitea 这个开源版本库，非常好用，使用docker部署也非常简单。</p><p>(1) 拉取gitea仓库</p><p><code>docker pull gitea/gitea</code></p><p>(2)  启动gitea 实例与服务</p><p><code>docker run -d --privileged=true --restart=always --name=gitea -p 20022:22 -p 3000:3000 -v /root/docker_conf/gitea:/data gitea/gitea:latest</code></p><p>在下面我们就可以使用 <code>http://ip:3000</code> 去访问我们的git服务了。</p><h1 id="docker-镜像文件保存与加载"><a href="#docker-镜像文件保存与加载" class="headerlink" title="docker 镜像文件保存与加载"></a>docker 镜像文件保存与加载</h1><p>(1) 保存docker 镜像文件到本地：</p><p><code>docker save nginx &gt;./nginx.tar</code></p><p>(2)  在另一台主机加载本地文件到镜像 ：</p><p><code>docker load &lt; nginx.tar</code></p><p>然后看 docker images ，就能看到该镜像 ，但是名字和标签都是none</p><p>（3）执行完上述语句后，查看本地镜像，会看到新加载的镜像名字和标签都是none，利用该镜像的id对名字和标签重新命名即可：</p><p><code>指令：docker tag 镜像id 镜像名:标签      docker tag 172825a55619 confluence6.12_cracked:0.1   </code></p><p>(4) 启动镜像</p><p><code>docker run -it --name nginx 172825a55619 /bin/bash</code></p><h1 id="docker-镜像文件的提交与上传到中央仓库"><a href="#docker-镜像文件的提交与上传到中央仓库" class="headerlink" title="docker 镜像文件的提交与上传到中央仓库"></a>docker 镜像文件的提交与上传到中央仓库</h1><p>很多时候，我们会需要在已有的镜像上进行一些自定义修改，然后重新打包上传自己的镜像供别人使用，我们可以使用下面的流程来上传自己新打包的镜像到中央仓库。</p><p>(5.1)  官网账号注册</p><p>首先我们先到docker官网注册一个账号，这样我们才能将制作好的镜像上传到docker仓库，</p><p>打开 <code>https://hub.docker.com/</code></p><p>(5.2) 提交自己要上传的镜像</p><p><code>docker commit Container_name yourdockerhub/nginx:latest</code></p><p>注意：commit 对包名命名有要求，Container_name 容器名称,yourdockerhub改成自己的账号，否则无法上传</p><p>(5.3)  登录到远程docker仓库(输入自己注册的账号和密码)</p><p><code>docker login</code></p><p>(5.4)  上传至docker云端</p><p><code>docker push yourdockerhub/nginx:latest</code><br>注意: 这里push 对包名命名有要求，yourdockerhub改成自己的账号，否则无法上传 上传成功了就可以在中央仓库你的账号下搜到你刚上传的镜像了。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Metaspoit</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/Metaspoit.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/Metaspoit.html</url>
      
        <content type="html"><![CDATA[<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>运行下面的命令来初始化其数据库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mfsdb init</span><br></pre></td></tr></table></figure><p>通过运行下面的命令来启动Metasploit。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ msfconsole</span><br></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>MSF框架由多个模块组成，几个主要模块及其具体功能如下。</p><ol><li>Auxiliaries（辅助模块）</li></ol><p>  该模块不会直接在测试者和目标主机之间建立访问，它们只会负责执行扫描、嗅探、识别等相关功能以辅助渗透测试。</p><ol start="2"><li>Exploit（漏洞利用模块）</li></ol><p>  漏洞利用模块用于以允许框架执行任意代码的方式利用漏洞。执行的任意代码称为有效载荷。</p><ol start="3"><li>Payload（攻击载荷模块）</li></ol><p>  在 Metasploit 漏洞利用模块的上下文中，有效负载模块封装了作为漏洞利用成功结果而执行的任意代码（shellcode）。这通常涉及创建 Metasploit 会话，但可能会执行代码，例如添加用户帐户，或执行一个简单的 pingback 命令来验证代码是否成功针对易受攻击的目标执行。</p><ol start="4"><li>Post（后期渗透模块）</li></ol><p>  该模块主要用于在取得目标系统远程控制权后，进行一系列的后渗透攻击动作，如获取敏感信息、实施跳板攻击等。</p><ol start="5"><li>Encoders（编码工具模块）</li></ol><p>  编码器接收有效载荷的原始字节并运行某种编码算法，例如按位异或。这些模块对于编码诸如空字节之类的不良字符非常有用。</p><p>使用MSF渗透测试时，可以综合使用以上模块，对目标系统进行侦察并发动攻击，大致的步骤如下所示。</p><ul><li>扫描目标机系统，寻找可用漏洞。  </li><li>选择并配置一个漏洞利用模块。  </li><li>选择并配置一个攻击载荷模块。  </li><li>选择一个编码技术，用来绕过杀毒软件的查杀。  </li><li>渗透攻击。</li></ul><h1 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h1><p><a href="https://blog.csdn.net/RFZ_322/article/details/123367668">(13条消息) Kali利用msf渗透Windows电脑（超详细）_kali msf_HonkerG的博客-CSDN博客</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test1.elf | msfvenom -p - -a x64 --platform linux -e x86/shikata_ga_nai -f elf -o test1e.elf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 病毒免杀 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vscode</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/Vim/Vscode.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/Vim/Vscode.html</url>
      
        <content type="html"><![CDATA[<h1 id="输入法切换"><a href="#输入法切换" class="headerlink" title="输入法切换"></a>输入法切换</h1><p>设置 NORMAL 模式下的输入法为英文， 方便进行 vim 指令操作。</p><ul><li>Windows scoop 安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add im-select https://github.com/daipeihust/im-select</span><br><span class="line">scoop install im-select</span><br></pre></td></tr></table></figure><ul><li>需要在系统设置中添加中英文语言包，需要下载中文（简体，中国）和英语（美国），im-select只能实现语言包的切换而不是输入法切换</li></ul><p><img src="https://pic2.zhimg.com/80/v2-0363b1bd3d95acafbd40c8a7753cc579_1440w.webp"></p><ul><li>勾选”允许为每个应用窗口使用不同输入法“选项</li></ul><p><img src="https://pic4.zhimg.com/80/v2-e669a6a0b276e4e6681945db58a4457b_1440w.webp"></p><ul><li>随后在im-select.exe所在文件夹打开shell窗口，执行.\im-select.exe之后会返回当前输入语言的句柄值，我的电脑中文使用搜狗输入法，执行.\im-select.exe后其返回值为2052，切换到英文输入法后再次执行.\im-select.exe，其返回值为1033</li></ul><p><img src="https://pic2.zhimg.com/80/v2-375c217fb1a32f6bdeaafc9994218ead_1440w.webp"></p><ul><li>随后执行.\im-select.exe 1033以及.\im-select.exe 2052测试输入语言可以正常切换，说明可以利用shell借助im-select进行输入语言切换<br><img src="https://pic1.zhimg.com/80/v2-818948118122b86a622c7331bfaea758_1440w.webp"><br>然后再到 settings.json 中加入以下配置项即可完成输入法在 INSERT 模式以及 NORMAL 模式下的自动切换。<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动切换输入法</span></span><br><span class="line">   <span class="attr">&quot;vim.autoSwitchInputMethod.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;vim.autoSwitchInputMethod.defaultIM&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1033&quot;</span><span class="punctuation">,</span>  <span class="comment">// 这里输入你刚刚获得的英文输入法名称</span></span><br><span class="line">   <span class="attr">&quot;vim.autoSwitchInputMethod.obtainIMCmd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Users/User/scoop/apps/im-select/current/im-select.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;vim.autoSwitchInputMethod.switchIMCmd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:/Users/User/scoop/apps/im-select/current/im-select.exe &#123;im&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hangx-ma.github.io/2023/03/14/vsvim-keyborad-setting.html#22-%E7%83%AD%E9%94%AE%E9%85%8D%E7%BD%AE%E5%8C%BA%E5%9F%9F%E8%AF%B4%E6%98%8E">VSCodeVim 配置指南 - 一只豆腐 (hangx-ma.github.io)</a><br><a href="https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim">Boost Your Coding Fu With VSCode and Vim - The Book | Barbarian Meets Coding</a></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Linux/Ubuntu.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Linux/Ubuntu.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu修改终端上显示的用户名和主机名"><a href="#Ubuntu修改终端上显示的用户名和主机名" class="headerlink" title="Ubuntu修改终端上显示的用户名和主机名"></a>Ubuntu修改终端上显示的用户名和主机名</h1><p><a href="https://blog.nowcoder.net/n/9719c38265a44e23a0c7b4b9f0225b72?from=nowcoder_improve">Ubuntu修改终端上显示的用户名和主机名（详细步骤）_牛客博客 (nowcoder.net)</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/Go/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Linux.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/Go/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/Linux.html</url>
      
        <content type="html"><![CDATA[<ol><li>下载安装包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ol start="2"><li>解压至 &#x2F;usr&#x2F;local目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/local -xzf go1.12.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>修改环境变量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件后面增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOPATH=$HOME/gopath</span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure><ol start="4"><li>保存并退出，并执行</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure><ol start="5"><li>重启系统</li><li>查看是否安装成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> Go </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fatrat</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/fatrat.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%97%85%E6%AF%92%E5%85%8D%E6%9D%80/%E5%B7%A5%E5%85%B7/fatrat.html</url>
      
        <content type="html"><![CDATA[<p>1、git clone <a href="https://github.com/Screetsec/TheFatRat.git">https://github.com/Screetsec/TheFatRat.git</a><br>2、cd TheFatRat<br>3、apt install mingw-w64<br>4、chmod +x setup.sh<br>5、.&#x2F;setup.sh<br>6、chmod +x powerfull.sh<br>7、chmod +x fatrat<br>8、.&#x2F;fatrat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mono-complete</span><br><span class="line">apt-get install gnome-terminal</span><br><span class="line">apt-get install default-jdk default-jre</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/leiwuhen92/article/details/128304999">(12条消息) 14、TheFatRat木马生成工具-创建后门或payload_thefatrat生成apk_青霄的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 病毒免杀 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/WSL/WSL.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/WSL/WSL.html</url>
      
        <content type="html"><![CDATA[<h1 id="wsl搬迁"><a href="#wsl搬迁" class="headerlink" title="wsl搬迁"></a>wsl搬迁</h1><p>如果我们是通过Windows Store进行安装的，就会默认安装到C盘。在使用过程中，WSL占用空间会越来越大，很容易让C盘爆满，所以我们需要将其迁移到其他非C盘的地方。</p><h3 id="终止正在运行的wsl"><a href="#终止正在运行的wsl" class="headerlink" title="终止正在运行的wsl"></a>终止正在运行的wsl</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h3 id="将需要迁移的Linux，进行导出"><a href="#将需要迁移的Linux，进行导出" class="headerlink" title="将需要迁移的Linux，进行导出"></a>将需要迁移的Linux，进行导出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-18.04 D:\wsl\export</span><br></pre></td></tr></table></figure><h3 id="导出完成之后，就需要将原有的分发进行卸载"><a href="#导出完成之后，就需要将原有的分发进行卸载" class="headerlink" title="导出完成之后，就需要将原有的分发进行卸载"></a>导出完成之后，就需要将原有的分发进行卸载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-18.04</span><br></pre></td></tr></table></figure><h3 id="然后将导出的文件放到需要保存的地方，进行导入即可"><a href="#然后将导出的文件放到需要保存的地方，进行导入即可" class="headerlink" title="然后将导出的文件放到需要保存的地方，进行导入即可"></a>然后将导出的文件放到需要保存的地方，进行导入即可</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu-18.04 D:\wsl D:\wsl\export --version 2</span><br></pre></td></tr></table></figure><p>注意：如果导入后终端查找不到wsl，可以重启系统后再打开终端。</p><p>这时打开终端，进的是root系统，还需要：</p><h3 id="设置默认登陆用户为安装时用户名"><a href="#设置默认登陆用户为安装时用户名" class="headerlink" title="设置默认登陆用户为安装时用户名"></a>设置默认登陆用户为安装时用户名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myUsername=caloewen</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[user]\ndefault=<span class="variable">$myUsername</span>&quot;</span> &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>重启终端</p><h1 id="WSL2-优化"><a href="#WSL2-优化" class="headerlink" title="WSL2 优化"></a>WSL2 优化</h1><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>随着使用时间的延长，WSL2占用的硬盘空间会越来越多，这个时候就需要对其文件进行压缩。方法如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line">diskpart</span><br><span class="line"><span class="comment"># open window Diskpart</span></span><br><span class="line"><span class="built_in">select</span> vdisk file=<span class="string">&quot;C:\Users\Ci\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\ext4.vhdx&quot;</span></span><br><span class="line"><span class="comment"># select vdisk file=&quot;C:\Users\Ci\AppData\Local\Packages\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\LocalState\ext4.vhdx&quot;</span></span><br><span class="line">attach vdisk readonly</span><br><span class="line">compact vdisk</span><br><span class="line">detach vdisk</span><br></pre></td></tr></table></figure><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>当然，WSL2也会带来内存占用的问题，可以打开<code>$home/.wslconfig</code>，进行如下设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">wsl2</span>]</span><br><span class="line">memory=<span class="number">4</span>GB</span><br><span class="line">swap=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="wsl-2-设置静态-DNS-服务地址及-Linux-和-Windows-主机网络互相访问设置"><a href="#wsl-2-设置静态-DNS-服务地址及-Linux-和-Windows-主机网络互相访问设置" class="headerlink" title="wsl 2 设置静态 DNS 服务地址及 Linux 和 Windows 主机网络互相访问设置"></a>wsl 2 设置静态 DNS 服务地址及 Linux 和 Windows 主机网络互相访问设置</h1><p>DNS 解析<br>wsl 2 使用的 DNS 解析服务器设置在文件：&#x2F;etc&#x2F;resolv.conf 内设置，这是一个 link 文件，真正的文件路径是：&#x2F;run&#x2F;resolvconf&#x2F;resolv.conf，这个文件是每次 wsl 启动时自动生成的，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span></span><br><span class="line"><span class="comment"># [network]</span></span><br><span class="line"><span class="comment"># generateResolvConf = false</span></span><br><span class="line">nameserver 172.24.144.1</span><br></pre></td></tr></table></figure><p>nameserver 后面的就是指定的 DNS 服务器地址。我发现有时候分配的服务器地址是无效的，如：127.0.0.53，使用 ping 来测试发现提示无法解析地址。需要设置一个固定的 DNS 地址，方法如下：</p><p>新建文件：&#x2F;etc&#x2F;wsl.conf，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>以上配置好就不会自动创建 &#x2F;run&#x2F;resolvconf&#x2F;resolv.conf 文件了。</p><p>退出 wsl，关机然后重新启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line">wsl --shutdown</span><br><span class="line">wsl</span><br></pre></td></tr></table></figure><p>删除 link 文件：&#x2F;etc&#x2F;resolv.conf:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>然后新建 &#x2F;etc&#x2F;resolv.conf 文件，内容如下，可自定义 nameserver 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure><p>再次退出 wsl，关机然后重新启动<br>查看 &#x2F;etc&#x2F;resolv.conf 文件是否是之前自定义的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>测试网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping niekun.net</span><br></pre></td></tr></table></figure><p>如果你想对将要安装的 deb 软件包使用 dpkg 命令，在这里是如何完成它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i path_to_deb_file</span><br></pre></td></tr></table></figure><h1 id="记录windows11安装WSL2配置环境时遇到的坑，以及一些常用命令（持续更新）"><a href="#记录windows11安装WSL2配置环境时遇到的坑，以及一些常用命令（持续更新）" class="headerlink" title="记录windows11安装WSL2配置环境时遇到的坑，以及一些常用命令（持续更新）"></a>记录windows11安装WSL2配置环境时遇到的坑，以及一些常用命令（持续更新）</h1><p><a href="https://blog.csdn.net/luyuyingyingying/article/details/123110417">https://blog.csdn.net/luyuyingyingying/article/details/123110417</a></p><h1 id="WSL-systemd"><a href="#WSL-systemd" class="headerlink" title="WSL_systemd"></a>WSL_systemd</h1><p>安装好新版wsl后，通过以下命令来配置wsl启用 systemd:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[boot]\nsystemd=true&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>配置后需要通过<code>wsl --shutdown</code>命令关闭wsl，来进行wsl的完整重启。</p><h3 id="如何判断systemd是否启用成功"><a href="#如何判断systemd是否启用成功" class="headerlink" title="如何判断systemd是否启用成功"></a>如何判断systemd是否启用成功</h3><p>判断wsl是否已启用systemd，可通过以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps --no-headers -o <span class="built_in">comm</span> 1</span><br></pre></td></tr></table></figure><p>如果命令返回的是<code>init</code>说明systemd未启用，如果是<code>systemd</code>那么你的systemd已启用成功了。</p><h3 id="查看已启用的systemd-service"><a href="#查看已启用的systemd-service" class="headerlink" title="查看已启用的systemd service"></a>查看已启用的systemd service</h3><p>通过systemctl的list-units、list-unit-files命令，都可以很好的查看目前的systemd状态，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service --state=enabled</span><br></pre></td></tr></table></figure><h3 id="解决exec-Exec-format-error"><a href="#解决exec-Exec-format-error" class="headerlink" title="解决exec: Exec format error"></a>解决exec: Exec format error</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;echo :WSLInterop:M::MZ::/init:PF &gt; /usr/lib/binfmt.d/WSLInterop.conf&#x27;</span><br></pre></td></tr></table></figure><p>After <code>wsl --shutdown</code> and logging back in, now next to systemd, <code>explorer.exe</code> and the like are finally working again!<br><a href="https://github.com/microsoft/WSL/issues/8843">[WSL2][systemd][interop] Unable to Execute Windows Binary when systemd enabled · Issue #8843 · microsoft&#x2F;WSL (github.com)</a></p><h3 id="启用-systemd-支持后无法从-wsl2-运行-exe"><a href="#启用-systemd-支持后无法从-wsl2-运行-exe" class="headerlink" title="启用 systemd 支持后无法从 wsl2 运行 exe"></a>启用 systemd 支持后无法从 wsl2 运行 exe</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-binfmts --disable cli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> WSL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kail-linux</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/WSL/kail-linux.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/WSL/kail-linux.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kali"><a href="#Kali" class="headerlink" title="Kali"></a>Kali</h1><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>安装完成后，在 Kali Linux 下，输入如下命令，安装工具集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install -y kali-linux-default</span><br></pre></td></tr></table></figure><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h3><p>当然为了更好的体验 Kali，我们可以安装官方推荐的 GUI —— Win-KeX。输入如下命令，进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y kali-win-kex</span><br><span class="line">sudo mount -o remount,rw /tmp/.X11-unix</span><br></pre></td></tr></table></figure><p>安装完毕后，可使用如下命令启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">kex</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">kex stop</span><br><span class="line"><span class="comment"># 窗口模式</span></span><br><span class="line">kex --win -s</span><br></pre></td></tr></table></figure><p><a href="https://www.kali.org/docs/wsl/win-kex/#install-kali-linux-in-wsl2">Win-KeX | Kali Linux Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> WSL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Deepin网线未连接</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/%E8%99%9A%E6%8B%9F%E6%9C%BADeepin%E7%BD%91%E7%BA%BF%E6%9C%AA%E8%BF%9E%E6%8E%A5.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/%E8%99%9A%E6%8B%9F%E6%9C%BADeepin%E7%BD%91%E7%BA%BF%E6%9C%AA%E8%BF%9E%E6%8E%A5.html</url>
      
        <content type="html"><![CDATA[<p>不小心将虚拟机<a href="https://so.csdn.net/so/search?q=ubuntu&spm=1001.2101.3001.7020">ubuntu</a>&#x2F;deepin强制关机后，重启之后系统显示网卡未连接。<br>解决办法：<br>编辑文件&#x2F;etc&#x2F;network&#x2F;interfaces:<br>sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces，在文件里加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br></pre></td></tr></table></figure><p>最后执行  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> Vmware </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker_desktop</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/Docker_desktop.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Docker/Docker_desktop.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装Docker-Desktop"><a href="#安装Docker-Desktop" class="headerlink" title="安装Docker Desktop"></a>安装Docker Desktop</h2><p>平时要使用Docker不想安装虚拟机，也不想买服务器时推荐安装官方提供的「Docker Desktop」</p><p>1、官网下载安装包：<a href="https://www.docker.com/">https://www.docker.com</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2VkPZdiaZGTgTe0HGic8iawjIAFbZ3Bup8TjFHD84KrMVibEm3kajP7JyodA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><hr><p>2、修改默认安装位置</p><p>默认是安装在C盘中的并且无法修改，后续下载一些镜像时也会存放在C盘，我这里通过「mklink创建软链接」的方式，将文件映射到我的D盘中，先在D盘创建好如下四个目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir D:\Docker  </span><br><span class="line">mkdir D:\Docker\Local  </span><br><span class="line">mkdir D:\Docker\Roaming\Docker  </span><br><span class="line">mkdir &quot;D:\Docker\Roaming\Docker Desktop&quot;</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2VMKhuF7fgt3FCKzSHAJ2L4TPrXlqJVtKfJ3NHzyBTAJpQVb39n8icWtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">然后以管理员身份打开cmd，在打开的cmd窗口中依次执行下面四个<code>mklink</code>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mklink /j &quot;C:\Program Files\Docker&quot; &quot;D:\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Local\Docker&quot; &quot;D:\Docker\Local&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker&quot; &quot;D:\Docker\Roaming\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker Desktop&quot; &quot;D:\Docker\Roaming\Docker Desktop&quot;</span><br></pre></td></tr></table></figure><p>3、安装<strong>「Docker Desktop」</strong></p><p>配置使用WSL 2而不是Hyper-v（推荐）向桌面添加快捷方式<br><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2Vuvmvsg0gUgt2Y9j8JtDibZEibeu9HphwCyOOvaFr4LpVDWp8Vwib21NsA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这一步安装成功必须要重启电脑<img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2ViapTXXedQwyibejxaRHtUyZicd01ybTxmYugsibGTHMJo1tTOOh61ibVPMw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">重启后出现以下页面，同意即可<img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2Vloyzg83sib2xnqHA2jprQ7pib0BYonpyvhItjeEyZSfhfca5Zsrlcojw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">Accept后出现以下弹窗：Docker Desktop需要更新的WSL内核版本。通过运行“wsl –update”更新WSL内核，或按照以下位置的说明进行操作<a href="https://docs.microsoft.com/windows/wsl/wsl2-kernel">https://docs.microsoft.com/windows/wsl/wsl2-kernel</a><br>再次打开Docker Desktop，看到如下界面即安装完成了</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2V5qT87UZmKhLXPaC6KfiaNicX7apuibYjcN4MNZlawM0icbQKHyNXVxbDDQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="更改镜像下载源"><a href="#更改镜像下载源" class="headerlink" title="更改镜像下载源"></a>更改镜像下载源</h2><p>下载镜像时默认是从官方的Docker Hub拉取镜像的由于速度会比较感人，所以需要更改使用国内的镜像源</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2Vu2Qiacf8nvicQBtMiaDqCEdLwC4JlJtxyMfa9ah14ttcia7OibibyMibzbg3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">复制以下代码覆盖掉要更改部分，重启Docker Desktop即可，<strong>「registry-mirrors」</strong>配的都是国内的一些镜像源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;defaultKeepStorage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20GB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;buildkit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://cr.console.aliyun.com/&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/NNkTqKo6k1o6kVdVR59kWXovotCjRD2VQaibPr2JB2aSUstbywoibXZYtfxd4YucNgUxO0qjxGUp9UE6JTiade65g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/ErDeO9e1aaOIRMkfnfXU7Q">Windows中也可以安装使用Docker (qq.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>入门使用</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/Xmake/%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/Xmake/%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<p><strong>建项目</strong></p><p>xmake也完全支持对Qt5项目的维护和构建。先举一个简单的入门例子：</p><p>创建一个名叫 hello 的c语言控制台工程（-l选项指定语言，若是cpp则指定为-l c++）：</p><p>-P 工程名(目录名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake create -l c -P ./hello</span><br></pre></td></tr></table></figure><p>执行完后，将会生成一个简单工程结构：</p><p><img src="https://img-blog.csdnimg.cn/95296c5f129c49ea9d8af7dd1e32ca99.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54m556uL54us6KGM55qE54yrYQ==,size_20,color_FFFFFF,t_70,g_se,x_16"> 其中<code>xmake.lua</code>是工程描述文件，内容非常简单，告诉xmake添加<code>src</code>目录下的所有<code>.c</code>源文件：</p><p><img src="https://img-blog.csdnimg.cn/de04333d9525474089184bc98934c787.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54m556uL54us6KGM55qE54yrYQ==,size_20,color_FFFFFF,t_70,g_se,x_16"> <strong>构建项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake</span><br></pre></td></tr></table></figure><p><strong>运行程序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake run hello</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a72a97ee54ec4789bb184159007c69bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54m556uL54us6KGM55qE54yrYQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>调试程序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake run -d hello </span><br></pre></td></tr></table></figure><h3 id="QT的项目创建"><a href="#QT的项目创建" class="headerlink" title="QT的项目创建"></a>QT的项目创建</h3><p>基于qt的项目，也是秒建。</p><p>举例，创建一个带qml的quickapp空工程，只需要敲如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake create -t qt.quickapp test</span><br></pre></td></tr></table></figure><p>xmake会生成带有xmake.lua的Qt项目，xmake.lua内容也很简单。 </p><p><img src="https://img-blog.csdnimg.cn/d7f2ddaef9674697aa5ce2ca803bf23e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA54m556uL54us6KGM55qE54yrYQ==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>会自动检测你的qt本机安装的环境，自动的找到。当然也可以指定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake f --qt=/home/xxx/qtsdk</span><br></pre></td></tr></table></figure><p>或者设置到全局路径，避免每次编译切换都要配置一遍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake g --qt=/home/xxx/qtsdk</span><br></pre></td></tr></table></figure><p> 除了源文件的添加，其他基本上都跟之前的可执行程序项目没什么不同，唯一的区别就是通过<code>add_rules(&quot;qt.quickapp&quot;)</code>这个内置的Qt构建规则来代替<code>set_kind(&quot;binary&quot;)</code>。</p><p>其实<code>qt.quickapp</code>规则内部最终还是设置了binary类型，只不过在此基础上额外增加了一些只有Qt才需要的构建规则，比如：特定links，flags还有includedirs等。</p><p>运行下看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake run</span><br></pre></td></tr></table></figure><h3 id="运行和断点调试"><a href="#运行和断点调试" class="headerlink" title="运行和断点调试"></a>运行和断点调试</h3><p>我们可以通过<code>xmake run -d</code>命令来加载gdb&#x2F;lldb调试程序，或者搭配xmake-vscode插件的断点调试支持，来开发和调试Qt程序。 这块可以阅读前文：<a href="https://link.zhihu.com/?target=https://tboox.org/cn/2019/11/09/quickstart-3-run-and-debug/" title="xmake从入门到精通3：运行和调试目标程序">xmake从入门到精通3：运行和调试目标程序</a></p><h3 id="集成vcpkg包管理"><a href="#集成vcpkg包管理" class="headerlink" title="集成vcpkg包管理"></a>集成vcpkg包管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake f --vcpkg=F:\vcpkg</span><br></pre></td></tr></table></figure><p>比如加载以下库，xmake.lua示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(&quot;vcpkg::zlib 1.2.11&quot;)target(&quot;test&quot;)    add_files(&quot;src/*.c&quot;)    add_packages(&quot;vcpkg::zlib&quot;)</span><br></pre></td></tr></table></figure><p>至于加载conan的库，需要下载exe文件。安装后，配置path路径，然后就可以使用了如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(&quot;conan::poco/1.9.4&quot;, &#123;alias = &quot;poco&quot;, debug = true&#125;)</span><br></pre></td></tr></table></figure><h3 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h3><p>注意添加代理,这样访问github会快：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$xmake g --proxy_pac=github_mirror.lua  </span><br></pre></td></tr></table></figure><h3 id="关于包管理"><a href="#关于包管理" class="headerlink" title="关于包管理"></a>关于包管理</h3><p>关于包管理，虽然现在已经有了homebrew, vcpkg等包管理工具来解决这一问题，但是多少都有一些局限性。</p><p>例如：</p><ol><li>homebrew不支持iphoneos, android, windows平台。</li><li>vcpkg不支持语义版本选择，多版本管理。</li><li>都不支持项目管理和构建。</li></ol><p>做过c、c++开发的朋友都会有找库的痛苦。有时候要编译一个库，这个库又依赖其他的库，需要我们自己去搜索，下载，解压，编译安装，不同的平台编译方法有差异，编译好了又有可能发现需要的库的版本和我们下的不一致，工作要重头再来。</p><p>其他语言像java有maven对依赖的jar进行管理，像js有npm来做包管理，rust有cargo，主要这些语言要么背靠一个大公司，要么是一个独立的公司在运作，所以包管理作的都比较不错。</p><p>c或c++程序员就比较痛苦了，没有统一的包管理，都没有大规模流行起来，以至于很长时间我都不知道c、c++也有包管理器。后来发现c、c++ 也有些包管理器，比如微软的Vpckg在visual studio下使用；conan 有可能成为事实标准的包管理器，配合cmake，应用还是比较广泛。</p><p>关于conan ，conan这5年期间成长还是挺多的，现在可以用的库也达到了八百多个，如果没有的话，也可以很方便的自己写一个，上传到自己的私人包管理服务器里，C++开发终于有了cargo的感觉了。</p><h3 id="xmake的包管理工具xrepo"><a href="#xmake的包管理工具xrepo" class="headerlink" title="xmake的包管理工具xrepo"></a>xmake的包管理工具xrepo</h3><p>使用举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS F:\ccode\test&gt; xrepo search zlib</span><br><span class="line">The package names:</span><br><span class="line">    zlib:</span><br><span class="line">      -&gt; chromium_zlib-2022.02.22: zlib from chromium (in xmake-repo)</span><br><span class="line">      -&gt; zlib-v1.2.11: A Massively Spiffy Yet Delicately Unobtrusive Compression Library (in xmake-repo)</span><br><span class="line">      -&gt; zlib-ng-2.0.5: zlib replacement with optimizations for next generation systems. (in xmake-repo)</span><br><span class="line">PS F:\ccode\test&gt; xrepo install  zlib </span><br><span class="line">note: install or modify (m) these packages (pass -y to skip confirm)?</span><br><span class="line">in xmake-repo:</span><br><span class="line">  -&gt; zlib v1.2.11 [vs_runtime:&quot;MT&quot;]</span><br><span class="line">please input: y (y/n/m)</span><br><span class="line">y</span><br><span class="line">  =&gt; install zlib v1.2.11 .. ok       </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS F:\ccode\test&gt; xrepo list-repo</span><br><span class="line">global repositories:</span><br><span class="line">    vcpkg https://github.com/microsoft/vcpkg</span><br><span class="line">    conan https://github.com/conan-io/conan-center-index</span><br><span class="line">    build-artifacts https://gitee.com/xmake-mirror/build-artifacts.git main</span><br><span class="line">    xmake-repo https://gitee.com/tboox/xmake-repo.git master</span><br><span class="line">    builtin-repo D:\Program Files\xmake\repository</span><br><span class="line"> </span><br><span class="line">5 repositories were found!</span><br><span class="line">PS F:\ccode\test&gt; xrepo rm-repo conan</span><br><span class="line">remove global repository(conan): ok!</span><br></pre></td></tr></table></figure><p>在xmake.lua下写就更简单了，增加一句话就行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(&quot;zlib 1.2.11&quot;)</span><br></pre></td></tr></table></figure><p>还可以用其他包管理器的包，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_requires(&quot;vcpkg::zlib 1.2.11&quot;)</span><br><span class="line">target(&quot;test&quot;)</span><br><span class="line">    add_files(&quot;src/*.c&quot;)</span><br><span class="line">    add_packages(&quot;vcpkg::zlib&quot;)</span><br></pre></td></tr></table></figure><h3 id="build结果示例"><a href="#build结果示例" class="headerlink" title="build结果示例"></a>build结果示例</h3><p>举例，xmake.lua中增加如下库依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_requires(&quot;conan::poco/1.9.4&quot;, &#123;alias = &quot;poco&quot;, debug = true&#125;)</span><br></pre></td></tr></table></figure><p>build过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PS F:\ccode\<span class="built_in">test</span>&gt; xmake</span><br><span class="line">checking <span class="keyword">for</span> Microsoft Visual Studio (x64) version ... 2019</span><br><span class="line">note: install or modify (m) these packages (pass -y to skip confirm)?</span><br><span class="line"><span class="keyword">in</span> conan:</span><br><span class="line">  -&gt; conan::poco/1.9.4 latest [debug:y, vs_runtime:<span class="string">&quot;MT&quot;</span>]</span><br><span class="line">please input: y (y/n/m)</span><br><span class="line">y</span><br><span class="line">  =&gt; install conan::poco/1.9.4 latest .. ok</span><br><span class="line">[ 25%]: compiling.release src\main.c</span><br><span class="line">[ 50%]: linking.release test.exe</span><br><span class="line">[100%]: build ok!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Xmake </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>入门</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%87%AA%E5%88%B6%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%85%A5%E9%97%A8.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%87%AA%E5%88%B6%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="练习一·算式分割"><a href="#练习一·算式分割" class="headerlink" title="练习一·算式分割"></a>练习一·算式分割</h2><p>目标：我们可以将一个算式分为几个部分——数字（NUM），运算符（SIGN），左括号（LPA）和右括号（RPA）。现在希望让词法分析器可以分析出这四个部分，并将一个算式中的成分按格式打印出来。<br>本程序中数字的定义为正整数。你也可以对其做适当扩展，使得程序可以将实数匹配为数字。<br>希望得到的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入： 1+2*(3/4)-5</span><br><span class="line">输出：NUM SIGN NUM SIGN LPA NUM SIGN NUM RPA SIGN NUM</span><br></pre></td></tr></table></figure><p>提示：在相应规则的action中使用print&#x2F;printf进行输出，如果使用了C语言某个头文件的函数，记得在第一部分花括号内导入它。</p><p><strong>练习一参考答案：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">[1-9]+[0-9]*  printf(&quot;NUM &quot;);</span><br><span class="line">&quot;+&quot;|&quot;-&quot;|&quot;*&quot;|&quot;/&quot;  printf(&quot;SIGN &quot;);</span><br><span class="line">&quot;(&quot;printf(&quot;LPA &quot;);</span><br><span class="line">&quot;)&quot;printf(&quot;RPA &quot;);</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  yylex();</span><br><span class="line">  yywrap();</span><br><span class="line">&#125;</span><br><span class="line">int yywrap()</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>额外讲解：</strong><br>如果你想匹配实数，那么你应该将规则①的pattern这样来写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0|[1-9]+[0-9]*|[0-9]+&quot;.&quot;[0-9]+)  </span><br></pre></td></tr></table></figure><p>看到这段正则表达式，你可能会有些疑惑。因为这个表达式似乎只能匹配正实数，而事实也是如此。可能出乎你的意料，一旦需要在算式中匹配负数，那么这个问题立刻就变成了一个语法上的问题。因为表示负数的符号与减号相同，而根据此前所说的flex匹配规则，程序会尽量匹配长的字符串，如果加入负数的匹配，则5-6这个表达式就永远会被匹配成两个NUM——毕竟词法分析和语法分析两个任务是互相隔离的，在词法分析器根本不知道你规定的语法，它当然也就不可能明白这是两个数在做运算还是单纯的两个数。<br>在现在这个只掌握了flex的情况下，如果我们想要匹配到负数，最好的办法可能就是不用‘-’号表示负数，而改用其他的符号。<br>看到这里，你也许就能明白，为什么在C语言中，语法上是正确的语句（a++ + ++b）在编译时会报错了。在做词法分析时，它被分析成了a ++ ++ +b，显然这样看的话在语法上是错误的。<br>&#x2F;—–<br>除此之外，还有一个会令人苦恼的地方，那就是这段pattern写起来真是又长又难看，如果一不小心写错了，可能就会产生非常难找出的顽固BUG！<br>想要解决这个问题，我们就需要回到flex代码框架的第一段进行“定义”，关于这方面的内容，即将在第二个问题的答案中进行讲解。</p><p>&#x2F;——-  </p><h1 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h1><p>1.1【lex与yacc安装，gcc安装】<br>对于Unix和Linux选手来说，这些都是标配，因此这一段针对使用windows的学习者。<br>在windows平台上，我们使用<a href="https://so.csdn.net/so/search?q=flex&spm=1001.2101.3001.7020">flex</a>来代替lex，用bison来代替yacc，这两者完全可以提供我们需要的功能，且flex还是lex的加强版，它们可以在windows上运行，且是免费的。<br>此外，我们还需要使用gcc来将flex与bison翻译成的c文件编译为可执行的exe文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop install winflexbison</span><br><span class="line">scoop install msys2</span><br></pre></td></tr></table></figure><p>1.2【检测安装是否成功】<br>依旧以Windows为例，打开cmd（务必以<strong>管理员身份</strong>打开，否则可能会出现问题！），直接输入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flex -V //注意是大写的V</span><br><span class="line">bison -V //同大写的V</span><br><span class="line">gcc -v//注意是小写的v</span><br></pre></td></tr></table></figure><h1 id="二、flex入门"><a href="#二、flex入门" class="headerlink" title="二、flex入门"></a>二、flex入门</h1><h2 id="2-0【介绍】"><a href="#2-0【介绍】" class="headerlink" title="2.0【介绍】"></a>2.0【介绍】</h2><p>在具有结构化输入的程序中，反复出现的两个任务是：将输入分隔成有意义的单元，然后找出这些单元之间的关系。<br>而lex&#x2F;flex所做的就是生成<a href="https://so.csdn.net/so/search?q=%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8&spm=1001.2101.3001.7020">词法分析器</a>，以完成上面提高的第一个任务。先让新手在flex上入门是必然的，因为不分析词法，则分析语法没有意义。<br>通过编写特定的代码，在使用flex编译之后，就可以生成词法分析器的C程序。<br>使用lex&#x2F;flex制作词法分析器是很有必要的，因为lex将正则表达式转变为词法分析程序能够用来极快地扫描输入文本的形式，而且速度不依赖于词法分析程序尝试匹配的表达式的数量。这使得在绝大多数情况下，lex生成的词法分析器的速度都快速手写的程序。<br>本节我们就来学习，如何使用flex生成词法分析器。</p><h2 id="2-1【先编译一下已经完成的flex代码吧】"><a href="#2-1【先编译一下已经完成的flex代码吧】" class="headerlink" title="2.1【先编译一下已经完成的flex代码吧】"></a>2.1【先编译一下已经完成的flex代码吧】</h2><p>最初接触一门工具，不知道它的语法，也不知道如何使用才是正确的，难免会出现恐慌的情绪。因此，我们先尝试，用提供的代码编译出一个可执行文件，在感性上初步认识flex。（此外，这可能还会给你带来自己已经会使用flex的错觉，毕竟你已经成功做出了一个可执行文件了！）<br>现在，新建一个txt文件，取名test，然后往里面写入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">([1-9]+[0-9]*)|[0]ECHO;</span><br><span class="line">[0-9]+\.[0-9]+</span><br><span class="line">[a-zA-Z]+</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  yylex();</span><br><span class="line">  yywrap();</span><br><span class="line">&#125;</span><br><span class="line">int yywrap()</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你不需要知道这些东西是啥，直接无脑复制即可，这个代码不是我们接下来要讲解的“教材”。<br>保存文件，将这个txt文件改名为<strong>test.l</strong>（小写的L），我们通常用这个扩展名表示它是flex&#x2F;lex文件。如果你有一个文本处理工具，例如Notepad++，则不需要这么麻烦，直接新建test.l，然后编辑这个文件即可。<br>随后，打开cmd（再提醒一遍，使用管理员权限打开），为了方便，我们先来到test.l所在的路径。<br>为了避免学习者连windows的cmd操作也不甚清楚，这里说明一下如何来到test.l所在的路径：<br>（<strong>假设</strong>test.l所在的路径为E:\ComplierComplier\program，则输入以下代码：）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E://转到E盘</span><br><span class="line">cd E:\ComplierComplier\program  //change directory至目标路径</span><br></pre></td></tr></table></figure><p>好的，现在我们来到了test.l所在的路径了，最后，使用flex对它进行编译，继续在cmd中输入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flex test.l//此后会生成C文件lex.yy.c</span><br><span class="line">gcc lex.yy.c//使用gcc编译成可执行文件</span><br></pre></td></tr></table></figure><p>接下来，你就将<strong>得到可执行文件a.exe</strong>。如果直接双击它是没有什么效果的，我们需要在cmd中使用它，（如果你不小心把cmd关了，请再回到这个路径上），输入a.exe或者直接输入a，回车之后就表示开始执行a.exe。<br>虽然目前你还不知道之前的flex代码究竟是什么意思，但我可以告诉你，a.exe的作用是什么：在cmd中输入一段文本，它会自动分辨出其中的整数内容，并输出出来。它会忽略其他内容，<strong>包括小数</strong>。<br>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Alice bought 3 apples, 2 pearls, they cost 1.5$</span><br><span class="line">//理应输出3 2</span><br><span class="line">int a=23;</span><br><span class="line">//理应输出23</span><br><span class="line">double b=0.45;</span><br><span class="line">//理应输出空行</span><br></pre></td></tr></table></figure><p>如果测试成功，恭喜你，你成功掌握了如何编译一个.l文件使之可以运行！如果未来在编译的过程中出现了错误，那想必就是代码中出现了ERROR，而非其他的外部原因。<br>顺便，这个程序不会自己停止，请在cmd程序获得焦点时，按两次ctrl+c，即可退出。</p><h2 id="2-2【介绍flex的代码结构】"><a href="#2-2【介绍flex的代码结构】" class="headerlink" title="2.2【介绍flex的代码结构】"></a>2.2【介绍flex的代码结构】</h2><p>一个来自于flex使用手册的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定义(definations)</span><br><span class="line">%%</span><br><span class="line">规则(rules)</span><br><span class="line">%%</span><br><span class="line">代码(user code)</span><br></pre></td></tr></table></figure><p>flex的代码分为三个部分，由%%分割，这些部分可以为空，但为了让flex代码能够按照我们此前介绍的方法成功编译，需要加入部分内容，形成下方的<strong>新手框架</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line"></span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line"></span><br><span class="line">%%</span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  yylex()</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line">int yywrap()</span><br><span class="line">&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来介绍这个框架中的内容：<br>①第一部分，较原框架加入了%{ %}，这对大括号内没有任何内容，所以目前起不到任何作用。加入这对大括号的目的是，在这个部分可以使用C语言代码进行预处理，例如使用#include&lt;stdio.h&gt;，或是定义宏、常量等等。<br>②第二部分，没有变化，这里的要写入的代码是重点内容，将在后续展开。<br>③第三部分，这个部分就是用来写C语言代码的，因此不需要使用%</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 自制编程语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图床配置</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="新建github仓库用来存储图片"><a href="#新建github仓库用来存储图片" class="headerlink" title="新建github仓库用来存储图片"></a>新建github仓库用来存储图片</h1><p>1.登录你的 github 账号，<a href="https://github.com/">点击跳转登录</a>，右上角加号处点击此选项，创建一个新的仓库</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/dd3d43b810fa006d148b835e8493ba33.jpeg?imageView2/2/w/2560/h/7000"></p><p>2.详细设置</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/468826bf45623c300e6eecad9a936b67.png?imageView2/2/w/2560/h/7000"></p><p>3.此仓库你可以上传你的图片，用来达到存储的目的</p><h1 id="利用PicGo工具便捷管理图片"><a href="#利用PicGo工具便捷管理图片" class="headerlink" title="利用PicGo工具便捷管理图片"></a>利用PicGo工具便捷管理图片</h1><p>1.前往picgo的GitHub仓库下载此工具，<a href="https://github.com/Molunerfinn/PicGo">点击前往下载</a>，如果下载速度太慢，科学上网下载会快一点，下载好后安装即可 2.然后，在 github 上创建一个 token1，点击右上角账号上的 settings</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/1c2528d2a8e6e9a58a51a91e2c5207dd.png?imageView2/2/w/2560/h/7000"></p><p>3.然后左侧点击 developer (开发人员) settings ，再点击 personal access tokens (令牌) ，然后点击 generate (生成) new token (令牌)</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/ff87b08f8c2f7a2b534880240adfef91.png?imageView2/2/w/2560/h/7000"></p><p>4.Note 用来说明你创建 token (令牌) 的用途，然后 scopes (范围) 只需要选 repo 的所有选项即可</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/455006a56bbea4bd48e3a976cca31762.png?imageView2/2/w/2560/h/7000"></p><p>5.最后拉到底部，点击 generate (生成) token (令牌) ，即可成功 6.找个地方记下这一串 token，等会需要用到。（如果没有记住，等再查看时就只能重新生成了）</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/78b68fca4d052b832cb2d74e28680423.png?imageView2/2/w/2560/h/7000"></p><p>7.打开picgo工具进行配置</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/81e2217a93f056042a1ffa82b36fc945.jpeg?imageView2/2/w/2560/h/7000"></p><ul><li>在 PicGo 中，找到图床设置 -&gt; GitHub图床。</li><li>仓库名即为你的github账号&#x2F;图片仓库名</li><li>分支名就用默认的 master&#x2F;main</li><li>Token (令牌) 就填写刚才我们生成的 Token</li><li>存储路径如果需要指定子目录可以填写例如 img&#x2F; 。我这里没有填，就会上传到我图片仓库的根目录。</li><li>自定义域名就填写 jsDelivr 的域名，<code>https://cdn.jsdelivr.net/gh/github用户名/仓库名@master</code></li><li>最后设为默认图床，下次在 typora 上传图片就会自动上传到 github 图床了</li></ul><h1 id="总结-便捷使用方法"><a href="#总结-便捷使用方法" class="headerlink" title="总结-便捷使用方法"></a>总结-便捷使用方法</h1><p>1.点击上传图片，此时如果你上面的配置正确，上传的图片将会同步至github仓库内</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/f8b6d564267ba617d49216d602a842c3.jpeg?imageView2/2/w/2560/h/7000"></p><p>2.点击相册，可见你的图片，点击此按钮，即可复制图片链接</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/dbbd49a6d24bc6f6cc4edbef951847d4.jpeg?imageView2/2/w/2560/h/7000"></p><p>3.你也可以指定上传后的链接格式</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-6219187/4466c69df1bb036fa3a8508ac66b4a5a.jpeg?imageView2/2/w/2560/h/7000"></p><p>4.得到链接后，你就可以尽情的使用了，加载速度十分迅速，白嫖真香，以后想要存图片就上传，接着复制链接出来使用，非常的方便</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题配置</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://butterfly.js.org/posts/21cfbf15/">文档地址</a><br><a href="https://fontawesome.com/icons?d=gallery">Find Icons with the Perfect Look &amp; Feel | Font Awesome</a><br>将 _butterfly&#x2F;<em>config.yml</em> 文件复制，重命名为 <code>_config.butterfly.yml</code> 放在hexo根目录下，在这个文件里做修改<br>命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d上传主题，验证是否修改成功。</p><h1 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h1><p>在根目录的source文件夹下创建img文件夹，包含web和blog两个文件夹，网站图片使用<code>/img/web/xx.jpg</code>,博客图片使用<code>![](img/blog/xx.jpg)</code>,并把butterfly主题文件夹下的img文件夹剪切到<code>/img/web</code>文件夹下</p><h1 id="FontAwesome图标本地加载"><a href="#FontAwesome图标本地加载" class="headerlink" title="FontAwesome图标本地加载"></a>FontAwesome图标本地加载</h1><p>由于all.min.css下载woff文件较慢所以改为本地加载<br>首先注释掉themes\butterfly\plugins.yml中的以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fontawesomeV6:</span></span><br><span class="line"><span class="comment">#   name: &#x27;@fortawesome/fontawesome-free&#x27;</span></span><br><span class="line"><span class="comment">#   file: css/all.min.css</span></span><br><span class="line"><span class="comment">#   other_name: font-awesome</span></span><br><span class="line"><span class="comment">#   version: 6.3.0</span></span><br></pre></td></tr></table></figure><p>再从<a href="https://github.com/FortAwesome/Font-Awesome/tree/6.x">这个网站</a>下载css&#x2F;all.min.css和webfonts文件夹<br>下载好后将all.min.css拷贝到themes\butterfly\source\css目录中,将webfonts文件夹拷贝到themes\butterfly\source目录中<br>最后引入css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/all.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用阿里图标与此类似<a href="https://www.cnblogs.com/MoYu-zc/p/14399186.html">Hexo-使用阿里iconfont图标 - MoYu-zc - 博客园 (cnblogs.com)</a></p><h1 id="分割线图标更换"><a href="#分割线图标更换" class="headerlink" title="分割线图标更换"></a>分割线图标更换</h1><p>本次修改基于Butterfly主题 3.0.0 ！<br>将图标更换为“太空飞船”。<br>修改butterfly主题配置文件<code>_data</code>–<code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\f197&#x27;</span> <span class="comment"># the unicode value of Font Awesome icon</span></span><br><span class="line">  <span class="attr">icon-top:</span> <span class="string">-10px</span></span><br></pre></td></tr></table></figure><p><code>icon-top</code>常用数值：</p><p>-20px：图标位于分割线上方</p><p>-10px：图标位于分割线中间</p><p>0px：图标位于分割线下方</p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>1、安装 hexo-generator-searchdb 搜索插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>2、修改配置文件：</p><p>找到local_search将enable修改为true</p><h3 id="加速方案"><a href="#加速方案" class="headerlink" title="加速方案"></a>加速方案</h3><h4 id="减少索引内容"><a href="#减少索引内容" class="headerlink" title="减少索引内容"></a>减少索引内容</h4><ul><li>可以设置搜索内容，若仅搜索标题 （搜索内容content设置为false） 则会加载快到飞起<br><img src="/../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-2.png"></li></ul><h4 id="外链加速"><a href="#外链加速" class="headerlink" title="外链加速"></a>外链加速</h4><p>打开主题下的 local-search.js 文件 (不同主题的位置会不同, 但是一般都在 source&#x2F;js 这种文件夹里) , 找到如下字段</p><p><code>url: GLOBAL_CONFIG.root + path</code>改成<code>url: 外链</code><br>外链推荐使用 Jsdelivr 的 cdn (引用 Github 的资源, 不需要手动更新, 速度也挺快)</p><h1 id="使用Valine添加评论功能"><a href="#使用Valine添加评论功能" class="headerlink" title="使用Valine添加评论功能"></a>使用Valine添加评论功能</h1><p>1、注册账号并进入：<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a></p><p>2、创建开发版应用：</p><p>3、创建后点击设置进入应用：</p><p>4、复制AppID、AppKey</p><p>5、修改主题配置文件<br>找到valine，分别将复制的id和key填入,开启评论需要在comments-use中填写你需要的评论。</p><h1 id="giscus评论系统设置"><a href="#giscus评论系统设置" class="headerlink" title="giscus评论系统设置"></a>giscus评论系统设置</h1><h2 id="安装giscus"><a href="#安装giscus" class="headerlink" title="安装giscus"></a>安装giscus</h2><p>点击这个链接安装：**<a href="https://link.zhihu.com/?target=https://github.com/apps/giscus">GitHub Apps - giscus</a>**</p><h2 id="配置仓库discuss部分"><a href="#配置仓库discuss部分" class="headerlink" title="配置仓库discuss部分"></a>配置仓库discuss部分</h2><p>首先打开仓库的setting，将Discussions部分打上对号，然后建立一个Announcements的分类</p><h2 id="进入giscus配置"><a href="#进入giscus配置" class="headerlink" title="进入giscus配置"></a>进入giscus配置</h2><p>链接在这：**<a href="https://link.zhihu.com/?target=https://giscus.app/zh-CN">giscus</a>**</p><p>配置完仓库和discussion分类后，可以在启动giscus下边复制几个东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo:</span><br><span class="line">repo_id:</span><br><span class="line">category_id:</span><br></pre></td></tr></table></figure><p>还可根据自己的需要在option中添加对应的选项，按照 yaml 格式填入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data-strict:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">data-lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">data-input-position:</span> <span class="string">top</span></span><br><span class="line"><span class="attr">data-loading:</span> <span class="string">lazy</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在 Hexo 中，评论功能默认在所有页面都开启，如果部分页面我们不需要评论功能，例如分类、标记页面。我们可以在在站点根目录下<code>/source/页面名称/index.md</code>中通过<code>comments</code>属性设置<code>true</code>或<code>false</code>控制该页面或者是文章的评论功能是否打开</p><h1 id="收录谷歌、百度"><a href="#收录谷歌、百度" class="headerlink" title="收录谷歌、百度"></a>收录谷歌、百度</h1><p>1、 查看收录情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址栏输入：site:xingjiahui.top</span><br></pre></td></tr></table></figure><p>2、验证、提交网站：<a href="https://www.ancii.com/avcwpl4d6/">JingLisen</a></p><h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><p><a href="https://www.xiaowu95.wang/posts/80027c66/">记录hexo整合pwa的使用 | 小五的个人杂货铺 (xiaowu95.wang)</a><br><a href="https://butterfly.js.org/posts/ceeb73f/#PWA">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p><h1 id="解决cdn-jsdelivr-net国内无法加载"><a href="#解决cdn-jsdelivr-net国内无法加载" class="headerlink" title="解决cdn.jsdelivr.net国内无法加载"></a>解决cdn.jsdelivr.net国内无法加载</h1><p>使用 <code>cdn.jsdelivr.net</code> 未受污染的子域：</p><ul><li><code>fastly.jsdelivr.net</code>，由 Fastly 提供 本站使用</li><li><code>gcore.jsdelivr.net</code>，由 G-Core 提供</li><li><code>testingcf.jsdelivr.net</code>，由 CloudFlare 提供<br>将博客主题的文件中 jsDelivr 链接里的 <code>cdn</code> 替换为子域名即可</li></ul><blockquote><p>比如butterfly主题中将<code>themes\butterfly\layout\includes\head\preconnect.pug</code>和<code>themes\butterfly\scripts\events\cdn.js</code>中的<code>cdn.jsdelivr.net</code>替换为<code>fastly.jsdelivr.net</code></p></blockquote><h2 id="查看网页加载的大小和时间"><a href="#查看网页加载的大小和时间" class="headerlink" title="查看网页加载的大小和时间"></a>查看网页加载的大小和时间</h2><ol><li>右键点击网页，选择“检查”，(直接按ctrl+shift+I 也可以）。</li><li>出来的界面上，点击“Network”，按 Ctrl+R，就可以看到每个资源的大小和加载时间</li><li>进一步分析：点击特定请求，可以查看更详细的信息，如请求头、响应头、传输大小等。通过分析这些信息，你可以确定加载时间较长的资源，并找出导致问题的原因。</li></ol><h1 id="部署博客并使用自定义域名"><a href="#部署博客并使用自定义域名" class="headerlink" title="部署博客并使用自定义域名"></a>部署博客并使用自定义域名</h1><p>我将博客分别部署在了github page和zeabur上<br><a href="https://zeabur.com/docs/zh-CN/get-started">快速开始 - Zeabur</a><br>也可尝试其他的方式</p><ul><li><a href="https://blog.csdn.net/kuizuo12/article/details/124716488">Vercel部署个人博客_愧怍12的博客-CSDN博客</a>但vercel似乎无法正确解析带有+的url,且Vercel 的 CNAME 值有 CAA 记录，这个 CAA 记录限制了证书颁发机构</li><li><a href="https://zhuanlan.zhihu.com/p/55252024">手把手教你使用Netlify部署博客及部署自动化 - 知乎 (zhihu.com)</a><br>然后在域名提供商那里添加CNAME记录如下<br><img src="/../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-1.png"><br>可用该网站来检测速度<a href="https://boce.aliyun.com/detect/ping">阿里云网站运维检测平台 (aliyun.com)</a><br>如果该域名本身没有SSL证书，但是你将其CNAME记录跳转到另一个有SSL证书且已经部署的域名，是可以实现HTTPS访问的。</li></ul><h1 id="查看网页RSS"><a href="#查看网页RSS" class="headerlink" title="查看网页RSS"></a>查看网页RSS</h1><p>本次修改基于Butterfly主题 3.0.0 ！</p><p>实现：增加社交图标RSS，点击可查看网页RSS。</p><p>1.下载插件hexo-generator-feed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2.在hexo的主配置文件_config.yml中任意位置添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p>3.修改butterfly主题配置文件_config.yml ，添加RSS的图标：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">RSS链接</span></span><br></pre></td></tr></table></figure><h1 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h1><p>在<code>\source\_data</code>中的<code>butterfly.yml</code>修改<code>social</code>：</p><p>(可以选择使用<code>fa fa-xxx</code>图标，也可以选择使用<code>阿里iconfont</code>图标)</p><p>此处要注意：</p><p>​ 很多人不知道自己上方填的网址怎么找</p><p>​ <code>RSS</code>上面有教程，<code>Giuhub</code>、<code>Github</code>、<code>CSDN</code>、<code>bilibili</code>直接<code>个人主页</code>网址就可以</p><p>​ <code>QQ</code>：下方 xxxxxxx 填上对应的<code>qq号码</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=xxxxxxx&amp;website=www.oicqzone.com</span><br></pre></td></tr></table></figure><h1 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h1><p>有时浏览器会缓存旧的链接或搜索结果，无法加载更新后的结果，可使用使用 Ctrl + F5 强制刷新页面，或清除缓存并刷新页面，如缓存图片和文件。</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>本体</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/Zotero/%E6%9C%AC%E4%BD%93.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/Zotero/%E6%9C%AC%E4%BD%93.html</url>
      
        <content type="html"><![CDATA[<h2 id="添加文献"><a href="#添加文献" class="headerlink" title="添加文献"></a>添加文献</h2><p>Zotero添加文献主要有通过浏览器插件添加和手动添加两种方式。</p><h3 id="1-通过浏览器插件添加"><a href="#1-通过浏览器插件添加" class="headerlink" title="1. 通过浏览器插件添加"></a>1. 通过浏览器插件添加</h3><p><strong>注意，通过这种方式添加需要保证Zotero客户端在运行状态。</strong></p><p>安装好浏览器插件后，浏览器的插件栏会多出一个Zotero图标（空白页面下），如下图红框。</p><p><img src="https://pic2.zhimg.com/80/v2-f634e36b8e9fc94df7ff5ee572217555_1440w.webp"></p><p>随手打开一篇arXiv上的文章，你会发现这个图标变成了一张纸的样子，这意味着Zotero插件检测到了一篇文献。点一下它，将出现下图中的提示框，Zotero说，我帮你把这个文献保存在“My Library”啦，除了它自身的信息之外，还有一个“Comment”，一个全文PDF文件，以及一个网页快照（Snapshot）。</p><p><img src="https://pic1.zhimg.com/80/v2-8cef6635a173c96b88490902984438c8_1440w.webp"></p><p>打开Zotero，这篇文献已经出现在“My Library”中了，连同下载的所有附件。如果附件没有出现的话，你需要稍等片刻，因为PDF的下载可能需要一些时间。</p><p><img src="https://pic4.zhimg.com/80/v2-7aacfb0b4261d92de1d31640b4a3054b_1440w.webp"></p><p>现在我们打开一个Google Scholar 搜索结果页面，你会发现这个图标变成了一个“文件夹”，因为Zotero在这个页面找到了多篇文献。点击文件夹图标，在弹出的窗口可以选择一篇或多篇文献加入文献库。</p><p><img src="https://pic1.zhimg.com/80/v2-95f66d44726e7a946014728121310d58_1440w.webp"></p><p>Amazing！打开Zotero，刚才选择的文献全部被加进来了！</p><p><img src="https://pic4.zhimg.com/80/v2-31aff476f0abf15fa3af50679bc26f7b_1440w.webp"></p><p>即使在找不到文献的页面，Zotero也可以保存网页的快照（Snapshot）以供离线查看。这是个非常实用的功能，一些大佬的技术博客、公众号推送、发出来可能很快就不会存在的文章，都可以通过这种方式用Zotero统一管理，简直不能太方便。下面的图中我用这种方式保存了一篇GCN教程：</p><p><img src="https://pic1.zhimg.com/80/v2-219b209731092563489f488769f8dbe0_1440w.webp"></p><p><img src="https://pic2.zhimg.com/80/v2-94787bbe6ce7ee1d1e434c0976c11ac1_1440w.webp"></p><p>在知道有这个功能之后，我做的第一件事是保存了自己投过所有文章的review，以在骄傲自满的时候给自己沉重打击。</p><h3 id="2-手动添加"><a href="#2-手动添加" class="headerlink" title="2. 手动添加"></a>2. 手动添加</h3><p>手动添加最常用的情况是直接导入一个本地的PDF文件。方法是直接把PDF文件拖进Zotero界面，像下面这样。</p><p><img src="https://pic3.zhimg.com/80/v2-66ff866faeaa03b7582ceeaa140ca302_1440w.webp"></p><p>Zotero会自动识别PDF中的各种元数据，自动填充条目信息：</p><p><img src="https://pic3.zhimg.com/80/v2-91e3df4c69741cec16b14f2e61fa7886_1440w.webp"></p><p>并不是每一个PDF文件都能够识别得很准确，比如这篇Conference Paper就被识别成了Book Section，作者的顺序也不对。使用这种方法导入通常需要手动再进行一些修改。</p><p>当然，对于任何一个条目，除了修改基本信息之外，我们也可以手动为它添加各种附件。比如我们通过浏览器添加了一篇没有全文PDF的文献，我们可以通过这种方法为其加入自己下载的PDF。方法是右击条目，选择“Add attachment ”。</p><p><img src="https://pic1.zhimg.com/80/v2-5c04cfc472b2212e7e8f7c8cc235e928_1440w.webp"></p><p>这里“ Attach Stored Copy of File”和“Attach Link to File”的区别是，前者会把这个文件复制一份丢进文献库，而后者只会把这个附件指向原文件（类似超链接）。</p><p>Zotero也支持直接通过ISBN、DOI、PMID或arXiv ID来添加文献。点击工具栏的“魔棒”图标，输入一个ISBN编码：</p><p><img src="https://pic2.zhimg.com/80/v2-70b4ea8fd5ca9853047d642912e5b3d1_1440w.webp"></p><p>Zotero会去网上找这个编码对应的元数据，把它加进文献库：</p><p><img src="https://pic3.zhimg.com/80/v2-1d7c673c4381def55bd2ac755e07493a_1440w.webp"></p><p>最后，我们也可以纯手动添加条目，自己填写所有数据域、添加附件。点击工具栏的加号按钮，选择一个合适的类型即可。</p><p><img src="https://pic2.zhimg.com/80/v2-9004aef1e9487d484c9f7024d2f20435_1440w.webp"></p><h2 id="管理文献"><a href="#管理文献" class="headerlink" title="管理文献"></a>管理文献</h2><p>在文献管理上，Zotero有文件夹（collection）、标签（tag）和便捷搜索（saved search）三种方式。</p><h3 id="1-文件夹（collection）管理"><a href="#1-文件夹（collection）管理" class="headerlink" title="1. 文件夹（collection）管理"></a>1. 文件夹（collection）管理</h3><p>在Zotero客户端左边栏的“My Library”上右键选择“New Collection”（或者点击最左上角的按钮），新建一个文件夹：</p><p><img src="https://pic1.zhimg.com/80/v2-c46e1721538a405d7796e4b4d6fbd468_1440w.webp"></p><p>Zotero里的文件夹和操作系统里是一样的，我们可以把文献在文件夹之间拖来拖去，还可以在文件夹下新建子文件夹，建立层级的树状结构：</p><p><img src="https://pic4.zhimg.com/80/v2-dea2cb33b781ea78ffedec268b8f2e83_1440w.webp"></p><p>如果只是使用collection，其实和你不用Zotero、在电脑上建一层一层的文件夹进行管理没有很大区别。我一般会用collection进行数据来源层级的区分（比如论文、公众号、网页等），再使用标签（tag）机制进行进一步的细粒度管理。</p><h3 id="2-标签（tag）管理"><a href="#2-标签（tag）管理" class="headerlink" title="2. 标签（tag）管理"></a>2. 标签（tag）管理</h3><p>我们可以对文献库中的文献添加一个或多个自定义的标签（tag）：</p><p><img src="https://pic2.zhimg.com/80/v2-e1639605d1271d8b7ad021fb19273399_1440w.webp"></p><p>也可以在用浏览器插件添加文献时顺手添加：</p><p><img src="https://pic1.zhimg.com/80/v2-5fd09fd997723b5f6b83a47ca7c869b8_1440w.webp"></p><p>Zotero支持最多为9个tag分别指定不同的颜色，做法是在界面左下角的tag面板中，右击一个tag，选择“ Assign Color”。</p><p><img src="https://pic1.zhimg.com/80/v2-df19d480b6e56d024c601fa99afea8d0_1440w.webp"></p><p>如果一个文献被打上了带颜色的标签，这个颜色的色块也会被显示在文献标题中，一目了然，区别起来很方便！</p><p><img src="https://pic1.zhimg.com/80/v2-14f45ebb855e7f1b7c33cff3d8a78a6c_1440w.webp"></p><p>现在，我们可以通过点击tag面板中的标签来实现对于文献的筛选了！</p><p><img src="https://pic3.zhimg.com/v2-14ede04ca6bc114281b057f46c2fc746_b.jpg" alt="动图封面"></p><h3 id="便捷搜索（saved-search）"><a href="#便捷搜索（saved-search）" class="headerlink" title="便捷搜索（saved search）"></a>便捷搜索（saved search）</h3><p>我们有时候需要对文献库进行一些搜索，针对关键词、标签，或者二者都有。但有些常用的搜索条件，我们不希望每次都重新输入，这时候便捷搜索功能（saved search）就是一个强大的工具。</p><p>右击“My Library”，选择“New Saved Search”。</p><p><img src="https://pic4.zhimg.com/80/v2-9f20876b4d646ccdf2fb928d6f873ccf_1440w.webp"></p><p>在弹出的窗口中，输入检索条件，点击“OK”。比如这里我做了一个ICCV2019文章的搜索，限定会议名称包含“IEEE International Conference on Computer Vision ”，日期是“2019”。当然这需要文献的元数据准确。</p><p><img src="https://pic4.zhimg.com/80/v2-4e3ed2770c6f194ee8b6e9266891c97f_1440w.webp"></p><p>点击“OK”，我们会发现出现了这样带齿轮的紫色文件夹，这就是便捷搜索生成的结果。文件夹中包含了当前文献库中符合此条件的所有文献，如果新增添的文献符合搜索条件的话，也会自动出现在这里。</p><p><img src="https://pic1.zhimg.com/80/v2-0d185d5cf160aa8d5ef0b7d3f412ceb4_1440w.webp"></p><p>在工具栏点击搜索按钮，在弹出的高级搜索对话框中，也可以保存便捷搜索：</p><p><img src="https://pic3.zhimg.com/80/v2-e844419ba5a11fe90bbfe5438a49d17a_1440w.webp"></p><h2 id="笔记系统"><a href="#笔记系统" class="headerlink" title="笔记系统"></a>笔记系统</h2><p>Zotero的笔记系统比较简单。由于Zotero没有内置PDF阅读器，所以PDF内部的高亮、标注等功能依赖用户的PDF阅读器。但Zotero允许我们给文献添加多篇笔记（note），在任意一篇文献的“Notes”选项卡中点击“Add”来添加笔记。</p><p><img src="https://pic2.zhimg.com/80/v2-12c221b6215a46ac5a56026fb9e7890d_1440w.webp"></p><p>我们可以在出现的富文本编辑器中写简单的笔记。注意左边，文献的附件中出现了一条新的笔记。笔记也可以打标签，或是和文献一起被同步至云空间。</p><p><img src="https://pic4.zhimg.com/80/v2-0b638589a5f080d35135403de74b2137_1440w.webp"></p><p>值得一提的是，你还可以在工具栏中，添加独立的笔记条目（standalone note），该条目不依赖于任何文献。这意味着，Zotero还可以当做一个笔记本&#x2F;备忘录来用[呲牙]。通用性多强啊！</p><p><img src="https://pic2.zhimg.com/80/v2-f0886083a1d9d5326efc48d6329734e1_1440w.webp"></p><h2 id="文献导出"><a href="#文献导出" class="headerlink" title="文献导出"></a>文献导出</h2><p>选中一篇或多篇文献，右击菜单中有三种导出方式： <strong>Export Items</strong>、<strong>Create Bibliography from Items</strong> 和 <strong>Generate Report from Items</strong>。</p><p><img src="https://pic1.zhimg.com/80/v2-43e5e7b6d5460522231460c49b0a4904_1440w.webp"></p><p>其中：</p><ul><li><strong>Export Items</strong> 可以将文献导出成不同的格式，包括BibTex、 Bookmarks 、CSV、Endnote XML等，也同时可以导出附件。我一般用来和他人分享文章，也可以用来在不同文献管理软件之间做数据迁移。</li><li><strong>Create Bibliography from Items</strong> 就是我们在写论文时生成参考文献最常用的选项了。弹出的对话框中可以选择不同的参考文献格式和导出的形式（默认是复制到剪贴板）。</li></ul><p><img src="https://pic4.zhimg.com/80/v2-6ffa48e60ba70b4e8aed47a6cfcaff5f_1440w.webp"></p><ul><li><strong>Generate Report from Items</strong> 可以为这些文献生成一个固定格式的HTML report，里面有每篇文献的元数据。感觉没啥用，官方说可以用来“Reviewing Abstracts ”、“Teaching”以及“ Organizing Notes into Outlines ”。</li></ul><p>这里有一个小技巧——最便捷生成参考文献的方式，是直接把选中的文献拖动至文本编辑器中；或者按Cmd+ Shift +C，再粘贴到文本编辑框中。这种方式输出的参考文献格式可以在设置的 Export 选项卡里更改，我改成了BibTex。下面的GIF展示了这种“Quick Copy”的特性，实在是方便得过分。</p><p><img src="https://pic3.zhimg.com/v2-4444a30ba046ae803f31bc9fc3094c3e_b.jpg" alt="动图封面"></p><p>Zotero还提供了针对Word、LibreOffice的插件，以及对Google Docs的支持，如果你用以上工具写作，看看<a href="https://link.zhihu.com/?target=https://www.zotero.org/support/word_processor_integration">官方的介绍</a>吧。</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> Zotero </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生态配置</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/Zotero/%E7%94%9F%E6%80%81%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/Zotero/%E7%94%9F%E6%80%81%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="跨平台云同步"><a href="#跨平台云同步" class="headerlink" title="跨平台云同步"></a>跨平台云同步</h1><p>如果需要在不同平台、不同设备上维护同一个文献库，我们就需要云同步功能的加持。</p><p>在设置界面的“Sync”选项卡中输入自己的Zotero账号（在<a href="https://link.zhihu.com/?target=https://www.zotero.org/user/register">官网注册</a>），点击“Set Up Syncing”就开启云同步了！</p><p><img src="https://pic2.zhimg.com/80/v2-ad74592d5c63d364ea6ebfda0ed33e15_1440w.webp"></p><p>这里“Sync automatically (自动) ”的意思是文献库发生变化的时候立刻自动同步；“Sync full-text content (内容) ”是说同步全文内容，如PDF等附件。</p><p><img src="https://pic1.zhimg.com/80/v2-bf55a4a34b59921acb2c6f3b704fbf78_1440w.webp"></p><p>我们开始的时候提到，Zotero免费云空间只有300MB，如果我们同时同步全文内容，可能只能同步100篇左右，这是远远不够的。Zotero良心地提供了WebDAV接口，允许我们使用其他支持WebDAV协议的同步云盘来代替默认的云空间来进行云同步操作。</p><p>国内同步云盘中，支持WebDAV的只有 <strong>坚果云</strong> 一家。虽然名字听着有点野鸡，但是人家已经是十年的老牌公司了，服务质量非常可靠。不氪金的坚果云提供 <strong>20GB</strong> 的存储空间，<strong>每月 1GB</strong> 的上传流量和 <strong>3GB</strong> 的下载流量，对于文献同步盘个人使用已经足够了。即使不够用，只需 200RMB&#x2F;年 即可获得 42GB 空间和无限上传下载流量，价格足够良心，把充腾讯视频会员的钱拿来管理文献，感觉自己立刻变得<strong>好学</strong>了起来。</p><p>首先我们需要去<a href="https://link.zhihu.com/?target=https://www.jianguoyun.com/">坚果云官网</a>注册个人账号。注册好之后在坚果云个人中心的“账户信息”中找到“安全选项”选项卡。</p><p><img src="https://pic3.zhimg.com/80/v2-dc7f51f49f463c658db35933bcf6d7e2_1440w.webp"></p><p>在页面下方的“第三方应用管理”中添加一个应用，生成密码。</p><p><img src="https://pic4.zhimg.com/80/v2-c3359d9fd0e6f64b75a85e46e175aaab_1440w.webp"></p><p><img src="https://pic3.zhimg.com/80/v2-e1498e27ec19e67a8b17015a1f77b5de_1440w.webp"></p><p>接下来打开Zotero的同步配置，在下方同步方式中选择“WebDAV”，填入刚才坚果云页面中给出的服务器地址和账户，密码就是刚才生成的应用密码。点击“ Verify (验证) Server”可以验证信息是否填写正确，如果正确会跳出一个窗口提示你云盘上还没有zotero这个文件夹，问你要不要新建一个，选择“create”即可。</p><p><img src="https://pic2.zhimg.com/80/v2-dae325e7d85b181859bf3e9be084f3ed_1440w.webp"></p><p>我一般会把的“Sync automatically (自动) ”关掉，因为一些学术垃圾可能读完就删掉了，不想要占用额外的上传下载流量（白嫖坚果云有上传下载流量限制）。需要同步的时候点击右上方的同步按钮即可。</p><p><img src="https://pic1.zhimg.com/80/v2-1b883b5d6dba1e877c5d877599226fbc_1440w.webp"><br>注意：推荐先安装坚果云或其他同步盘（据测试坚果云效果最好）再进行json以及大量文献的导入，在更改数据同步位置时可能出现忘记转移json代码，文献库导致的缺失问题。</p><h1 id="Zotfile插件"><a href="#Zotfile插件" class="headerlink" title="Zotfile插件"></a>Zotfile插件</h1><p>    在配置好坚果云后，安装zotfile.xpi插件。在坚果云“我的坚果云“中建立zotfile_attachment文件夹用于存放pdf主体。</p><p>    找到文件与文件夹：数据存储位置改为坚果云的zotero文件夹，此时会提示备份文件，并会批量自动更新文件位置。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Va0CB1XibhOefriazXSuHJ9340kYZ0UUoDE7nWLEfwZjc0rX6lvVEZfKHJl42a3OROmrSeBeV9EVQdfhNVQxrV4g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>    在zotfile preferences 中配置好数据库文件夹与pdf文件夹的对应位置。注意Zotero设置中的根目录与数据存储位置应分别对应于zotfile配置中的文献文件夹与数据库文件夹。为方便从坚果云中找到对应pdf，应设置文件夹的分级存储（设置后导入pdf可能存在繁杂的保存位置选择），将参数设置为&#x2F;%c。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/Va0CB1XibhOefriazXSuHJ9340kYZ0UUoDxGHiagTFer2Rp2Zrymia0avchGxBqCTTibUDK84Pyafg7Ammf8Xh0rzKA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>    此时基本配置已完成，此外应配置抓取pdf的命名规则。具体参数可参考zotfile官网，在使用时可能出现doi缺失，期刊缩写缺失等问题，故在renaming中使用一定的命名选择符如：</p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> Zotero </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/git.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/ob%E9%85%8D%E7%BD%AE/git.html</url>
      
        <content type="html"><![CDATA[<p>根目录创建一个<code>.gitignore</code>，忽略掉<code>.obsidian/workspace.json</code></p><h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init    </span><br><span class="line">git add .    </span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>github 创建一个空仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h1 id="配置-obsidian-git"><a href="#配置-obsidian-git" class="headerlink" title="配置  obsidian git"></a>配置  obsidian git</h1><p><img src="https://img-blog.csdnimg.cn/988b8b5064f4424387b3cd68ba77a918.png"><br>打开插件设置界面，可以修改一下自动提交和手动提交的日志，我设置的是主机名+日期：</p><p><img src="https://pic4.zhimg.com/80/v2-d0cbb2096d0d00b7ce9bae0a0be12d7f_1440w.webp"></p><p>在提交信息设置里，可以修改主机名和日期格式，修改完成后点Preview可以预览提交信息：</p><p><img src="https://pic1.zhimg.com/80/v2-ed85b2cfd96b49fb585ce6c53540546c_1440w.webp"><br>快捷键<code>Ctrl + P</code>打开命令面板，输入open source control view启用可视化操作面板<br>然后在右侧菜单栏就可以看到操作面板了：</p><p><img src="https://pic2.zhimg.com/80/v2-f66914a218aef13bfd13a8f5fc2a11e9_1440w.webp"><br>一般操作就是：保存所有&gt;提交&gt;推送，就可以更新到Git服务器了，如下图顺序</p><p><img src="https://pic4.zhimg.com/80/v2-502923ac636c2656ff988688bfd3530f_1440w.webp"></p><p>启用自动拉取功能，每次打开知识库就会自动拉取：</p><p><img src="https://pic2.zhimg.com/80/v2-113deb621682d3dd75469f0cecb31bd5_1440w.webp"></p><p>如果在使用过程中有报错的话，<code>Ctrl+Shift+I</code>在控制台里可以查看详细日志，所有插件的日志都可以在这里看到：</p><p><img src="https://pic3.zhimg.com/80/v2-eb9244e2e9af2e310d219ac95c429cae_1440w.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> ob配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo插件</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E6%8F%92%E4%BB%B6.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/hexo%E6%8F%92%E4%BB%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-auto-category自动生成-categories"><a href="#hexo-auto-category自动生成-categories" class="headerlink" title="hexo-auto-category自动生成 categories"></a>hexo-auto-category自动生成 <code>categories</code></h1><p>最常用的文件管理策略，就是利用文件系统目录结构(树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。<code>hexo-auto-category</code>根据日志文件(Markdown)所在文件目录自动分类，即自动生成<code>markdown</code>的front-matter中的<code>categories</code>变量。</p><p><strong>示例</strong></p><p>对于博客 <code>source/_post/web/framework/hexo.md</code>，该插件会自动生成以下<code>categories</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:  </span><br><span class="line">  - web  </span><br><span class="line">  - framework  </span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在站点根目录下的<code>_config.yml</code>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth:  </span><br></pre></td></tr></table></figure><h2 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译 &amp; 部署"></a>编译 &amp; 部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d  </span><br></pre></td></tr></table></figure><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><p>如果只想生成第一级目录分类，可以设置<code>depth</code>属性，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><h2 id="利用Git钩子函数触发更新"><a href="#利用Git钩子函数触发更新" class="headerlink" title="利用Git钩子函数触发更新"></a>利用Git钩子函数触发更新</h2><p>这个插件只有执行<code>hexo generate</code>时才会去读取文件夹并更新所有文章的Front-matter分类信息，所以我们可以利用<a href="https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks">Git的钩子函数</a>，在 commit (提交) 的时候先执行下<code>hexo generate</code>，这样就能实现自动更新了。</p><p>在<code>.git/hooks</code>目录下新建一个<code>pre-commit</code>文件</p><p><img src="https://pic1.zhimg.com/80/v2-1af4421003f60d164d14afae8964bcc4_1440w.webp"></p><p>可以先在该文件中写入<code>echo hello world!</code>，然后在git终端下执行<code>sh pre-commit</code>或者<code>./pre-commit</code>测试钩子能不能正常执行，没问题后，将如下命令写到文件里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; git add .</span><br></pre></td></tr></table></figure><p> 之所以后面追加<code>git add .</code>，是因为 generate (生成) 后，所有文章的Front-matter信息会更新，所以要将所有修改重新添加进来</p><h1 id="Hexo-neat插件优化提升访问效率"><a href="#Hexo-neat插件优化提升访问效率" class="headerlink" title="Hexo-neat插件优化提升访问效率"></a>Hexo-neat插件优化提升访问效率</h1><p><a href="https://cloud.tencent.com/developer/article/1946999">Hexo-neat插件优化提升访问效率-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h3 id="1、安装hexo-neat"><a href="#1、安装hexo-neat" class="headerlink" title="1、安装hexo-neat"></a>1、安装hexo-neat</h3><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h3 id="2、添加相关配置"><a href="#2、添加相关配置" class="headerlink" title="2、添加相关配置"></a>2、添加相关配置</h3><p>在站点配置文件<code>_config.yml</code>添加相关配置，直接添加到站点配置文件<code>_config.yml</code>的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html（ejs，swig等也属于html格式片段）</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/waifu.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span> <span class="comment">#打印日志</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.js&#x27;</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、hexo-neat插件注意事项"><a href="#3、hexo-neat插件注意事项" class="headerlink" title="3、hexo-neat插件注意事项"></a>3、hexo-neat插件注意事项</h3><p>在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。<br><strong>1.跳过压缩文件的正确配置方式</strong><br>如果按照官方插件的文档说明来配置exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>已经压缩过的css和js不用压缩：剔除exclude（<code>*.min.css</code>和 <code>* .min.js</code>）</li><li>特殊名字xx.xx.min.js的需要单独列出来（这里引用了fancybox图片弹窗效果，从压缩名单里单独剔除）</li><li>深目录的，需要单独列出来：（这里我引用了live2d看板娘的动画） 单用<code>_*/_.min.js</code>深目录跳过已压缩文件不行，这部分只好全部跳过压缩了</li></ul><p><strong>2.压缩html时不要跳过<code>.md</code>文件和<code>.swig</code>文件</strong><br><code>.md</code>文件就是markdown文件，如果跳过压缩<code>.md</code>文件，而又刚好在文章中使用到了tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。</p><p><code>.swig</code>文件是模板引擎文件，也就是hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。<br><strong>3.注意md中不要带特殊标签&lt;&gt;的颜表情&lt;(￣ˇ￣)&#x2F;、&lt;(ˉ^ˉ)&gt;等，因为压缩转换为html后会变成<br>&lt; (￣ˇ￣)&#x2F;，转义失败！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vscode 和vs2019代码行数统计</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E6%8A%80%E5%B7%A7/vscode%20%E5%92%8Cvs2019%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0%E7%BB%9F%E8%AE%A1.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E6%8A%80%E5%B7%A7/vscode%20%E5%92%8Cvs2019%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0%E7%BB%9F%E8%AE%A1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、vscode-代码行数统计"><a href="#1、vscode-代码行数统计" class="headerlink" title="1、vscode 代码行数统计"></a>1、vscode 代码行数统计</h1><p>按Ctrl+Shift+X 在插件市场搜索 VS Code Counter 点击安装<br><img src="https://cdn.nlark.com/yuque/0/2023/png/22784909/1677053714389-26d90a59-bd6a-40a6-8d4c-c4823c5879eb.png#averageHue=%2342823c&clientId=u2d1f3933-1e56-4&from=paste&id=u4ae858bc&originHeight=465&originWidth=474&originalType=url&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&taskId=uc87c970b-2798-496a-ba47-43a73e6e9ae&title="><br>按住按Ctrl+Shift+P 在命令输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Count lines in workspace</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/22784909/1677053726480-184c04bb-1ede-4107-ac71-6f5aa26bde93.png#averageHue=%238f946e&clientId=u2d1f3933-1e56-4&from=paste&id=ue4d2eb7a&originHeight=185&originWidth=1513&originalType=url&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&taskId=u8b81458b-7efe-4b24-846c-cd59a7bf840&title="><br><img src="https://cdn.nlark.com/yuque/0/2023/png/22784909/1677053734196-6f8a4a0f-ceb8-4ca1-b597-7b3f37094271.png#averageHue=%232c2b2b&clientId=u2d1f3933-1e56-4&from=paste&id=ucfce1f4f&originHeight=726&originWidth=1375&originalType=url&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&taskId=u9cde3a3c-02db-4ac9-bb14-8d6dde23368&title="></p><h1 id="2、Visual-Studio-代码行数统计"><a href="#2、Visual-Studio-代码行数统计" class="headerlink" title="2、Visual Studio 代码行数统计"></a>2、Visual Studio 代码行数统计</h1><p>选中解决方案<br>按[Ctrl+Shift+F]弹出查找窗口（不统计以#号开头、以&#x2F;开头的代码和空行）<br>1、输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b*[^:b#/]+.*$</span><br></pre></td></tr></table></figure><p>2、选择使用正则表达式<br><img src="https://cdn.nlark.com/yuque/0/2023/png/22784909/1677053692668-451bfeb9-952c-4afc-a229-c8c618df59c0.png#averageHue=%23efeeed&clientId=u2d1f3933-1e56-4&from=paste&id=u4779545e&originHeight=642&originWidth=378&originalType=url&ratio=1.75&rotation=0&showTitle=false&status=done&style=none&taskId=ufb07642e-fdf9-43c3-a7a2-522391d7e65&title="></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习资源</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90.html</url>
      
        <content type="html"><![CDATA[<p>首先是学习圈的圈友独家资源：《阿秀的学习笔记》网站内容PDF版本，目前为第四版，第五版正在制作中，仅为阿秀的学习圈圈友提供！第四版链接: <a href="https://pan.baidu.com/s/19C2oieSDxpdkqR2kEqq-Wg">https://pan.baidu.com/s/19C2oieSDxpdkqR2kEqq-Wg</a> 提取码: wvtm</p><p>一、《阿秀的学习圈》独享资源-校招求职一条龙服务</p><h1 id="1、从0教你写好一份属于自己的简历"><a href="#1、从0教你写好一份属于自己的简历" class="headerlink" title="1、从0教你写好一份属于自己的简历"></a>1、从0教你写好一份属于自己的简历</h1><p>一份合格的简历是怎样的？ 已完结 链接：<a href="https://www.yuque.com/docs/share/29d989cc-86e1-48cf-b731-d39030388685">https://www.yuque.com/docs/share/29d989cc-86e1-48cf-b731-d39030388685</a><br>个人信息模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/526aa724-f87b-43bd-b519-6058537891ec">https://www.yuque.com/docs/share/526aa724-f87b-43bd-b519-6058537891ec</a><br>教育背景模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/6d1698af-6a68-451f-b95e-496527a8f7cb">https://www.yuque.com/docs/share/6d1698af-6a68-451f-b95e-496527a8f7cb</a><br>专业技能模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/8d71bc4e-6426-4141-9d44-0710b45205bd">https://www.yuque.com/docs/share/8d71bc4e-6426-4141-9d44-0710b45205bd</a><br>实习经历模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/f44e4e04-35e1-4b63-ac1c-32fa508f7b49">https://www.yuque.com/docs/share/f44e4e04-35e1-4b63-ac1c-32fa508f7b49</a><br>项目经验模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/30fd8b4c-ce0d-486f-aacd-bc094d6e7a27">https://www.yuque.com/docs/share/30fd8b4c-ce0d-486f-aacd-bc094d6e7a27</a><br>校园经历模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/e0ecb501-5879-4676-9da2-e5c1d04a39fe">https://www.yuque.com/docs/share/e0ecb501-5879-4676-9da2-e5c1d04a39fe</a><br>奖项证书模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/26c7c18e-5d59-45a1-a1c7-e8b895cb9b96">https://www.yuque.com/docs/share/26c7c18e-5d59-45a1-a1c7-e8b895cb9b96</a><br>科研论文模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/4120ccbd-b4fc-4292-8762-d1dd577ce802">https://www.yuque.com/docs/share/4120ccbd-b4fc-4292-8762-d1dd577ce802</a><br>自我评价模块要这么写 已完结 链接：<a href="https://www.yuque.com/docs/share/a32f6781-5d9a-4286-8db9-35746b082624">https://www.yuque.com/docs/share/a32f6781-5d9a-4286-8db9-35746b082624</a><br>简历优秀文案&amp;叙述分享 已完结 链接：<a href="https://www.yuque.com/docs/share/bedc9a5b-4eb1-4166-a8ab-5cb1de7c6e7d">https://www.yuque.com/docs/share/bedc9a5b-4eb1-4166-a8ab-5cb1de7c6e7d</a><br>优秀简历模板分享 已完结 链接：<a href="https://www.yuque.com/docs/share/d51586de-b3c2-44ed-a409-5aac10b233c0">https://www.yuque.com/docs/share/d51586de-b3c2-44ed-a409-5aac10b233c0</a></p><h1 id="2、校招面试详细解读（一二三轮技术面-HR面）"><a href="#2、校招面试详细解读（一二三轮技术面-HR面）" class="headerlink" title="2、校招面试详细解读（一二三轮技术面 + HR面）"></a>2、校招面试详细解读（一二三轮技术面 + HR面）</h1><p>校招大厂技术岗面试基本知识 已完结  链接：<a href="https://www.yuque.com/docs/share/023e3cea-fc87-4823-9e59-9f6cdee3b32d">https://www.yuque.com/docs/share/023e3cea-fc87-4823-9e59-9f6cdee3b32d</a><br>一轮技术面 已完结  链接：<a href="https://www.yuque.com/docs/share/9f9545e2-4efa-4a95-9f7f-0a4f78de3f51">https://www.yuque.com/docs/share/9f9545e2-4efa-4a95-9f7f-0a4f78de3f51</a><br>二轮技术面 已完结   链接：<a href="https://www.yuque.com/docs/share/81d7d11b-fcff-4a37-90fd-ae0dec622ccf">https://www.yuque.com/docs/share/81d7d11b-fcff-4a37-90fd-ae0dec622ccf</a><br>三轮技术面 已完结   链接：<a href="https://www.yuque.com/docs/share/d7264ba9-0d08-4d3e-b248-e9ce13375949">https://www.yuque.com/docs/share/d7264ba9-0d08-4d3e-b248-e9ce13375949</a><br>交叉面 已完结  链接：<a href="https://www.yuque.com/docs/share/cf8e8fa9-92ed-4a17-be56-a90cf280d431">https://www.yuque.com/docs/share/cf8e8fa9-92ed-4a17-be56-a90cf280d431</a><br>HR面详细解读 已完结（包括常见回答话术） 链接： <a href="https://www.yuque.com/docs/share/bca09dd9-16f8-43a6-b231-79fdfa5ea084">https://www.yuque.com/docs/share/bca09dd9-16f8-43a6-b231-79fdfa5ea084</a></p><h1 id="4、全国一二线城市知名互联网公司大盘点"><a href="#4、全国一二线城市知名互联网公司大盘点" class="headerlink" title="4、全国一二线城市知名互联网公司大盘点"></a>4、全国一二线城市知名互联网公司大盘点</h1><p>上海互联网公司盘点（已完结，共225家）链接：<a href="https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc">https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc</a><br>北京互联网公司盘点（已完结，共82家) 链接：<a href="https://www.yuque.com/docs/share/239796b1-bca4-4048-a63d-3e421dd10ea4">https://www.yuque.com/docs/share/239796b1-bca4-4048-a63d-3e421dd10ea4</a><br>杭州互联网公司盘点（已完结，共101家） 链接：<a href="https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e">https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e</a><br>广州互联网盘点（已完结， 共96家）链接：<a href="https://www.yuque.com/docs/share/69a6d864-7806-4e4c-84c0-506c543dfc93">https://www.yuque.com/docs/share/69a6d864-7806-4e4c-84c0-506c543dfc93</a><br>深圳互联网盘点(已完结, 共108家)    链接：<a href="https://www.yuque.com/docs/share/ed985935-65a7-489e-82b0-c1e2259ede50">https://www.yuque.com/docs/share/ed985935-65a7-489e-82b0-c1e2259ede50</a><br>武汉互联网盘点（已完结，共68家） 链接：<a href="https://www.yuque.com/docs/share/09175e89-382a-4a0c-9299-4f2c2d8c32ae">https://www.yuque.com/docs/share/09175e89-382a-4a0c-9299-4f2c2d8c32ae</a><br>西安互联网盘点（已完结，共45家）链接：<a href="https://www.yuque.com/docs/share/7a4fcaf2-81fe-42ba-b1a5-5daa64a41d71">https://www.yuque.com/docs/share/7a4fcaf2-81fe-42ba-b1a5-5daa64a41d71</a><br>济南互联网盘点（已完结，共14家）链接：<a href="https://www.yuque.com/docs/share/62be2e0b-5e61-4de5-8d90-706519f1c3bc">https://www.yuque.com/docs/share/62be2e0b-5e61-4de5-8d90-706519f1c3bc</a><br>山东互联网盘点（已完结，共28家） 链接 <a href="https://www.yuque.com/docs/share/122f8d61-9876-4160-ba2e-ed56047c9080">https://www.yuque.com/docs/share/122f8d61-9876-4160-ba2e-ed56047c9080</a><br>苏州互联网公司盘点（已完结，共38家） 链接：<a href="https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256">https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256</a></p><h1 id="5、学习路线-amp-项目推荐"><a href="#5、学习路线-amp-项目推荐" class="headerlink" title="5、学习路线&amp;项目推荐"></a>5、学习路线&amp;项目推荐</h1><p>学习路线导读（强烈建议看一看）已完结 <a href="https://www.yuque.com/docs/share/c01a4794-9a04-4adb-ba74-965401399e9d">https://www.yuque.com/docs/share/c01a4794-9a04-4adb-ba74-965401399e9d</a><br>阿秀自己自学CS过程中的学习心得 （已完结） <a href="https://www.yuque.com/docs/share/e34d01e9-0b23-4f02-ab17-9353d201a357">https://www.yuque.com/docs/share/e34d01e9-0b23-4f02-ab17-9353d201a357</a><br>C学习路线（小白求职版）（已完结） <a href="https://www.yuque.com/docs/share/2f0fde4a-1ae5-45f3-90b7-21e81dd4fa76">https://www.yuque.com/docs/share/2f0fde4a-1ae5-45f3-90b7-21e81dd4fa76</a><br>C&#x2F;C项目推荐 已完结 共8个<a href="https://www.yuque.com/docs/share/55b9d089-37cc-4060-a0f5-40f018befb85">https://www.yuque.com/docs/share/55b9d089-37cc-4060-a0f5-40f018befb85</a><br>操作系统学习路线 已完结   <a href="https://www.yuque.com/docs/share/f3a97eb5-e5d1-4bf4-a0c2-10c7d83eeeb7">https://www.yuque.com/docs/share/f3a97eb5-e5d1-4bf4-a0c2-10c7d83eeeb7</a><br>计算机网络&amp;精进学习路线已完结 <a href="https://www.yuque.com/docs/share/88e2b500-fc85-4429-97d2-deae581a1dff">https://www.yuque.com/docs/share/88e2b500-fc85-4429-97d2-deae581a1dff</a></p><h1 id="6、读书笔记分享"><a href="#6、读书笔记分享" class="headerlink" title="6、读书笔记分享"></a>6、读书笔记分享</h1><p>《深度探索C++对象模型》读书笔记 已完结 链接：<a href="https://www.yuque.com/docs/share/e3869134-783f-4179-b641-51a4ee018ae6">https://www.yuque.com/docs/share/e3869134-783f-4179-b641-51a4ee018ae6</a><br>《MySQL必知必会》读书笔记 已完结 <a href="https://www.yuque.com/docs/share/208b1355-f5cc-4feb-8fe7-42e4ff3e1e72">https://www.yuque.com/docs/share/208b1355-f5cc-4feb-8fe7-42e4ff3e1e72</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>推荐技术UP主</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E6%8E%A8%E8%8D%90%E6%8A%80%E6%9C%AFUP%E4%B8%BB.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E6%8E%A8%E8%8D%90%E6%8A%80%E6%9C%AFUP%E4%B8%BB.html</url>
      
        <content type="html"><![CDATA[<ul><li>《深入理解计算机系统原理CSAPP》<a href="https://space.bilibili.com/4564101/">yaaangmin</a></li><li>C++协程 <a href="https://space.bilibili.com/35186937/?spm_id_from=333.999.0.0">等疾风</a></li><li>数据库论文 <a href="https://space.bilibili.com/629605267/">Gauss松鼠会</a></li><li>操作系统 <a href="https://space.bilibili.com/202224425/">绿导师原谅你了</a>南大老师</li><li>分布式系统 <a href="https://space.bilibili.com/474662253?spm_id_from=333.337.search-card.all.click">算法主义</a> 南大老师</li><li>算法与数据结构 <a href="https://space.bilibili.com/7836741/">大雪菜</a></li><li>LeetCode周赛 <a href="https://space.bilibili.com/206214/">灵茶山艾府</a></li><li>分布式数据库 <a href="https://space.bilibili.com/30933812/">木鸟杂记</a></li><li>Linux网络编程 <a href="https://space.bilibili.com/319250589/">jaydenwen123</a></li><li>levelDB、存储、分布式论文 <a href="https://space.bilibili.com/1324259795?spm_id_from=333.337.0.0">硬核课堂</a></li><li>C++11&#x2F;kotlin <a href="https://space.bilibili.com/28615855?spm_id_from=333.337.search-card.all.click">bennyhuo不是算命的</a></li><li>CS144计算机网络lab <a href="https://space.bilibili.com/16765968">阿苏EEer</a></li><li>编程知识 <a href="https://space.bilibili.com/372313671?spm_id_from=333.337.0.0">奇乐编程学院</a></li><li>分布式数据库 <a href="https://space.bilibili.com/61981458?spm_id_from=333.337.0.0">戌米的论文笔记</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试利器</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E9%9D%A2%E8%AF%95%E5%88%A9%E5%99%A8.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E9%9D%A2%E8%AF%95%E5%88%A9%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树"><a href="#前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树" class="headerlink" title="前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树"></a>前短时间分享了一个能在面试中增加面试官印象分的利器，也就是红黑树</h1><p><a href="https://www.yuque.com/docs/share/38cc330f-1646-4fb5-96a4-5fad3acad0b3">https://www.yuque.com/docs/share/38cc330f-1646-4fb5-96a4-5fad3acad0b3</a></p><h1 id="今天再分享一个C-开发者比较适合的一个利器，也是源码系列的研究！并且和Web服务器搭配一起使用很好使！"><a href="#今天再分享一个C-开发者比较适合的一个利器，也是源码系列的研究！并且和Web服务器搭配一起使用很好使！" class="headerlink" title="今天再分享一个C++开发者比较适合的一个利器，也是源码系列的研究！并且和Web服务器搭配一起使用很好使！"></a>今天再分享一个C++开发者比较适合的一个利器，也是源码系列的研究！并且和Web服务器搭配一起使用很好使！</h1><p>要说难，还是有点难的；可绝对值得研究，如果有看过我简历的朋友可能会记得我简历上有这么一句话：对Linux下的I&#x2F;O复用有深刻理解<br>其实这里说的IO多路复用主要指的就是select、poll、epoll这几个关键字。<br>以下是文章全部内容：<a href="https://www.yuque.com/docs/share/2a66768a-2fcf-486f-bbd5-37347da69ad5">https://www.yuque.com/docs/share/2a66768a-2fcf-486f-bbd5-37347da69ad5</a></p><h1 id="前人给你留下的15条CS校招金玉良言"><a href="#前人给你留下的15条CS校招金玉良言" class="headerlink" title="前人给你留下的15条CS校招金玉良言"></a>前人给你留下的15条CS校招金玉良言</h1><p>全文链接：<a href="https://www.yuque.com/docs/share/c2834829-c84b-4c35-9fc6-948a4d06a2eb">https://www.yuque.com/docs/share/c2834829-c84b-4c35-9fc6-948a4d06a2eb</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面经</title>
      <link href="/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E9%9D%A2%E7%BB%8F.html"/>
      <url>/posts/%E5%AD%A6%E4%B9%A0/%E8%B5%84%E6%BA%90/%E9%9D%A2%E7%BB%8F.html</url>
      
        <content type="html"><![CDATA[<p>《【起风了，唯有努力生存】一个本硕非科班码农的后台开发之路》<a href="https://www.yuque.com/docs/share/37b016b5-4877-4611-bb4b-08ced4e3cc89">https://www.yuque.com/docs/share/37b016b5-4877-4611-bb4b-08ced4e3cc89</a><br>《ACMer渣铜的秋招总结与经验分享》<br><a href="https://www.yuque.com/docs/share/098ec555-c825-459b-94cd-f150cf6177c6">https://www.yuque.com/docs/share/098ec555-c825-459b-94cd-f150cf6177c6</a><br>《字节校招后端C面经》<br><a href="https://www.yuque.com/docs/share/d913dc0d-336c-408e-870e-0ba8fcc648c7">https://www.yuque.com/docs/share/d913dc0d-336c-408e-870e-0ba8fcc648c7</a><br>《国际化电商客户端提前批1,2,3面面经(已凉)》<br><a href="https://www.yuque.com/docs/share/19c50f7e-176b-4dd9-abe9-3d0c4a29fd8e">https://www.yuque.com/docs/share/19c50f7e-176b-4dd9-abe9-3d0c4a29fd8e</a><br>《字节跳动七面面经(提前批3轮，实习4轮)》<br><a href="https://www.yuque.com/docs/share/a5753e11-6157-4153-a9c7-af5f18dc6948">https://www.yuque.com/docs/share/a5753e11-6157-4153-a9c7-af5f18dc6948</a><br>《字节跳动C系统工程师春招面经》<br><a href="https://www.yuque.com/docs/share/e7bfd04c-8f94-437c-8ea6-d4841693d039">https://www.yuque.com/docs/share/e7bfd04c-8f94-437c-8ea6-d4841693d039</a><br>《字节跳动五轮技术面终于收获意向书（后端开发）》<br><a href="https://www.yuque.com/docs/share/d3337287-f5f7-43b7-b9e7-3318e5675c8c">https://www.yuque.com/docs/share/d3337287-f5f7-43b7-b9e7-3318e5675c8c</a><br> 《字节跳动教育后端春招面经》<br><a href="https://www.yuque.com/docs/share/42dfd66d-b981-4953-8284-bb301c3a15ad">https://www.yuque.com/docs/share/42dfd66d-b981-4953-8284-bb301c3a15ad</a><br>《字节跳动基础架构C一面二面三面》<br><a href="https://www.yuque.com/docs/share/def11acb-d36a-462d-9b13-0982be6cfafd">https://www.yuque.com/docs/share/def11acb-d36a-462d-9b13-0982be6cfafd</a><br>《字节后端提前批-业务研发（C）1、2、3面面经，已意向》<a href="https://www.yuque.com/docs/share/f5203921-d81f-404e-9495-d6d8bd06eaab">https://www.yuque.com/docs/share/f5203921-d81f-404e-9495-d6d8bd06eaab</a><br>《字节跳动后端一二三面_笔经》<br><a href="https://www.yuque.com/docs/share/5ea492b4-964f-4749-9ca8-c52c4ee31074">https://www.yuque.com/docs/share/5ea492b4-964f-4749-9ca8-c52c4ee31074</a><br>《字节跳动 C客户端 一二三面 hr面 820已OC》<br><a href="https://www.yuque.com/docs/share/abdb2590-2a27-4460-9805-dd5a53a7bffc">https://www.yuque.com/docs/share/abdb2590-2a27-4460-9805-dd5a53a7bffc</a><br>《字节提前批国际化电商后端一面二面三面已oc+意向书》<br><a href="https://www.yuque.com/docs/share/17ca820e-76ae-498a-945b-a8bbad5f12bf">https://www.yuque.com/docs/share/17ca820e-76ae-498a-945b-a8bbad5f12bf</a><br>《字节跳动 C后端 今日头条 校招》<br><a href="https://www.yuque.com/docs/share/2223791a-ee2a-480a-a046-adcd8f83e97f">https://www.yuque.com/docs/share/2223791a-ee2a-480a-a046-adcd8f83e97f</a><br>《字节跳动 电商后端 一二三面面经（已意向书）》<br><a href="https://www.yuque.com/docs/share/39693ebe-4eac-4b2c-999e-e515bc3e7d50">https://www.yuque.com/docs/share/39693ebe-4eac-4b2c-999e-e515bc3e7d50</a><br>《字节客户端一二三面（已OC）》<br><a href="https://www.yuque.com/docs/share/f6d9a46a-8b42-4323-9a26-c9cd772ab154">https://www.yuque.com/docs/share/f6d9a46a-8b42-4323-9a26-c9cd772ab154</a><br>《字节教育(上海)C++一二三面面经(已offer)》<br><a href="https://www.yuque.com/docs/share/6aba31b2-f97e-4554-98b5-d1a1390def18">https://www.yuque.com/docs/share/6aba31b2-f97e-4554-98b5-d1a1390def18</a><br>《字节技术中台后端三面面经(许愿hr面)》<br><a href="https://www.yuque.com/docs/share/ccad5e61-003e-400c-94e3-c39953c0bee1">https://www.yuque.com/docs/share/ccad5e61-003e-400c-94e3-c39953c0bee1</a><br>《字节抖音后端一二三面(已OC)》<br><a href="https://www.yuque.com/docs/share/ee5ac591-4d9c-4c6f-bc8f-de090f0a8cfc">https://www.yuque.com/docs/share/ee5ac591-4d9c-4c6f-bc8f-de090f0a8cfc</a><br>《春招面经，许愿上岸》<br><a href="https://www.yuque.com/docs/share/3354aa55-b413-4a32-abef-bcee152623c4">https://www.yuque.com/docs/share/3354aa55-b413-4a32-abef-bcee152623c4</a><br>《2022 字节跳动 提前批 四轮面试(已完结)》<br><a href="https://www.yuque.com/docs/share/bdade855-779d-4472-b117-26e8f71b348a">https://www.yuque.com/docs/share/bdade855-779d-4472-b117-26e8f71b348a</a><br>《【字节国际化电商后端】123面》<br><a href="https://www.yuque.com/docs/share/5d68bb91-5488-4cbd-a659-66b563c39ded">https://www.yuque.com/docs/share/5d68bb91-5488-4cbd-a659-66b563c39ded</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 资源 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++课程设计</title>
      <link href="/posts/%E8%AF%BE%E7%A8%8B/C++%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1.html"/>
      <url>/posts/%E8%AF%BE%E7%A8%8B/C++%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1.html</url>
      
        <content type="html"><![CDATA[<h2 id="程序设计课程设计报告—学生信息管理系统"><a href="#程序设计课程设计报告—学生信息管理系统" class="headerlink" title="程序设计课程设计报告—学生信息管理系统"></a>程序设计课程设计报告—学生信息管理系统</h2><h2 id="目-录"><a href="#目-录" class="headerlink" title="目 录"></a>目 录</h2><ol><li>需求分析 </li><li>架构设计 </li><li>模块设计 </li><li>类和函数的说明 </li><li>比较有特色的算法 </li><li>存在的不足及对策 </li><li>使用说明 </li><li>程序源代码</li></ol><h2 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h2><p>      学生信息管理系统，能够实现计算机化的学生信息管理，能够提供实现基本的学生信息管理功能，方便管理员进行学生信息管理。</p><p>      本项目面向学生管理员，管理员需使用账号密码登录，其拥有学生基本信息管理和学生成绩管理两大功能。</p><h3 id="二、架构设计"><a href="#二、架构设计" class="headerlink" title="二、架构设计"></a>二、架构设计</h3><h4 id="（一）管理员登录主系统"><a href="#（一）管理员登录主系统" class="headerlink" title="（一）管理员登录主系统"></a>（一）管理员登录主系统</h4><p>       管理员可以登陆账号以管理学生信息，每个账号中都保存着相应的数据，管理员可以操控管理这些数据，可以修改自己的密码，退出登录或退出程序时自动将内存中的数据清空。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1657017264924-6a57594f-ed56-4779-8e98-9528d350718b.png#averageHue=%23ededed&clientId=u597bb5ac-2c29-4&from=ui&id=uaf0c5a2b&name=image_48Mse1CdsA.png&originHeight=869&originWidth=711&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58503&status=done&style=none&taskId=u088ae63c-1e54-4b3b-9cfb-d3033a90727&title=" alt="image_48Mse1CdsA.png"></p><h4 id="（二）学生基本信息管理系统"><a href="#（二）学生基本信息管理系统" class="headerlink" title="（二）学生基本信息管理系统"></a>（二）学生基本信息管理系统</h4><p>①<strong>添加</strong>：管理员将信息依次录入。</p><p>②<strong>删除</strong>：按学号对一个学生的信息进行删除，还可以选择一键删除。</p><p>③<strong>修改</strong>：按学号修改相应的信息。</p><p>④<strong>查询</strong>：根据你键入的学生姓名或学号，显示其详细信息。</p><p>⑤<strong>浏览</strong>：管理员可以浏览当前所存储的全部学生信息。</p><p>⑥<strong>保存</strong>：管理员退出程序前或者退出登陆前，将数据自动储存到本地文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1657017281793-d8ffc451-1764-4c47-9761-a1d71e0a735a.png#averageHue=%23ebebeb&clientId=u597bb5ac-2c29-4&from=ui&id=uc7b651f7&name=image_LH3SQ4mlAi.png&originHeight=432&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44020&status=done&style=none&taskId=u38947720-4609-4938-9082-11b89de49ae&title=" alt="image_LH3SQ4mlAi.png"></p><h4 id="（三）学生成绩管理系统"><a href="#（三）学生成绩管理系统" class="headerlink" title="（三）学生成绩管理系统"></a>（三）学生成绩管理系统</h4><p>①<strong>添加</strong>：管理员将信息依次录入。</p><p>②<strong>删除</strong>：按学号对一个学生的信息进行删除，还可以选择一键删除。</p><p>③<strong>修改</strong>：按学号选择修改相应的信息。</p><p>④<strong>查询</strong>：根据你键入的学生姓名或学号，显示其详细信息。</p><p>⑤<strong>浏览</strong>：</p><p>A) <strong>浏览总平均成绩</strong>：管理员可以看到以总平均成绩从高到低的学生所有成绩信息。</p><p>B) <strong>浏览单科成绩</strong>：管理员可以选择具体的单科，并且可以看到以该单科成绩从高到低的学生单科成绩信息。</p><p>C) <strong>浏览成绩报告分析</strong>：管理员可以看到各科以及总平均成绩中60分以下和90分以上人数占比和信息，还有60分以上人数占比。</p><p>⑥<strong>保存</strong>：管理员退出程序前或者退出登陆前，将数据自动储存到本地文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1657017301215-aa986f25-c6f7-40c3-a3ed-e303963911b7.png#averageHue=%23eaeaea&clientId=u597bb5ac-2c29-4&from=ui&id=u3e04606f&name=image_PLsdkWmHyq.png&originHeight=438&originWidth=864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52271&status=done&style=none&taskId=u9c98fd05-ce54-4934-8175-6865749cb46&title=" alt="image_PLsdkWmHyq.png"></p><h3 id="三、模块设计"><a href="#三、模块设计" class="headerlink" title="三、模块设计"></a>三、模块设计</h3><h4 id="1-添加模块"><a href="#1-添加模块" class="headerlink" title="1.添加模块"></a>1.添加模块</h4><p>学生基本信息管理系统：管理员按照学号、姓名、联系方式以及宿舍号的顺序依次录入，插入到AVL树中。</p><p>学生成绩管理系统：管理员按照学号、姓名、高数成绩、大学英语成绩以及C++成绩的顺序依次录入，插入到多重链表中。</p><h4 id="2-删除模块"><a href="#2-删除模块" class="headerlink" title="2.删除模块"></a>2.删除模块</h4><p>管理员输入要删除学生的学号，然后调用删除函数，删除该名学生的信息，或者一键删除，清空AVL树或多重链表中的数据。</p><h4 id="3-修改模块"><a href="#3-修改模块" class="headerlink" title="3.修改模块"></a>3.修改模块</h4><p>管理员输入要修改学生的学号，然后管理员可以选择修改相应的信息。</p><h4 id="4-查询模块"><a href="#4-查询模块" class="headerlink" title="4.查询模块"></a>4.查询模块</h4><p>首先由管理员输入要查找的学生姓名或学号，然后系统用查找函数查找，然后系统就调用输出函数，输出所查找的学生信息。</p><h4 id="5-浏览模块"><a href="#5-浏览模块" class="headerlink" title="5.浏览模块"></a>5.浏览模块</h4><p>学生基本信息管理系统：显示当前所存储的全部学生基本信息。</p><p>学生成绩管理系统：管理员可以选择浏览以总成绩排名顺序分布的内容；可以浏览以单科成绩排名顺序分布的内容；亦可以浏览总体成绩报告分析。对于每一种需求，系统显示相应的数据。</p><h4 id="6-保存模块"><a href="#6-保存模块" class="headerlink" title="6.保存模块"></a>6.保存模块</h4><p>学生基本信息管理系统：将AVL树中的数据储存到“用户名”+”_ IF.txt”中。</p><p>学生成绩管理系统：将多重链表中的数据储存到“用户名”+”_GD.txt”中。</p><h4 id="7-管理员模块"><a href="#7-管理员模块" class="headerlink" title="7.管理员模块"></a>7.管理员模块</h4><p>管理员键入帐号密码，系统会从本地文件检索账号密码，如果管理员选择创建账号，那么系统会将账号密码保存至本地文件中，以便下次登陆时检索，并且系统会以管理员账号名创建额外两个文件，分别用以存储学生基本信息和学生成绩信息。</p><p>登陆成功后，系统从本地文件中获取数据，管理员可以对这些数据进行操作，在管理员退出时，系统将数据存入相应的文件之中，并且遍历AVL树和链表，清空数据。</p><p>管理员修改密码时，系统查阅本地文件，并修改数据。</p><h3 id="四、类和函数的说明"><a href="#四、类和函数的说明" class="headerlink" title="四、类和函数的说明"></a>四、类和函数的说明</h3><h4 id="1-menu1的声明"><a href="#1-menu1的声明" class="headerlink" title="1.menu1的声明"></a>1.menu1的声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">menu1</span> &#123;</span></span><br><span class="line">private:</span><br><span class="line">  <span class="built_in">string</span> sn;  <span class="comment">//学号 student number</span></span><br><span class="line">  <span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">  <span class="built_in">string</span> chat; <span class="comment">//联系方式</span></span><br><span class="line">  <span class="built_in">string</span> dor; <span class="comment">//宿舍号</span></span><br><span class="line">  <span class="type">int</span> height;     <span class="comment">//平衡树的高度</span></span><br><span class="line">  menu1* left;</span><br><span class="line">  menu1* right;</span><br><span class="line">public:</span><br><span class="line">  menu1(<span class="built_in">string</span> a, <span class="built_in">string</span> b, <span class="built_in">string</span> c, <span class="built_in">string</span> d, <span class="type">int</span> h=<span class="number">0</span>, menu1* L=nullptr,menu1* r=nullptr):</span><br><span class="line">    sn(a),name(b),chat(c),dor(d),height(h),left(L),right(r) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">high</span><span class="params">( menu1* p)</span>;<span class="comment">//返回高度</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">singleft</span><span class="params">( menu1* k2)</span>;<span class="comment">//左单旋</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">singright</span><span class="params">( menu1* k2)</span>;<span class="comment">//右单旋</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">doubleleft</span><span class="params">( menu1* k3)</span>;<span class="comment">//LR</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">doubleright</span><span class="params">( menu1* k3)</span>;<span class="comment">//RL</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Record_1</span><span class="params">( menu1 *&amp; ph, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="built_in">string</span>&amp; c, <span class="built_in">string</span>&amp; d)</span>;<span class="comment">//记录系统一的用户数据，存储到文件中</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Seeit_1</span><span class="params">( menu1 *&amp; head)</span>;<span class="comment">//查看所有数据函数</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Read1</span><span class="params">( menu1 *&amp; head)</span>;   <span class="comment">//从文件中读取数据</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Delete_1</span><span class="params">( menu1* p, <span class="built_in">string</span>&amp; x)</span>;<span class="comment">//删除实现</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Find_1</span><span class="params">( menu1 *&amp; head, <span class="type">int</span> sp)</span>;<span class="comment">//查询函数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Change_1</span><span class="params">( menu1 *&amp; head)</span>;<span class="comment">//修改数据</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">EnterDelete_1</span><span class="params">( menu1 *&amp; head)</span>;<span class="comment">//进入删除，一个接口</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">FreeAll_1</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//释放内存函数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Store1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-menu2的声明"><a href="#2-menu2的声明" class="headerlink" title="2.menu2的声明"></a>2.menu2的声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">menu2</span>&#123;</span>  </span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> sn2;    <span class="comment">//学号</span></span><br><span class="line">    <span class="built_in">string</span> name2;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">static</span> <span class="built_in">string</span> g[<span class="number">4</span>];</span><br><span class="line">    <span class="type">float</span> grade[<span class="number">4</span>];       <span class="comment">//总成绩的平均数,高数,英语,C++</span></span><br><span class="line">    menu2* Next; <span class="comment">//链表下一节点</span></span><br><span class="line">    menu2* Previous; <span class="comment">//上一节点</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">FreeAll_2</span><span class="params">(<span class="type">void</span>)</span>;    <span class="comment">//释放内存，退出时用到</span></span><br><span class="line"></span><br><span class="line">    menu2* <span class="title function_">Record_2</span><span class="params">(menu2*&amp; head, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="type">float</span> G[<span class="number">4</span>], <span class="type">int</span> change)</span>;<span class="comment">//写入文件</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Record_2_isnert</span><span class="params">(menu2 *&amp; head, menu2* p, menu2* pr, menu2* ph, <span class="type">float</span> x, <span class="type">float</span> gr, <span class="built_in">string</span>&amp; a)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Seeit_2</span><span class="params">(menu2*&amp; head)</span>; <span class="comment">//查看信息</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SeeThesingle_2</span><span class="params">(menu2*&amp; head, <span class="type">int</span> choice)</span>;   <span class="comment">//查看单科成绩</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SeeThesingle_2_print</span><span class="params">(menu2 *&amp; head, <span class="built_in">string</span> g, <span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Delete_2</span><span class="params">(menu2 *&amp; head, <span class="built_in">string</span>&amp; s)</span>;   <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    menu2* <span class="title function_">Find_2</span><span class="params">(menu2*&amp; head, <span class="type">int</span> change, <span class="built_in">string</span>&amp; c)</span>;  <span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">EnterSee2</span><span class="params">(menu2* headx[<span class="number">4</span>])</span>; <span class="comment">//查看接口函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Change_2</span><span class="params">(menu2 *&amp; head, <span class="type">int</span> choice, <span class="built_in">string</span>&amp; sn, <span class="built_in">string</span>&amp; s, <span class="type">float</span> grade)</span>;<span class="comment">//修改数据函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">CordReport_2</span><span class="params">(menu2* headx[<span class="number">4</span>])</span>;  <span class="comment">//成绩分析报告</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">CordReport_2_print</span><span class="params">(menu2* p, <span class="built_in">string</span>&amp; g, <span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Store2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-Users的声明"><a href="#3-Users的声明" class="headerlink" title="3.Users的声明"></a>3.Users的声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span>&#123;</span>   </span><br><span class="line">private:</span><br><span class="line">     <span class="built_in">string</span> accounts, password;</span><br><span class="line">     Users* next;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">Enter</span><span class="params">(Users* user)</span>;<span class="comment">//登陆函数</span></span><br><span class="line"></span><br><span class="line">    Users* <span class="title function_">Readuser</span><span class="params">(Users* user)</span>;<span class="comment">//读取账户信息函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">ChangePass</span><span class="params">(Users* user)</span>;<span class="comment">//修改密码函数</span></span><br><span class="line"></span><br><span class="line">    Users* <span class="title function_">Register</span><span class="params">(Users* user)</span>;<span class="comment">//注册函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">StoreUser</span><span class="params">(Users* user)</span>;<span class="comment">//存储用户账户函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-输入函数声明"><a href="#4-输入函数声明" class="headerlink" title="4.输入函数声明"></a>4.输入函数声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">inputlnt</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//这个函数是我们输入数字的函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inputString</span><span class="params">(<span class="built_in">string</span>&amp; buffer)</span>; <span class="comment">//这个函数就是输入字符串，同样我们可以检测是否溢出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">enterspring</span><span class="params">(<span class="type">int</span> c)</span>; <span class="comment">//接口，c是选择，可以实现输入密码的时候以****形式输入</span></span><br></pre></td></tr></table></figure><h4 id="5-显示函数声明"><a href="#5-显示函数声明" class="headerlink" title="5.显示函数声明"></a>5.显示函数声明</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShowMap0</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//登录注册菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap1</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//主系统菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap2</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//系统一菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap3</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//系统二菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowSeeit_1</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//菜单一信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heart</span><span class="params">()</span>; <span class="comment">//登录爱心显示</span></span><br></pre></td></tr></table></figure><h3 id="五、比较有特色的算法"><a href="#五、比较有特色的算法" class="headerlink" title="五、比较有特色的算法"></a>五、比较有特色的算法</h3><h4 id="1-管理员登录主系统"><a href="#1-管理员登录主系统" class="headerlink" title="1.管理员登录主系统"></a>1.管理员登录主系统</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1657017321084-16503547-ee1f-41ec-98d4-d8c3f573ea41.png#averageHue=%23cecccb&clientId=u597bb5ac-2c29-4&from=ui&id=u9089501b&name=image_2-oqxglqv3.png&originHeight=782&originWidth=1472&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34124&status=done&style=none&taskId=u06a30c94-9e03-4000-b8b4-9135458ca95&title=" alt="image_2-oqxglqv3.png"></p><p>采用心形算法，输出心形，优化界面。</p><p>登录使用检索本地文件以核对账户密码完成登录，对于数据文件采用用户名加后缀的形式作为对应文件名。</p><h4 id="2-学生基本信息管理系统"><a href="#2-学生基本信息管理系统" class="headerlink" title="2.学生基本信息管理系统"></a>2.学生基本信息管理系统</h4><p>鉴于对学号的顺序排序，选择采用一颗AVL树以保存数据，能够相对的提高程序的性能。</p><p>使用AVL树的几个基本旋转以实现插入。</p><p>对于每一个删除操作，均需调整AVL树的平衡，由于删除操作开销较大，我们可以选取左右子树较高的树中的最右或最左树以替代要删除的数据，这样可以明显减少时间平均复杂度。</p><h4 id="3-学生成绩管理系统"><a href="#3-学生成绩管理系统" class="headerlink" title="3.学生成绩管理系统"></a>3.学生成绩管理系统</h4><p>鉴于需要对总成绩以及各科成绩查询，寻常的排序需要花费大量的时间，十分不值，并且代码极其冗长，因此我们采用多重链表对数据进行操作，使用多个表头对应每一种成绩。这样做的缺点是查找和插入效率可能不如AVL树，但对于多根节点AVL树而言，删除一个数据所需要付出的代价是昂贵的，所以我们选择链表实现。</p><h3 id="六、存在的不足及对策"><a href="#六、存在的不足及对策" class="headerlink" title="六、存在的不足及对策"></a>六、存在的不足及对策</h3><p>1.不足：不知道如何进行开发程序</p><p>对策：先建造一个原型，列出想要实现的功能，逐步细化调整，再将功能一个一个实现，最终整合在一起</p><p>2.不足：想要实现好的效果，却不知从何下手</p><p>对策：有些问题已被前人解决过，可以通过借鉴实现，有的问题需要学习其他知识或工具，如数据可以储存在数据库中，UI界面的优化等，则当前阶段只需要做到自己能做到的最好就行。</p><h3 id="七、使用说明"><a href="#七、使用说明" class="headerlink" title="七、使用说明"></a>七、使用说明</h3><p>程序编译运行平台：Windows和Vs2022</p><p>打开文件夹”x64”→打开文件夹”Debug”→打开exe文件运行</p><p>原本无账户，则需先注册</p><p>输入字符串长度不得超过18</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1657017331908-da9f3d7f-138f-4b6a-848b-fa07211ea1d2.png#averageHue=%23cfcece&clientId=u597bb5ac-2c29-4&from=ui&id=u6b8578da&name=QQ%E6%88%AA%E5%9B%BE20220520194350_tmm2d3QPTu.png&originHeight=766&originWidth=1468&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33074&status=done&style=none&taskId=u46a61732-9d9a-4a8c-be95-96ded31d951&title=" alt="QQ截图20220520194350_tmm2d3QPTu.png"></p><h3 id="八、程序源代码"><a href="#八、程序源代码" class="headerlink" title="八、程序源代码"></a>八、程序源代码</h3><h4 id="1-Core1-h"><a href="#1-Core1-h" class="headerlink" title="1.Core1.h"></a>1.Core1.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CORE1_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CORE1_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">menu1</span> &#123;</span></span><br><span class="line">private:</span><br><span class="line">  <span class="built_in">string</span> sn;  <span class="comment">//学号 student number</span></span><br><span class="line">  <span class="built_in">string</span> name;  <span class="comment">//姓名</span></span><br><span class="line">  <span class="built_in">string</span> chat; <span class="comment">//联系方式</span></span><br><span class="line">  <span class="built_in">string</span> dor; <span class="comment">//宿舍号</span></span><br><span class="line">  <span class="type">int</span> height;     <span class="comment">//平衡树的高度</span></span><br><span class="line">  menu1* left;</span><br><span class="line">  menu1* right;</span><br><span class="line">public:</span><br><span class="line">  menu1(<span class="built_in">string</span> a, <span class="built_in">string</span> b, <span class="built_in">string</span> c, <span class="built_in">string</span> d, <span class="type">int</span> h=<span class="number">0</span>, menu1* L=nullptr,menu1* r=nullptr):</span><br><span class="line">    sn(a),name(b),chat(c),dor(d),height(h),left(L),right(r) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">high</span><span class="params">( menu1* p)</span>;<span class="comment">//返回高度</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">singleft</span><span class="params">( menu1* k2)</span>;<span class="comment">//左单旋</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">singright</span><span class="params">( menu1* k2)</span>;<span class="comment">//右单旋</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">doubleleft</span><span class="params">( menu1* k3)</span>;<span class="comment">//LR</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">doubleright</span><span class="params">( menu1* k3)</span>;<span class="comment">//RL</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Record_1</span><span class="params">( menu1*&amp; ph, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="built_in">string</span>&amp; c, <span class="built_in">string</span>&amp; d)</span>;<span class="comment">//记录系统一的用户数据，存储到文件中</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Seeit_1</span><span class="params">( menu1*&amp; head)</span>;<span class="comment">//查看所有数据函数</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Read1</span><span class="params">( menu1*&amp; head)</span>;   <span class="comment">//从文件中读取数据</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Delete_1</span><span class="params">( menu1* p, <span class="built_in">string</span>&amp; x)</span>;<span class="comment">//删除实现</span></span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">Find_1</span><span class="params">( menu1*&amp; head, <span class="type">int</span> sp)</span>;<span class="comment">//查询函数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Change_1</span><span class="params">( menu1 *&amp; head)</span>;<span class="comment">//修改数据</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">EnterDelete_1</span><span class="params">( menu1 *&amp; head)</span>;<span class="comment">//进入删除，一个接口</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">FreeAll_1</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//释放内存函数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> <span class="title function_">Store1</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="2-Core2-h"><a href="#2-Core2-h" class="headerlink" title="2.Core2.h"></a>2.Core2.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> CORE2_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CORE2_H</span></span><br><span class="line"><span class="comment">/*这个头文件里存储着与系统二相关的核心操作*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">menu2</span>&#123;</span>  </span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> sn2;    <span class="comment">//学号</span></span><br><span class="line">    <span class="built_in">string</span> name2;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">static</span> <span class="built_in">string</span> g[<span class="number">4</span>];</span><br><span class="line">    <span class="type">float</span> grade[<span class="number">4</span>];       <span class="comment">//总成绩的平均数,高数,英语,C++</span></span><br><span class="line">    menu2* Next; <span class="comment">//链表下一节点</span></span><br><span class="line">    menu2* Previous; <span class="comment">//上一节点</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">FreeAll_2</span><span class="params">(<span class="type">void</span>)</span>;    <span class="comment">//释放内存，退出时用到</span></span><br><span class="line"></span><br><span class="line">    menu2* <span class="title function_">Record_2</span><span class="params">(menu2*&amp; head, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="type">float</span> G[<span class="number">4</span>], <span class="type">int</span> change)</span>;<span class="comment">//写入文件</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Record_2_isnert</span><span class="params">(menu2 *&amp; head, menu2* p, menu2* pr, menu2* ph, <span class="type">float</span> x, <span class="type">int</span> ch, <span class="built_in">string</span>&amp; a)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Seeit_2</span><span class="params">(menu2 *&amp; head)</span>; <span class="comment">//查看信息</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SeeThesingle_2</span><span class="params">(menu2 *&amp; head, <span class="type">int</span> choice)</span>;   <span class="comment">//查看单科成绩</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SeeThesingle_2_print</span><span class="params">(menu2*&amp; head, <span class="built_in">string</span> g, <span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Delete_2</span><span class="params">(menu2*&amp; head, <span class="built_in">string</span>&amp; s)</span>;   <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">    menu2* <span class="title function_">Find_2</span><span class="params">(menu2 *&amp; head, <span class="type">int</span> change, <span class="built_in">string</span>&amp; c)</span>;  <span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">EnterSee2</span><span class="params">(menu2* headx[<span class="number">4</span>])</span>; <span class="comment">//查看接口函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Change_2</span><span class="params">(menu2*&amp; head, <span class="type">int</span> choice, <span class="built_in">string</span>&amp; sn, <span class="built_in">string</span>&amp; s, <span class="type">float</span> grade)</span>;<span class="comment">//修改数据函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">CordReport_2</span><span class="params">(menu2* headx[<span class="number">4</span>])</span>;  <span class="comment">//成绩分析报告</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">CordReport_2_print</span><span class="params">(menu2* p, <span class="built_in">string</span>&amp; g, <span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Store2</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="3-Everything-h"><a href="#3-Everything-h" class="headerlink" title="3.Everything.h"></a>3.Everything.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> EVERTTHING_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EVERTTHING_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ShowMap.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FileO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Core1.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Core2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Input.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量，用以记录用户存放数据的文件名</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">string</span> filebuffer1, filebuffer2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="4-FileO-h"><a href="#4-FileO-h" class="headerlink" title="4.FileO.h"></a>4.FileO.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FILEO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILEO_H</span></span><br><span class="line"><span class="comment">/*这个头文件里保存着大部分与文件读写有关的函数*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*账号-密码类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span>&#123;</span>   </span><br><span class="line">private:</span><br><span class="line">     <span class="built_in">string</span> accounts, password;</span><br><span class="line">     Users* next;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">Enter</span><span class="params">(Users* user)</span>;<span class="comment">//登陆函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Readuser</span><span class="params">(Users* user)</span>;<span class="comment">//读取账户信息函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">ChangePass</span><span class="params">(Users* user)</span>;<span class="comment">//修改密码函数</span></span><br><span class="line"></span><br><span class="line">    Users* <span class="title function_">Register</span><span class="params">(Users* user)</span>;<span class="comment">//注册函数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">StoreUser</span><span class="params">(Users* user)</span>;<span class="comment">//存储用户账户函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// FILEO_H</span></span></span><br></pre></td></tr></table></figure><h4 id="5-Input-h"><a href="#5-Input-h" class="headerlink" title="5.Input.h"></a>5.Input.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> INPUT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INPUT_H</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">inputlnt</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//这个函数是我们输入数字的函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inputString</span><span class="params">(<span class="built_in">string</span>&amp; buffer)</span>; <span class="comment">//这个函数就是输入字符串，同样我们可以检测是否溢出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">enterspring</span><span class="params">(<span class="type">int</span> c)</span>; <span class="comment">//接口，c是选择，可以实现输入密码的时候以****形式输入</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="6-ShowMap-h"><a href="#6-ShowMap-h" class="headerlink" title="6.ShowMap.h"></a>6.ShowMap.h</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHOWMAP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHOWMAP_H</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap0</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//登录注册菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap1</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//主系统菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap2</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//系统1菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap3</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//系统二菜单</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowSeeit_1</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//菜单一信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heart</span><span class="params">()</span>; <span class="comment">//登录爱心显示</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// SHOWMAP_H</span></span></span><br></pre></td></tr></table></figure><h4 id="7-Core1-cpp"><a href="#7-Core1-cpp" class="headerlink" title="7.Core1.cpp"></a>7.Core1.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*用以计算高度的函数*/</span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">menu1::high</span><span class="params">(menu1* p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> p-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*LL型旋转 */</span></span><br><span class="line">  menu1* <span class="title function_">menu1::singleft</span><span class="params">( menu1* k2)</span>  <span class="comment">//左单旋  LL</span></span><br><span class="line"> &#123;</span><br><span class="line">     menu1* k1 = k2-&gt;left;</span><br><span class="line">     k2-&gt;left = k1-&gt;right;</span><br><span class="line">     k1-&gt;right = k2;</span><br><span class="line">     k1-&gt;height = max(high(k1-&gt;left), high(k1-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">     k2-&gt;height = max(high(k2-&gt;left), high(k2-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> k1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*RR型旋转*/</span></span><br><span class="line">  menu1* <span class="title function_">menu1::singright</span><span class="params">( menu1* k2)</span>  <span class="comment">//右单旋 RR</span></span><br><span class="line"> &#123;</span><br><span class="line">     menu1* k1 = k2-&gt;right;</span><br><span class="line">     k2-&gt;right = k1-&gt;left;</span><br><span class="line">     k1-&gt;left = k2;</span><br><span class="line">     k1-&gt;height = max(high(k1-&gt;left), high(k1-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">     k2-&gt;height = max(high(k2-&gt;left), high(k2-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">return</span> k1;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">menu1::doubleleft</span><span class="params">( menu1* k3)</span>   <span class="comment">//左双旋 LR 核心操作 LRL(左孩子右单旋，本身左单旋)</span></span><br><span class="line"> &#123;</span><br><span class="line">     k3-&gt;left = singright(k3-&gt;left);</span><br><span class="line">     <span class="keyword">return</span> singleft(k3);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  menu1* <span class="title function_">menu1::doubleright</span><span class="params">( menu1* k3)</span>  <span class="comment">//右双旋 RL 核心操作 RLR</span></span><br><span class="line"> &#123;</span><br><span class="line">     k3-&gt;right = singleft(k3-&gt;right);</span><br><span class="line">     <span class="keyword">return</span> singright(k3);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*用以记录系统一数据的函数，并未保存至文件中，采用递归实现(学号是有序的) */</span></span><br><span class="line"><span class="comment">/*主要的思想就是平衡树的插入操作 */</span></span><br><span class="line"><span class="comment">/*a,b,c,d即结构体中的信息，都是按顺序来的 */</span></span><br><span class="line">   <span class="type">void</span> <span class="title function_">menu1::Record_1</span><span class="params">( menu1 *&amp; ph, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="built_in">string</span>&amp; c, <span class="built_in">string</span>&amp; d)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (ph == nullptr)</span><br><span class="line">      &#123;</span><br><span class="line">          ph = new menu1(a,b,c,d);</span><br><span class="line">          <span class="keyword">if</span> (ph == nullptr)</span><br><span class="line">          &#123;</span><br><span class="line">              MessageBox(nullptr, TEXT(<span class="string">&quot;程序异常崩溃&quot;</span>), TEXT(<span class="string">&quot;sorry!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">            </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a.compare(ph-&gt;sn) &lt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          Record_1(ph-&gt;left, a, b, c, d);</span><br><span class="line">          <span class="keyword">if</span> (high(ph-&gt;left) - high(ph-&gt;right) == <span class="number">2</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (a.compare(ph-&gt;left-&gt;sn) &lt; <span class="number">0</span>)</span><br><span class="line">                  ph = singleft(ph);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  ph = doubleleft(ph);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a.compare(ph-&gt;sn) &gt; <span class="number">0</span>)</span><br><span class="line">      &#123;     </span><br><span class="line">          Record_1(ph-&gt;right, a, b, c, d);</span><br><span class="line">          <span class="keyword">if</span> (high(ph-&gt;right) - high(ph-&gt;left) == <span class="number">2</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (a.compare(ph-&gt;right-&gt;sn) &gt; <span class="number">0</span>)</span><br><span class="line">                  ph = singright(ph);</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  ph = doubleright(ph);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a.compare(ph-&gt;sn) == <span class="number">0</span>)<span class="comment">//检索学号重复</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您输入的学号有重复!请您检查并重新操作 &quot;</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ph-&gt;height = max(high(ph-&gt;left), high(ph-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*查看信息，中序遍历递归 */</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">menu1::Seeit_1</span><span class="params">( menu1 *&amp; head)</span></span><br><span class="line">   &#123;</span><br><span class="line">       menu1* p = head;</span><br><span class="line">       <span class="keyword">if</span> (p)</span><br><span class="line">       &#123;</span><br><span class="line">           Seeit_1(p-&gt;left);</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;\t\t     %-19s%-22s%-27s%-16s\n&quot;</span>, p-&gt;sn.c_str(), p-&gt;name.c_str(), p-&gt;chat.c_str(), p-&gt;dor.c_str());</span><br><span class="line">           Seeit_1(p-&gt;right);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除节点函数，递归实现*/</span></span><br><span class="line"><span class="comment">/*主要的思想为平衡树删除节点的操作*/</span></span><br><span class="line">     menu1* <span class="title function_">menu1::Delete_1</span><span class="params">( menu1* p, <span class="built_in">string</span>&amp; x)</span>&#123;</span><br><span class="line">        menu1* ph;</span><br><span class="line">        <span class="keyword">if</span> (!p)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该学生不存在!\n&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.compare(p-&gt;sn) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;left = Delete_1(p-&gt;left, x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(high(p-&gt;left) - high(p-&gt;right)) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (high(p-&gt;left-&gt;left) &gt; high(p-&gt;left-&gt;right))</span><br><span class="line">                    p = singleft(p);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = doubleleft(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.compare(p-&gt;sn) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;right = Delete_1(p-&gt;right, x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(high(p-&gt;left) - high(p-&gt;right)) == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (high(p-&gt;right-&gt;left) &lt; high(p-&gt;right-&gt;right))</span><br><span class="line">                    p = singright(p);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = doubleright(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;left &amp;&amp; p-&gt;right)<span class="comment">/*可以找到较高的子树中符合的节点替代，这样可以减少旋转的开销*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (high(p-&gt;left) &gt;= high(p-&gt;right))</span><br><span class="line">            &#123;</span><br><span class="line">                ph = p-&gt;left;</span><br><span class="line">                <span class="keyword">while</span> (ph-&gt;right)<span class="comment">//左子树中最大节点替代</span></span><br><span class="line">                    ph = ph-&gt;right;</span><br><span class="line">                p-&gt;sn = ph-&gt;sn;</span><br><span class="line">                p-&gt;name = ph-&gt;name;</span><br><span class="line">                p-&gt;dor = ph-&gt;dor;</span><br><span class="line">                p-&gt;chat = ph-&gt;chat;</span><br><span class="line">                p-&gt;left = Delete_1(p-&gt;left, ph-&gt;sn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ph = p-&gt;right;</span><br><span class="line">                <span class="keyword">while</span> (ph-&gt;left)<span class="comment">//右子树中最下节点替代</span></span><br><span class="line">                    ph = ph-&gt;left;</span><br><span class="line">                p-&gt;sn = ph-&gt;sn;</span><br><span class="line">                p-&gt;name = ph-&gt;name;</span><br><span class="line">                p-&gt;dor = ph-&gt;dor;</span><br><span class="line">                p-&gt;chat = ph-&gt;chat;</span><br><span class="line">                p-&gt;right = Delete_1(p-&gt;right, ph-&gt;sn);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            menu1* ph = p;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;left == nullptr)</span><br><span class="line">                p = p-&gt;right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;right == nullptr)</span><br><span class="line">                p = p-&gt;left;</span><br><span class="line">            delete ph;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*查询函数 */</span></span><br><span class="line">      menu1* <span class="title function_">menu1::Find_1</span><span class="params">( menu1*&amp; head, <span class="type">int</span> sp)</span><span class="comment">//sp用以表示选择，即以何种方式查询</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="built_in">string</span> s;</span><br><span class="line">         menu1* p = head,*  <span class="built_in">queue</span>[<span class="number">1000</span>];</span><br><span class="line">         <span class="type">int</span> hea = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">         <span class="built_in">queue</span>[tail++] = head;</span><br><span class="line">         <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;暂无数据\n&quot;</span>;</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">switch</span> (sp)</span><br><span class="line">         &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入该生的学号  &quot;</span>;</span><br><span class="line">             inputString(s);</span><br><span class="line">             system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">             <span class="keyword">while</span> (s.compare(p-&gt;sn) != <span class="number">0</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (s.compare(p-&gt;sn) &lt; <span class="number">0</span>)</span><br><span class="line">                     p = p-&gt;left;</span><br><span class="line">                 <span class="keyword">else</span> <span class="keyword">if</span> (s.compare(p-&gt;sn) &gt; <span class="number">0</span>)</span><br><span class="line">                     p = p-&gt;right;</span><br><span class="line">                 <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">                 &#123;</span><br><span class="line">                     <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;对不起，该生不存在\n&quot;</span>;</span><br><span class="line">                     <span class="keyword">return</span> p;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t----------------------******************学生信息查看*********************--------------------\n&quot;</span>;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t-------------学号---------------姓名------------------联系方式-------------------宿舍号-----\n\n&quot;</span>;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\t\t     %-19s%-22s%-27s%-16s\n&quot;</span>, p-&gt;sn.c_str(), p-&gt;name.c_str(), p-&gt;chat.c_str(), p-&gt;dor.c_str());</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入该生的姓名  &quot;</span>;</span><br><span class="line">             inputString(s);</span><br><span class="line">             system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">             <span class="keyword">while</span> (hea &lt; tail &amp;&amp; s.compare(<span class="built_in">queue</span>[hea]-&gt;name) != <span class="number">0</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="keyword">if</span> (<span class="built_in">queue</span>[hea]-&gt;left)</span><br><span class="line">                     <span class="built_in">queue</span>[tail++] = <span class="built_in">queue</span>[hea]-&gt;left;</span><br><span class="line">                 <span class="keyword">if</span> (<span class="built_in">queue</span>[hea]-&gt;right)</span><br><span class="line">                     <span class="built_in">queue</span>[tail++] = <span class="built_in">queue</span>[hea]-&gt;right;</span><br><span class="line">                 hea++;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (hea == tail)</span><br><span class="line">             &#123;</span><br><span class="line"></span><br><span class="line">                 <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;对不起，该生不存在\n&quot;</span>;</span><br><span class="line">                 <span class="keyword">return</span> nullptr;</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span> p = <span class="built_in">queue</span>[hea];</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t----------------------******************学生信息查看******************** *--------------------\n&quot;</span>;</span><br><span class="line">             <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t-------------学号---------------姓名------------------联系方式-------------------宿舍号-----\n&quot;</span>;</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;\t\t     %-19s%-22s%-27s%-16s\n&quot;</span>, p-&gt;sn.c_str(), p-&gt;name.c_str(), p-&gt;chat.c_str(), p-&gt;dor.c_str());</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*修改数据函数 */</span></span><br><span class="line">      <span class="type">void</span> <span class="title function_">menu1::Change_1</span><span class="params">(menu1 *&amp; head)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">string</span> sn1;</span><br><span class="line">          <span class="type">int</span> ck;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您需要输入您想要修改的学生的学号\n&quot;</span>;</span><br><span class="line">          menu1* p = Find_1(head, <span class="number">4</span>);</span><br><span class="line">          <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">          &#123;</span><br><span class="line">              system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您可以输入 1 以修改学号，输入 2 以修改姓名，输入 3 以修改联系方式，输入 4 以修改宿舍号，输入 0 以退出本次操作\n&quot;</span>;</span><br><span class="line">              <span class="built_in">cin</span> &gt;&gt; ck;</span><br><span class="line">              <span class="keyword">switch</span> (ck)</span><br><span class="line">              &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入新学号 &quot;</span>;</span><br><span class="line">                  inputString(p-&gt;sn);</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;操作成功，请继续操作\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入新姓名 &quot;</span>;</span><br><span class="line">                  inputString(p-&gt;name);</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;操作成功，请继续操作\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入新联系方式 &quot;</span>;</span><br><span class="line">                  inputString(p-&gt;chat);</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;操作成功，请继续操作\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入新宿舍号 &quot;</span>;</span><br><span class="line">                  inputString(p-&gt;dor);</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;操作成功，请继续操作\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入的数字有误，请重新输入\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*删除函数的接口，进入删除菜单 */</span></span><br><span class="line">       <span class="type">void</span> <span class="title function_">menu1::EnterDelete_1</span><span class="params">( menu1 *&amp; head)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">int</span> c;</span><br><span class="line">          <span class="built_in">string</span> sn1;</span><br><span class="line">          <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              ShowSeeit_1();</span><br><span class="line">              Seeit_1(head);</span><br><span class="line">              <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您可以输入 1 以删除，2 以全部删除，0 以返回菜单\n&quot;</span>;</span><br><span class="line">              <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">              <span class="keyword">switch</span> (c)</span><br><span class="line">              &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您想要删除学生的学号 &quot;</span>;</span><br><span class="line">                  inputString(sn1);</span><br><span class="line">                  head = Delete_1(head, sn1);</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;本次操作结束，请输入任意键继续... &quot;</span>;</span><br><span class="line">                  <span class="built_in">cin</span>.ignore();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                  head-&gt;FreeAll_1();</span><br><span class="line">                  head = nullptr;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                  <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入有误，请重新输入\n&quot;</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*Free */</span></span><br><span class="line">       <span class="type">void</span> <span class="title function_">menu1::FreeAll_1</span><span class="params">()</span></span><br><span class="line">       &#123;    </span><br><span class="line">           menu1* head = this;</span><br><span class="line">           <span class="keyword">if</span> (head &amp;&amp; head-&gt;left)</span><br><span class="line">               head-&gt;left-&gt;FreeAll_1();</span><br><span class="line">           <span class="keyword">if</span> (head)</span><br><span class="line">           &#123;</span><br><span class="line">               delete head;</span><br><span class="line">               head = nullptr;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (head &amp;&amp; head-&gt;right)</span><br><span class="line">               head-&gt;right-&gt;FreeAll_1();</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="8-Core2-cpp"><a href="#8-Core2-cpp" class="headerlink" title="8.Core2.cpp"></a>8.Core2.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> flag;<span class="comment">//申明全局变量的使用</span></span><br><span class="line"><span class="built_in">string</span> menu2::g[<span class="number">4</span>] = &#123; <span class="string">&quot;平均&quot;</span>,<span class="string">&quot;高数&quot;</span>,<span class="string">&quot;英语&quot;</span>,<span class="string">&quot;C++&quot;</span> &#125;;</span><br><span class="line"><span class="comment">/*用于记录数据，ch用以表示选择，1个函数分别处理多个表头 */</span></span><br><span class="line"> menu2* <span class="title function_">menu2::Record_2</span><span class="params">( menu2*&amp; head, <span class="built_in">string</span>&amp; a, <span class="built_in">string</span>&amp; b, <span class="type">float</span> G[<span class="number">4</span>], <span class="type">int</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">     menu2* p = head,*  pr=nullptr,*  ph=nullptr;<span class="comment">//双向链表</span></span><br><span class="line">     G[<span class="number">0</span>] = (G[<span class="number">1</span>] + G[<span class="number">2</span>] + G[<span class="number">3</span>]) / <span class="number">3.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.compare(p-&gt;sn2) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;学号存在重复，请检查输入...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;<span class="comment">//检索学号重复</span></span><br><span class="line">    p = head;</span><br><span class="line">    ph = new menu2;</span><br><span class="line">    <span class="keyword">if</span> (ph == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox(nullptr, TEXT(<span class="string">&quot;程序异常崩溃&quot;</span>), TEXT(<span class="string">&quot;Sorry!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        head = ph;</span><br><span class="line">        ph-&gt;Previous = nullptr;</span><br><span class="line">        ph-&gt;Next = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> head-&gt;Record_2_isnert(head, p, pr, ph, G[ch], ch, a);</span><br><span class="line">    ph-&gt;sn2 = a;</span><br><span class="line">    ph-&gt;name2 = b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        ph-&gt;grade[i] = G[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::Record_2_isnert</span><span class="params">(menu2*&amp; head, menu2* p, menu2* pr, menu2* ph, <span class="type">float</span> x, <span class="type">int</span> ch, <span class="built_in">string</span>&amp; a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; p-&gt;grade[ch] || (x == p-&gt;grade[ch] &amp;&amp; a.compare(p-&gt;sn2) &lt;= <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        head = ph;</span><br><span class="line">        ph-&gt;Previous = nullptr;</span><br><span class="line">        ph-&gt;Next = p;</span><br><span class="line">        p-&gt;Previous = ph;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; x &lt; p-&gt;grade[ch])</span><br><span class="line">        &#123;</span><br><span class="line">            pr = p;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; x == p-&gt;grade[ch] &amp;&amp; a.compare(p-&gt;sn2) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pr = p;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">        ph-&gt;Previous = pr;</span><br><span class="line">        <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            pr-&gt;Next = ph;</span><br><span class="line">            ph-&gt;Next = nullptr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ph-&gt;Next = p;</span><br><span class="line">            pr-&gt;Next = ph;</span><br><span class="line">            p-&gt;Previous = ph;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*查看所有数据函数 */</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">menu2::Seeit_2</span><span class="params">( menu2 *&amp; head)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    menu2* p = head;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\t----------------------******************学生成绩查看******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t学号----------姓名----------高数成绩--------英语成绩--------C++程序设计成绩--------总成绩(平均成绩)\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%-14s%-15s%-15.1f%-18.1f%-23.1f%-15.1f\n&quot;</span>, p-&gt;sn2.c_str(), p-&gt;name2.c_str(), p-&gt;grade[<span class="number">1</span>], p-&gt;grade[<span class="number">2</span>], p-&gt;grade[<span class="number">3</span>], p-&gt;grade[<span class="number">0</span>]);</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除节点函数 */</span></span><br><span class="line"><span class="comment">//flag用以标记删除失败情况，避免多次删除</span></span><br><span class="line"><span class="comment">//主要要考虑前节点与后节点的存在情况</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">menu2::Delete_2</span><span class="params">( menu2 *&amp; head, <span class="built_in">string</span>&amp; s)</span></span><br><span class="line">&#123;</span><br><span class="line">     menu2* p = head;</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">1</span>;<span class="comment">//没有这个学生</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;暂无数据!\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s.compare(p-&gt;sn2) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">        <span class="keyword">if</span> (!p)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;该生数据不存在，请重试！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p-&gt;Previous == nullptr &amp;&amp; p-&gt;Next == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        delete p;</span><br><span class="line">        p = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!p-&gt;Previous)</span><br><span class="line">    &#123;</span><br><span class="line">        head = p-&gt;Next;</span><br><span class="line">        p-&gt;Next-&gt;Previous = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!p-&gt;Next)</span><br><span class="line">        p-&gt;Previous-&gt;Next = nullptr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;Previous-&gt;Next = p-&gt;Next;</span><br><span class="line">        p-&gt;Next-&gt;Previous = p-&gt;Previous;</span><br><span class="line">    &#125;</span><br><span class="line">    delete p;</span><br><span class="line">    p = nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历查询*/</span></span><br><span class="line"> menu2* <span class="title function_">menu2::Find_2</span><span class="params">( menu2 *&amp; head, <span class="type">int</span> change, <span class="built_in">string</span>&amp; c)</span><span class="comment">//C用以表示姓名或者学号，取决于change是否为6还是4</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    menu2* p = head;</span><br><span class="line">    <span class="keyword">if</span> (change == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.compare(p-&gt;sn2) == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.compare(p-&gt;name2) == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n\n\n\t----------------------******************学生成绩查看******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t学号----------姓名----------高数成绩--------英语成绩--------C++程序设计成绩--------总成绩(平均成绩)\n\n&quot;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t%-14s%-15s%-15.1f%-18.1f%-23.1f%-15.1f&quot;</span>, p-&gt;sn2.c_str(), p-&gt;name2.c_str(), p-&gt;grade[<span class="number">1</span>], p-&gt;grade[<span class="number">2</span>], p-&gt;grade[<span class="number">3</span>], p-&gt;grade[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;该学生不存在\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查看单科成绩 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::SeeThesingle_2</span><span class="params">( menu2 *&amp; headofit, <span class="type">int</span> ch)</span></span><br><span class="line">&#123;</span><br><span class="line">    menu2* head = headofit;</span><br><span class="line">    SeeThesingle_2_print(head, g[ch], ch);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n操作成功，您可以继续操作！\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::SeeThesingle_2_print</span><span class="params">(menu2 *&amp; head, <span class="built_in">string</span> g, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n\n\n\t----------------------******************学生&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;成绩查看*********************  --------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t\t学号----------姓名----------&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;成绩\n\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\t\t\t\t%-14s%-15s%-15.1f\n&quot;</span>, head-&gt;sn2.c_str(), head-&gt;name2.c_str(), head-&gt;grade[index]);</span><br><span class="line">        head = head-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*进入查看单科成绩接口 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::EnterSee2</span><span class="params">(menu2* headx[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您可以输入数字 1 以查看学生高数成绩，2 以查看学生的英语成绩，3 以查看C++成绩,0 以返回菜单\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fflush(<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (!c) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="number">4</span> &amp;&amp; c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            SeeThesingle_2(headx[c], c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入有误，请重新输入\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改数据，sn学号，s姓名，grade取决于choice分别表示不同的需要修改的成绩 */</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">menu2::Change_2</span><span class="params">( menu2 *&amp; head, <span class="type">int</span> choice, <span class="built_in">string</span>&amp; sn, <span class="built_in">string</span>&amp; s, <span class="type">float</span> grade)</span></span><br><span class="line">&#123;</span><br><span class="line">    menu2* p = head;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; sn.compare(p-&gt;sn2)!=<span class="number">0</span>)<span class="comment">//找到对应的学生</span></span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> ;<span class="comment">//没有什么也不做</span></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        p-&gt;sn2 = s;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        p-&gt;name2 = s;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        f = (grade + p-&gt;grade[<span class="number">2</span>] + p-&gt;grade[<span class="number">3</span>]) / <span class="number">3.0</span>;</span><br><span class="line">        p-&gt;grade[<span class="number">1</span>] = grade;</span><br><span class="line">        p-&gt;grade[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        f = (grade + p-&gt;grade[<span class="number">1</span>] + p-&gt;grade[<span class="number">3</span>]) / <span class="number">3.0</span>;</span><br><span class="line">        p-&gt;grade[<span class="number">2</span>] = grade;</span><br><span class="line">        p-&gt;grade[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        f = (grade + p-&gt;grade[<span class="number">2</span>] + p-&gt;grade[<span class="number">1</span>]) / <span class="number">3.0</span>;</span><br><span class="line">        p-&gt;grade[<span class="number">3</span>] = grade;</span><br><span class="line">        p-&gt;grade[<span class="number">0</span>] = f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*成绩报告函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::CordReport_2</span><span class="params">( menu2* headx[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;----------------------******************输入4以返回菜单，输入5以刷新页面******************** *--------------------\n&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t*您可以输入 0 以查看平均成绩报告，1 以查看高数成绩报告，2 以查看英语成绩报告，3 以查看C++成绩报告* \n&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="number">4</span>)<span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="number">5</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch &lt; <span class="number">4</span> &amp;&amp; ch &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                CordReport_2_print(headx[ch], g[ch], ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您的输入有误，请重新输入！\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::CordReport_2_print</span><span class="params">(menu2* p, <span class="built_in">string</span>&amp; g,<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">float</span> num1 = <span class="number">0</span>, num2 = <span class="number">0</span>, num3 = <span class="number">0</span>;<span class="comment">//满绩、及格、挂科占比</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t *&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;成绩报告*  \n\n\t\t\t\t&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;成绩在90分及以上的人分别是:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t学号----------姓名-----------成绩\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; p-&gt;grade[index] &gt;= <span class="number">90</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t\t%-15s%-15s%.1f&quot;</span>, p-&gt;sn2.c_str(), p-&gt;name2.c_str(), p-&gt;grade[index]);</span><br><span class="line">        num1++;</span><br><span class="line">        num2++;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num1 == <span class="number">0</span>)  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t您的班没有满分人士！&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n\t\t\t\t&quot;</span> &lt;&lt; g &lt;&lt; <span class="string">&quot;成绩在60分以下的人分别是:\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t学号----------姓名-----------成绩\n&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;grade[index] &lt; <span class="number">60</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t\t%-15s%-15s%.1f&quot;</span>, p-&gt;sn2.c_str(), p-&gt;name2.c_str(), p-&gt;grade[index]);</span><br><span class="line">            num3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> num2++;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num3 == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t您的班没有挂科人士！&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (num2 + num3 != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\n\t\t\t\t总体分布:\n\t\t\t\t60分以下共有%.0f人，占比%.1f%%。\n\n\t\t\t\t60分以上共有%.0f人，占比%.1f%%。\n\n\t\t\t\t其中90分以上共有%.0f人,占比%.1f%%。\n\n&quot;</span>, num3, (<span class="type">float</span>)num3 / (num2 + num3)*  <span class="number">100.0</span>, num2, (<span class="type">float</span>)num2 / (num2 + num3)*  <span class="number">100.0</span>, num1, (<span class="type">float</span>)num1 / (num2 + num3)*  <span class="number">100.0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n\t\t\t暂无数据！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu2::FreeAll_2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    menu2* p,* h = this;</span><br><span class="line">    <span class="keyword">while</span> (h)</span><br><span class="line">    &#123;</span><br><span class="line">        p = h;</span><br><span class="line">        h = h-&gt;Next;</span><br><span class="line">        delete p;</span><br><span class="line">        p = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-FileO-cpp"><a href="#9-FileO-cpp" class="headerlink" title="9.FileO.cpp"></a>9.FileO.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"><span class="comment">/*存储基本信息函数接口 */</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">menu1::Store1</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    menu1* head = this;</span><br><span class="line">    fstream file1;</span><br><span class="line">    file1.open(filebuffer1, ios::out );</span><br><span class="line">    menu1* <span class="built_in">queue</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> first = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>[tail++] = head;<span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">if</span> (!file1) <span class="keyword">return</span> ;</span><br><span class="line">    file1 &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (first &lt; tail)<span class="comment">//BFS遍历树存储每个节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">queue</span>[first]-&gt;left)  <span class="built_in">queue</span>[tail++] = <span class="built_in">queue</span>[first]-&gt;left;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">queue</span>[first]-&gt;right) <span class="built_in">queue</span>[tail++] = <span class="built_in">queue</span>[first]-&gt;right;</span><br><span class="line">        file1 &lt;&lt; <span class="built_in">queue</span>[first]-&gt;sn&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">queue</span>[first]-&gt;name &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">queue</span>[first]-&gt;chat&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">queue</span>[first]-&gt;dor&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        first++;</span><br><span class="line">    &#125;</span><br><span class="line">    file1.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从文件中读取信息数据函数接口 */</span></span><br><span class="line"> menu1* <span class="title function_">menu1::Read1</span><span class="params">( menu1 *&amp; head)</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">string</span> a, b, c, d;<span class="comment">//顺序表示学号姓名联系宿舍</span></span><br><span class="line">    fstream file1;</span><br><span class="line">    file1.open(filebuffer1, ios::in | ios::out );</span><br><span class="line">    <span class="keyword">if</span> (!file1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!file1.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        file1&gt;&gt;a&gt;&gt; b&gt;&gt; c&gt;&gt; d;</span><br><span class="line">        <span class="keyword">if</span> (file1.fail())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        Record_1(head, a, b, c, d);</span><br><span class="line">    &#125;</span><br><span class="line">    file1.close();</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*存储成绩信息函数接口*/</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">menu2::Store2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    fstream file2;</span><br><span class="line">    file2.open(filebuffer2, ios::out);</span><br><span class="line">    menu2* p = this;</span><br><span class="line">    <span class="keyword">if</span> (!file2) <span class="keyword">return</span>;</span><br><span class="line">    file2 &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        file2&lt;&lt; p-&gt;sn2&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;name2 &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;grade[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;grade[<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p-&gt;grade[<span class="number">3</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        p = p-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    file2.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*注册函数接口菜单 */</span></span><br><span class="line"> Users* <span class="title function_">Users::Register</span><span class="params">( Users* user)</span></span><br><span class="line">&#123;</span><br><span class="line">    Users* u = user, * ur = user,*  uh;</span><br><span class="line">    <span class="built_in">string</span> pass, act;</span><br><span class="line">    fstream f1, f2;</span><br><span class="line">    <span class="built_in">string</span> fs1, fs2;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">TOP _:</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;        --------------------******************注册账号******************** *--------------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;                             您可以输入 1 以进入注册，输入其他任意数以返回...\n\n&quot;</span>;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您的账号 &quot;</span>;</span><br><span class="line">        act = enterspring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (u)<span class="comment">//检查账号是否已经存在</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (act.compare(u-&gt;accounts) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;账号已经存在...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            &#125;</span><br><span class="line">            ur = u;</span><br><span class="line">            u = u-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        uh = new Users;<span class="comment">//新账号信息</span></span><br><span class="line">        <span class="keyword">if</span> (uh == nullptr) <span class="keyword">return</span> user;<span class="comment">//异常错误</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您的密码 &quot;</span>;</span><br><span class="line">        pass = enterspring(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请再次输入您的密码 &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (pass.compare(enterspring(<span class="number">2</span>)) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;两次输入密码不一致，请重新输入.\n按任意键继续...&quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span>.ignore();</span><br><span class="line">            <span class="keyword">goto</span> TOP _;</span><br><span class="line">        &#125;</span><br><span class="line">        uh-&gt;accounts = act;</span><br><span class="line">        uh-&gt;password = pass;</span><br><span class="line">        uh-&gt;next = nullptr;</span><br><span class="line">        <span class="keyword">if</span> (user == nullptr)   user = uh;</span><br><span class="line">        <span class="keyword">else</span>    ur-&gt;next = uh;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> user;</span><br><span class="line">    fs1 = act;</span><br><span class="line">    fs2 = act;</span><br><span class="line">    fs1 += <span class="string">&quot;_IF.txt&quot;</span>;<span class="comment">//添加指定后缀</span></span><br><span class="line">    fs2 += <span class="string">&quot;_GD.txt&quot;</span>;</span><br><span class="line">    f1.open(fs1, ios::app);</span><br><span class="line">    f2.open(fs2, ios::app);</span><br><span class="line">    f1.close();</span><br><span class="line">    f2.close();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;注册成功，即将返回登陆页面！...&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*登陆函数接口菜单*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Users::Enter</span><span class="params">( Users* user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> act;</span><br><span class="line">    <span class="type">int</span> ch, gh;</span><br><span class="line">TOP _:</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;    ------------------------******************登陆系统******************** *------------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;                             您可以输入 1 以进入登陆，其他任意键以返回...\n\n&quot;</span>;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入您的账号 &quot;</span>;</span><br><span class="line">        act = enterspring(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (user == nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;账号信息不存在...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         Users* p = user;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; act.compare(p-&gt;accounts) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;账号信息不存在...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入您的密码 &quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;password.compare(enterspring(<span class="number">2</span>)) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;密码错误,您可以输入 1 以继续输入密码，0 以刷新页面重新登陆 \n&quot;</span>;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; gh;</span><br><span class="line">            <span class="keyword">if</span> (gh == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入您的密码 &quot;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (gh == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> TOP _;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*用以创建存放用户数据两个文件的名称*/</span></span><br><span class="line">    filebuffer1=act;</span><br><span class="line">    filebuffer2=act;</span><br><span class="line">    filebuffer1+= <span class="string">&quot;_IF.txt&quot;</span>;<span class="comment">//添加指定后缀</span></span><br><span class="line">    filebuffer2+= <span class="string">&quot;_GD.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取用户账户信息*/</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">Users::Readuser</span><span class="params">( Users* user)</span></span><br><span class="line">&#123;</span><br><span class="line">    Users* ph, * pc = user;</span><br><span class="line">    fstream p;</span><br><span class="line">    p.open(<span class="string">&quot;Users.txt&quot;</span>, ios::in|ios::out);</span><br><span class="line">    <span class="keyword">if</span> (!p)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">string</span> act,pass;</span><br><span class="line">    <span class="keyword">while</span> (!p.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        p&gt;&gt; act&gt;&gt; pass;</span><br><span class="line">        <span class="keyword">if</span> (!p.fail())</span><br><span class="line">        &#123;</span><br><span class="line">            ph = new Users;</span><br><span class="line">            ph-&gt;accounts= act;</span><br><span class="line">            ph-&gt;password= pass;</span><br><span class="line">            ph-&gt;next = nullptr;</span><br><span class="line">            <span class="keyword">if</span> (user == nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                user = ph;</span><br><span class="line">                pc = user;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pc-&gt;next = ph;</span><br><span class="line">                pc = pc-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*存储用户账户信息函数实现 */</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">Users::StoreUser</span><span class="params">( Users* user)</span></span><br><span class="line">&#123;</span><br><span class="line">     Users* p1;</span><br><span class="line">     fstream p;</span><br><span class="line">     p.open(<span class="string">&quot;Users.txt&quot;</span>, ios::out);</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;保存用户信息失败...&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p &lt;&lt; <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (user)</span><br><span class="line">    &#123;</span><br><span class="line">        p1 = user;</span><br><span class="line">        p&lt;&lt;user-&gt;accounts&lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; user-&gt;password&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        user = user-&gt;next;</span><br><span class="line">        delete p1;</span><br><span class="line">    &#125;</span><br><span class="line">    p.close();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改用户账号密码函数 */</span></span><br><span class="line"> <span class="type">void</span> <span class="title function_">Users::ChangePass</span><span class="params">( Users* user)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> act, pass, pass1;</span><br><span class="line">    <span class="type">int</span> ch;</span><br><span class="line">    <span class="type">int</span> len = filebuffer1.size(), i;</span><br><span class="line">     Users* p = user;</span><br><span class="line">    <span class="comment">/*检索当前账户名 */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (filebuffer1[i] == <span class="string">&#x27; _&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">        act+= filebuffer1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p &amp;&amp; act.compare(p-&gt;accounts) != <span class="number">0</span>)<span class="comment">//账户一定是存在的</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">TOP_:</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;   --------------------******************修改密码*********************------------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;                        您可以输入 1 以开始修改操作，0 以返回...\n&quot;</span>;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入原密码  &quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &amp;&amp; enterspring(<span class="number">2</span>).compare(p-&gt;password) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> gh;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;密码错误,您可以输入 1 以继续输入密码，0 以刷新页面 &quot;</span>;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; gh;</span><br><span class="line">            <span class="keyword">if</span> (gh == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入您的原密码 &quot;</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (gh == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">goto</span> TOP_;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您的新密码 &quot;</span>;</span><br><span class="line">        pass1 = enterspring(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请再次输入您的密码 &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (pass1.compare(enterspring(<span class="number">2</span>)) != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;两次输入密码不一致，请重新输入.\n按任意键继续...&quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span>.ignore();</span><br><span class="line">            <span class="keyword">goto</span> TOP _;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;password = pass1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;修改密码成功！请按任意键返回...&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span>.ignore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-Input-cpp"><a href="#10-Input-cpp" class="headerlink" title="10.Input.cpp"></a>10.Input.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">inputlnt</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="type">float</span> rax;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; rax;</span><br><span class="line">        <span class="keyword">if</span> (rax &lt; <span class="number">0</span> || rax &gt; <span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;您输入的数字范围有误，请重新输入&quot;</span>), TEXT(<span class="string">&quot;输入错误&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">inputString</span><span class="params">(<span class="built_in">string</span>&amp; buffer)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; buffer;</span><br><span class="line">        <span class="keyword">if</span> (buffer.size() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;您还未输入！&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (buffer.size() &gt; <span class="number">17</span>) &#123;</span><br><span class="line">            MessageBox(nullptr, TEXT(<span class="string">&quot;您输入字符串字数超过上限，请重新输入。。。&quot;</span>), TEXT(<span class="string">&quot;overbuffer!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> <span class="title function_">enterspring</span><span class="params">(<span class="type">int</span> c)</span><span class="comment">//c是一则视为账号输入，二视为密码输入，输出用*</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> buf;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ch = _getch(), ch != <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &gt; <span class="number">17</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;您输入字符串字数已达上限，无法继续输入。。。&quot;</span>), TEXT(<span class="string">&quot;overbuffer!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;\b&#x27;</span> &amp;&amp; k &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                k--;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\b \b&quot;</span>;</span><br><span class="line">                buf.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                buf += ch;</span><br><span class="line">                k++;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">putchar</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;您输入的字符有误，请重新输入&quot;</span>), TEXT(<span class="string">&quot;输入错误&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">1</span> &amp;&amp; k == <span class="number">0</span>) MessageBox(nullptr, TEXT(<span class="string">&quot;您还未输入...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span> &amp;&amp; k &lt; <span class="number">6</span>) MessageBox(nullptr, TEXT(<span class="string">&quot;您的密码太短了...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-main-cpp"><a href="#11-main-cpp" class="headerlink" title="11.main.cpp"></a>11.main.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> flag;<span class="comment">//用于系统二的多重表重复性与存在性验证,0代表正确的操作，1代表错误的操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量，用以记录用户存放数据的文件名</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">string</span> filebuffer1=<span class="string">&quot;&quot;</span>, filebuffer2=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*用于退出程序或者退出登陆的接口函数*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Exit</span><span class="params">( Users* h,  menu1* h1,  menu2* h2,  menu2* h3,  menu2* h4,  menu2* h5)</span></span><br><span class="line">&#123;</span><br><span class="line">    h1-&gt;Store1();</span><br><span class="line">    h2-&gt;Store2();</span><br><span class="line">    h-&gt;StoreUser(h);</span><br><span class="line"></span><br><span class="line">    h1-&gt;FreeAll_1();</span><br><span class="line">    h2-&gt;FreeAll_2();</span><br><span class="line">    h3-&gt;FreeAll_2();</span><br><span class="line">    h4-&gt;FreeAll_2();</span><br><span class="line">    h5-&gt;FreeAll_2();</span><br><span class="line">    filebuffer1=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    filebuffer2=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SetConsoleTitle(<span class="string">&quot;学生管理系统&quot;</span>);</span><br><span class="line"></span><br><span class="line">    heart();</span><br><span class="line">    <span class="comment">/*需要用到的定义*/</span></span><br><span class="line">     menu1* head = nullptr; <span class="comment">//这个是系统1的，只有一个头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*下面是系统二的,headx[0]是平均成绩,headx[1]是高数头，headx[2]英语,headx[3]C++ */</span></span><br><span class="line">     menu2* headx[<span class="number">4</span>] = &#123; nullptr,nullptr,nullptr,nullptr &#125;;<span class="comment">//分别为平均成绩主头指针和各科头指针</span></span><br><span class="line"></span><br><span class="line">     Users* user = nullptr;<span class="comment">//用户信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1，2表示系统1、2需要用到的变量，命名可以看看头文件中的类 */</span></span><br><span class="line">    <span class="built_in">string</span> Sn2, Name2, temp, name1, sn1, chat1, dor1;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> Grade[<span class="number">4</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//系统二的成绩变量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> c, ch;<span class="comment">//临时需要用的</span></span><br><span class="line"></span><br><span class="line">Menu0:<span class="comment">//登录注册菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//首先读取用户账号密码</span></span><br><span class="line">        user-&gt;Readuser(user);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowMap0();</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (user-&gt;Enter(user)) <span class="comment">//如果登入成功则读取信息</span></span><br><span class="line">                &#123;</span><br><span class="line">                    head = head-&gt;Read1(head);</span><br><span class="line">                    fstream file2;</span><br><span class="line">                    file2.open(filebuffer2, ios::in|ios::out|ios::binary);</span><br><span class="line">                    <span class="keyword">if</span> (!file2)      </span><br><span class="line">                        <span class="keyword">goto</span> Menu1;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (!file2.eof())</span><br><span class="line">                    &#123;</span><br><span class="line">                        file2&gt;&gt; Sn2&gt;&gt; Name2&gt;&gt; Grade[<span class="number">1</span>]&gt;&gt; Grade[<span class="number">2</span>]&gt;&gt; Grade[<span class="number">3</span>];</span><br><span class="line">                        <span class="keyword">if</span> (file2.fail())</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                            headx[i]-&gt;Record_2(headx[i], Sn2, Name2, Grade, i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    file2.close();</span><br><span class="line">                    <span class="keyword">goto</span> Menu1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                user = user-&gt;Register(user);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t\t\tBye!期待您的下次使用\n\n\n&quot;</span>;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;感谢您使用本程序&quot;</span>), TEXT(<span class="string">&quot;Bye!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                Exit(user, head, headx[<span class="number">0</span>], headx[<span class="number">1</span>], headx[<span class="number">2</span>], headx[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;输入有误，请重新输入...&quot;</span>), TEXT(<span class="string">&quot;!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Menu1:<span class="comment">//主页面菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            ShowMap1();</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">goto</span> Menu2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">goto</span> Menu3;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                user-&gt;ChangePass(user);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                Exit(user, head, headx[<span class="number">0</span>], headx[<span class="number">1</span>], headx[<span class="number">2</span>], headx[<span class="number">3</span>]);</span><br><span class="line">                user = nullptr;</span><br><span class="line">                head = nullptr;</span><br><span class="line">                headx[<span class="number">0</span>] = headx[<span class="number">1</span>] = headx[<span class="number">2</span>] = headx[<span class="number">3</span>] = nullptr;</span><br><span class="line">                <span class="keyword">goto</span> Menu0;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t\t\tBye!期待您的下次使用\n\n\n&quot;</span>;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;感谢您使用本程序&quot;</span>), TEXT(<span class="string">&quot;Bye!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                Exit(user, head, headx[<span class="number">0</span>], headx[<span class="number">1</span>], headx[<span class="number">2</span>], headx[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入有误，请重新输入\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Menu2:<span class="comment">//子系统1的菜单</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            ShowMap2();</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">                sn1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                name1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                chat1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                dor1=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入学生的学号      &quot;</span>;</span><br><span class="line">                inputString(sn1);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入学生的姓名      &quot;</span>;</span><br><span class="line">                inputString(name1);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入学生的联系电话  &quot;</span>;</span><br><span class="line">                inputString(chat1);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入学生的宿舍号    &quot;</span>;</span><br><span class="line">                inputString(dor1);</span><br><span class="line">                head-&gt;Record_1(head, sn1, name1, chat1, dor1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                head-&gt;EnterDelete_1(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                ShowSeeit_1();</span><br><span class="line">                head-&gt;Seeit_1(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                head-&gt;Find_1(head, ch);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                ShowSeeit_1();</span><br><span class="line">                head-&gt;Seeit_1(head);</span><br><span class="line">                head-&gt;Change_1(head);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                head-&gt;Find_1(head, ch);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">goto</span> Menu1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t\tBye!期待您的下次使用\n\n\n&quot;</span>;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;感谢您使用本程序&quot;</span>), TEXT(<span class="string">&quot;Bye!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                Exit(user, head, headx[<span class="number">0</span>], headx[<span class="number">1</span>], headx[<span class="number">2</span>], headx[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入有误，请重新输入\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Menu3:<span class="comment">//子系统二菜单，对着程序显示的具体功能理解，有一些函数利用了接口的性质</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;   </span><br><span class="line">            ShowMap3();</span><br><span class="line">            Sn2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Name2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            fflush(<span class="built_in">stdin</span>);</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">            <span class="keyword">switch</span> (ch)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入待录入学生的学号 &quot;</span>;</span><br><span class="line">                inputString(Sn2);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入该生的姓名  &quot;</span>;</span><br><span class="line">                inputString(Name2);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请录入该生的高等数学成绩  &quot;</span>;</span><br><span class="line">                Grade[<span class="number">1</span>] = inputlnt();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请录入该生的大学英语成绩  &quot;</span>;</span><br><span class="line">                Grade[<span class="number">2</span>] = inputlnt();</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请录入该生的C++程序设计成绩(将为您自动计算三科平均成绩)  &quot;</span>;</span><br><span class="line">                Grade[<span class="number">3</span>] = inputlnt();</span><br><span class="line">                flag = <span class="number">0</span>; <span class="comment">//这里0代表没有学号重复，是正确的操作</span></span><br><span class="line">                headx[<span class="number">0</span>]-&gt;Record_2(headx[<span class="number">0</span>], Sn2, Name2, Grade, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (!flag)<span class="comment">//如果记录中没有检测到学生重复的话，就记录这个学生</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*参数0\1\2\3是具体的功能，记录不同的成绩*/</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                        headx[i]-&gt;Record_2(headx[i], Sn2, Name2, Grade, i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    headx[<span class="number">0</span>]-&gt;Seeit_2(headx[<span class="number">0</span>]);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;您可以输入 1 以进行删除，2 以全部删除，0 以返回菜单\n&quot;</span>;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您想要删除学生数据的学生学号  &quot;</span>;</span><br><span class="line">                        inputString(Sn2);</span><br><span class="line">                        flag = <span class="number">0</span>;<span class="comment">//这里0代表学生存在，1代表学生不存在</span></span><br><span class="line">                        headx[<span class="number">0</span>]-&gt;Delete_2(headx[<span class="number">0</span>], Sn2);</span><br><span class="line">                        <span class="keyword">if</span> (!flag)<span class="comment">//如果存在就删除</span></span><br><span class="line">                        &#123;   </span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                                headx[i]-&gt;Delete_2(headx[i], Sn2);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;操作成功！ &quot;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                            headx[i]-&gt;FreeAll_2();</span><br><span class="line">                            headx[i] = nullptr;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;Seeit_2(headx[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您要查看学生的学号 &quot;</span>;</span><br><span class="line">                inputString(Sn2);</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;Find_2(headx[<span class="number">0</span>], <span class="number">4</span>, Sn2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;Seeit_2(headx[<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n请输入您要修改学生的学号 &quot;</span>;</span><br><span class="line">                inputString(Sn2);</span><br><span class="line">                <span class="keyword">while</span> (headx[<span class="number">0</span>]-&gt;Find_2(headx[<span class="number">0</span>], <span class="number">4</span>, Sn2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n您可以输入 1 以更改学号，2 以更改姓名，3 以更改高数成绩，4 以更改英语成绩，5 以更改C++成绩，0 以结束操作 \n&quot;</span>;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">                    <span class="keyword">if</span> (!c) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新学号/姓名！&quot;</span>;</span><br><span class="line">                        inputString(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入新成绩！&quot;</span>;</span><br><span class="line">                        Grade[<span class="number">0</span>] = inputlnt();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                        headx[i]-&gt;Change_2(headx[i], c, Sn2, temp, Grade[<span class="number">0</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (c == <span class="number">1</span>)Sn2 = temp;</span><br><span class="line">                &#125;</span><br><span class="line">                fflush(<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入您要查看学生的姓名 &quot;</span>;</span><br><span class="line">                inputString(Name2);</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;Find_2(headx[<span class="number">0</span>], <span class="number">6</span>, Name2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;EnterSee2(headx);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                headx[<span class="number">0</span>]-&gt;CordReport_2(headx);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">goto</span> Menu1;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t\t\t\t\tBye!期待您的下次使用\n\n\n&quot;</span>;</span><br><span class="line">                MessageBox(nullptr, TEXT(<span class="string">&quot;感谢您使用本程序&quot;</span>), TEXT(<span class="string">&quot;Bye!&quot;</span>), <span class="number">0</span>);</span><br><span class="line">                Exit(user, head, headx[<span class="number">0</span>], headx[<span class="number">1</span>], headx[<span class="number">2</span>], headx[<span class="number">3</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;输入有误，请重新输入\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-ShowMap-cpp"><a href="#12-ShowMap-cpp" class="headerlink" title="12.ShowMap.cpp"></a>12.ShowMap.cpp</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Everything.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap0</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color 74&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t     -------------------******************学生管理系统******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; --------------------******************账号只允许由1-18位英文与数字组成******************* **------------------------\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n --------------------******************密码只允许由6-18位英文与数字组成******************** *------------------------\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t                   (@^o^@) 欢迎使用学生信息管理系统   (⌒:⌒)\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t                   (~):(~)                            (~)v(~) \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t*****************************************                   \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t******                                                                         \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t**********                                                                     \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t*****                               菜   单*****                               \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t********                                                                       \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t****                                1：登录****                                \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t********                                                                       \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t****                                2：注册****                                \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t********                                                                     \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t****                                0：退出****                                \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t********                                                                       \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t***********************************************                                \n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t                                请输入您的操作--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap1</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color 06&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------******************学生管理系统*********************--------------------\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t\t\t\t    * [1] 学生信息管理\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t\t\t\t*     [2] 学生成绩管理\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t\t\t\t*     [3] 修改密码\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t\t\t\t*     [4] 退出登陆\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\t\t\t\t\t*     [5] 退出程序\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------*******************欢迎使用********************** **--------------------\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请您输入菜单上的按键--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap2</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color 0E&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------******************学生信息管理******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [1] 添加学生信息*              [2] 删除学生信息\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [3] 查看学生信息*              [4] 以学号查询学生信息\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [5] 修改学生信息*              [6] 以姓名查询学生信息\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [7] 回到上一级*                [0] 退出程序\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------*******************欢迎使用********************** **--------------------\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请您输入菜单上的按键--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMap3</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;color 0E&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------******************学生成绩管理******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [1]  录入学生成绩*              [2] 删除学生成绩\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [3]  查看学生成绩*              [4] 以学号查询学生成绩\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [5]  修改学生成绩*              [6] 以姓名查询学生成绩\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [7]  单科成绩排名*              [8] 学生成绩报告\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t*      [9]  返回上一级*                [0] 退出程序\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t  -------------------*******************欢迎使用********************** **--------------------\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请您输入菜单上的按键--&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowSeeit_1</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\n\n\n\n\t----------------------******************学生信息查看******************** *--------------------\n\n\n&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t-------------学号---------------姓名------------------联系方式-------------------宿舍号-----\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">heart</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;color 74&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">float</span> y = <span class="number">1.5f</span>; y &gt; <span class="number">-1.5f</span>; y -= <span class="number">0.1f</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">float</span> x = <span class="number">-1.5f</span>; x &lt; <span class="number">1.5f</span>; x += <span class="number">0.05f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> a = x*  x + y*  y - <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">putchar</span>(a*  a*  a - x*  x*  y*  y*  y &lt;= <span class="number">0.0f</span> ? <span class="string">&#x27;*&#x27;</span> : <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t\t\t       &quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;欢&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 迎&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 使&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 用&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 学&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 生&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 管&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 理&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 系&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; 统！&quot;</span>;</span><br><span class="line">    Sleep(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; (请按任意键进入...)&quot;</span>;</span><br><span class="line">    <span class="built_in">cin</span>.ignore();</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>职业生涯规划书</title>
      <link href="/posts/%E8%AF%BE%E7%A8%8B/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E4%B9%A6.html"/>
      <url>/posts/%E8%AF%BE%E7%A8%8B/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E8%A7%84%E5%88%92%E4%B9%A6.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、自我分析"><a href="#一、自我分析" class="headerlink" title="一、自我分析"></a>一、自我分析</h1><h2 id="（一）职业兴趣—喜欢干什么"><a href="#（一）职业兴趣—喜欢干什么" class="headerlink" title="（一）职业兴趣—喜欢干什么"></a>（一）职业兴趣—喜欢干什么</h2><p>喜欢处理数据，文字等，喜欢软件的设计，编码，调试，测试等工作。</p><h2 id="（二）职业价值观—最看重什么"><a href="#（二）职业价值观—最看重什么" class="headerlink" title="（二）职业价值观—最看重什么"></a>（二）职业价值观—最看重什么</h2><ol><li>独立思考，了解事物怎样运行和作用</li><li>以自己的方式做事，或快或慢随自己所愿</li><li>报酬高，能拥有自己想要的事物</li><li>在怡人的环境里工作</li><li>在一个公平并能与之融洽相处的管理者手下工作</li></ol><h2 id="（三）职业能力—能够干什么"><a href="#（三）职业能力—能够干什么" class="headerlink" title="（三）职业能力—能够干什么"></a>（三）职业能力—能够干什么</h2><p>做事认真，踏实，学习能力强，具有一定的创造力和承压能力，专业基础扎实。</p><h2 id="（四）性格特征—适合干什么"><a href="#（四）性格特征—适合干什么" class="headerlink" title="（四）性格特征—适合干什么"></a>（四）性格特征—适合干什么</h2><p>做事深思熟虑，沉着冷静，善于自控，不善交际。</p><h2 id="（五）自我分析小结"><a href="#（五）自我分析小结" class="headerlink" title="（五）自我分析小结"></a>（五）自我分析小结</h2><p>我是一个内倾的人，喜欢软件方面的工作。对于自己发展方向,最大的希望就是成为有用之才,实现自己的人生价值和自己的梦想,同时喜欢创新,做事认真、投入,有很大的责任心。通过上面的分析,我对自己有了深刻的认识,在看到自己优点的同时还发现自己有许多的不足之处,我会取别人之长来弥补自己的不足之处。</p><h1 id="二、职业分析"><a href="#二、职业分析" class="headerlink" title="二、职业分析"></a>二、职业分析</h1><h2 id="家庭环境分析"><a href="#家庭环境分析" class="headerlink" title="家庭环境分析"></a>家庭环境分析</h2><p>父母对我的期望也是比较高的，父亲学历中学，他认为知识对于我将来的发展起到很大的作用，希望我能一直学习下去。家里条件一般，致使我从小养成了独立的习惯。</p><h2 id="学校环境分析"><a href="#学校环境分析" class="headerlink" title="学校环境分析"></a>学校环境分析</h2><p>软件工程我感觉学院的师资都还可以，老师都挺尽心尽责，学生大部分都挺好学的。课程量也不少，要求比较严格，考试周压力也挺大。该学的课程基本都安排了，只是自己还记不记得的问题。</p><h2 id="社会环境分析"><a href="#社会环境分析" class="headerlink" title="社会环境分析"></a>社会环境分析</h2><p>近几年国内就业的压力逐步加重，可能是历史上最巨大的。就业竞争激烈，我们应该有危机意识，认真学习理论知识，提高业务技能，为以后的工作发展打好坚实的基础。</p><h2 id="职业环境分析"><a href="#职业环境分析" class="headerlink" title="职业环境分析"></a>职业环境分析</h2><h3 id="行业分析"><a href="#行业分析" class="headerlink" title="行业分析"></a>行业分析</h3><p>伴随着互联网的发展，IT人才的短缺现象将会越来越严重。在我国，IC人才、网络存储人才、电子商务人才、信息安全人才、游戏技术人才严重短缺；在软件人才层次结构上，水平高的系统分析员和有行业背景的项目策划人员偏少，同时软件蓝领也比较缺乏。随着IT业越来越火，各大高校计算机专业报名的人数也越来越多。而近年来，随着毕业生人数激增，就业率与供求比例明显走低。</p><h3 id="职业分析"><a href="#职业分析" class="headerlink" title="职业分析"></a>职业分析</h3><p>软件工程师，目前有如下特点：<br>1.工作起点高，发展空间大。<br>2.企业缺口大，工作待遇高，环境好。<br>3.工作稳定，不用频繁跳槽。<br>4.复合型人才，工程师们需要掌握更多的编程语言。</p><h3 id="企业分析"><a href="#企业分析" class="headerlink" title="企业分析"></a>企业分析</h3><p>互联网企业，从事国内互联网公司开发岗位工作的同学收入相对其他行业和专业要高出很多的，当然国内互联网大厂的工作压力还是非常大的，入职之后在不加班的情况下也要工作到晚上八九点。<br>各大外企，对于实力较强的同学也可以考虑Google，Microsoft等外企的IT岗位，相比于国内的血汗厂，外企在国内996的情况要相对少很多，虽然工资相比于国内互联网公司要低一些，但是性价比较高。想进入955的外企，不仅要专业技术水平高，英语也要好。<br>各大国企、银行、公务员、事业单位计算机相关岗位，从事体制内的工作，虽然挣得少，但是生活质量是相对较高的。</p><h3 id="地域分析"><a href="#地域分析" class="headerlink" title="地域分析"></a>地域分析</h3><p>从就业区域的情况来看，不出意外，排名前四名分别为北、深、上、广四大一线城市，而省会城市杭州、成都、南京、武汉、西安也在前十排名中，而前十名的榜单中只有苏州为非省会城市。</p><h2 id="职业分析小结"><a href="#职业分析小结" class="headerlink" title="职业分析小结"></a>职业分析小结</h2><p>就业率发展平稳，但薪酬水平有所下降。随着高校研究生和本科学生的扩招，特别是计算机专业毕业人数的急剧增加，以及受到经济因素的影响，计算机专业毕业生的就业不如从前那样火爆，就业的整体质量存在明显下降。平均起步收入较高。同其他专业相比，计算机专业在就业刚开始的时候的收入算高的。就业面广，计算机领域涉及到东西很多，各行各业都会涉及到计算机专业的就业岗位，可以结合自己的兴趣和实际情况，来选择合适自己的职位。</p><h1 id="三、职业定位"><a href="#三、职业定位" class="headerlink" title="三、职业定位"></a>三、职业定位</h1><table><thead><tr><th>内部环境因素</th><th></th><th>优势因素(S)</th><th>弱势因素(W)</th><th></th></tr></thead><tbody><tr><td></td><td>做事比较认真、踏实，有浓厚的学习兴趣和必须的实力，尤其在计算机方面有着浓厚的兴趣。</td><td>性格较内向，并不善于与人交往和沟通。工作、学习有些保守，冒险精神不够，没有结合长远目标，并且创新本事有待提高。</td><td></td><td></td></tr><tr><td>外部环境因素</td><td></td><td>机会因素(O)</td><td>威胁因素(T)</td><td></td></tr><tr><td></td><td>IT行业迅猛发展，就业工作岗位也比比皆是。在最近几年内IT在职场排行榜中仍旧处于所有行业中的“老大”。</td><td>当今比我优秀的人才很多，而机会不必须是均等的，这时就不单单是知识的比拼，更是对个人发现机会、展示自我并把握机会本事的考验。</td><td></td><td></td></tr><tr><td>职业目标</td><td>软件开发工程师</td><td></td><td></td><td></td></tr><tr><td>职业发展策略</td><td>希望进入长三角地区、最好是外企类型的组织</td><td></td><td></td><td></td></tr><tr><td>职业发展路径</td><td>走专家路线</td><td></td><td></td><td></td></tr><tr><td>具体路径</td><td>软件工程师——高级软件工程师——架构师</td><td></td><td></td><td></td></tr></tbody></table><h2 id="计划实施"><a href="#计划实施" class="headerlink" title="计划实施"></a>计划实施</h2><table><thead><tr><th>名称</th><th>短期计划</th></tr></thead><tbody><tr><td>时间跨度</td><td>2022&#x2F;7——2023&#x2F;7</td></tr><tr><td>总目标</td><td>找到暑期实习</td></tr><tr><td>分目标</td><td>学习Java,计算机基础，掌握基本算法和数据结构</td></tr><tr><td>计划内容</td><td>上课认真听讲，课余学习其他内容，刷题</td></tr></tbody></table><table><thead><tr><th>名称</th><th>中期计划</th></tr></thead><tbody><tr><td>时间跨度</td><td>2023&#x2F;7——2025&#x2F;7</td></tr><tr><td>总目标</td><td>找到理想的工作</td></tr><tr><td>分目标</td><td>准备好面试所需的经历，经验，技能</td></tr><tr><td>计划内容</td><td>做项目，找实习，学专业知识，刷面试题</td></tr></tbody></table><table><thead><tr><th>名称</th><th>长期计划</th></tr></thead><tbody><tr><td>时间跨度</td><td>2025——2030</td></tr><tr><td>总目标</td><td>成为架构师</td></tr><tr><td>分目标</td><td>提高自己的能力</td></tr><tr><td>计划内容</td><td>不断开阔自己眼界，提高自己的管理，沟通能力</td></tr></tbody></table><h1 id="评估调整"><a href="#评估调整" class="headerlink" title="评估调整"></a>评估调整</h1><h2 id="1、评估的内容"><a href="#1、评估的内容" class="headerlink" title="1、评估的内容"></a>1、评估的内容</h2><h3 id="职业目标评估"><a href="#职业目标评估" class="headerlink" title="职业目标评估"></a>职业目标评估</h3><p>对于自己制定的目标规划,可能会是一个失败的计划,但是只要去努力,无论失败还是成功,都将是一次巨大的收获,在今后的工作中,会不断完整自己的规划,将规划完善到最佳,将工作做到最佳,将人生规划到最佳。</p><h3 id="职业路径评估"><a href="#职业路径评估" class="headerlink" title="职业路径评估"></a>职业路径评估</h3><p>坚持自己的整体职业规划路径,中途中的一些小毛病可以适当的调整。如果规划发展方向有问题,可以选择更好的规划方向,但是规划中整体大局不变。</p><h3 id="实施策略评估"><a href="#实施策略评估" class="headerlink" title="实施策略评估"></a>实施策略评估</h3><p>如果出现一些变故,或者家庭需要,会去考虑改变行的策略,会在生活和工作中寻找一个平衡点。</p><h3 id="其它因素评估"><a href="#其它因素评估" class="headerlink" title="其它因素评估"></a>其它因素评估</h3><p>假如遇到什么事,我会根据实际情况去及时的调整及评估。</p><h2 id="2、评估的时间"><a href="#2、评估的时间" class="headerlink" title="2、评估的时间"></a>2、评估的时间</h2><p>一般情况下，我定期去评估和规划，当出现特殊情况时，我会随时评估并进行相应的调整。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件开发方法</title>
      <link href="/posts/%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95.html"/>
      <url>/posts/%E8%AF%BE%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、选题内容"><a href="#一、选题内容" class="headerlink" title="一、选题内容"></a>一、选题内容</h1><p>在线购物系统</p><h1 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h1><p>在线购物系统所包含的基本功能为：<br>商家注册登录后可将新上架的商品信息通过系统发布到网上或对已有商品进行管理。<br>用户通过系统浏览商品，查看商品详细信息，或者直接搜索对应商品，还可对所属订单进行管理。<br>顾客注册登录之后，选择商品可加入购物车或下单购买，通过第三方支付平台支付，发货过程还需经过物流，还可进行售后服务。</p><h1 id="三、系统设计"><a href="#三、系统设计" class="headerlink" title="三、系统设计"></a>三、系统设计</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22784909/1672397141768-b0dbd79f-f751-41c7-a57a-37676eb01117.jpeg"></p><h1 id="四、-实验内容整合"><a href="#四、-实验内容整合" class="headerlink" title="四、 实验内容整合"></a>四、 实验内容整合</h1><h2 id="用况图"><a href="#用况图" class="headerlink" title="用况图"></a>用况图</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>1、确定系统边界<br>首先，在线购物系统的外部活动者有用户，商家和顾客，这些都不属于系统本身，是系统的外部环境。<br>其次，在线购物系统需要涉及到第三方支付平台与物流运输，他们也是系统的外部环境。<br>第三，在线购物系统需要运行在操作系统上，运行过程中可能要进行生成文件,获取时间等操作，这涉及到操作系统的API，所以操作系统对于在线购物系统来说也是外部环境。<br>第四，在线购物系统的使用需要涉及到手机或者电脑等设备，这些设备对于系统来说也是外部环境。<br>2、识别参与者<br>在线购物系统需要用户，顾客和商家的直接使用，所以他们是参与者。<br>在线购物系统的使用过程中会涉及第三方支付平台与物流运输，所以他们也是参与者。<br>外部系统方面有操作系统，而设备方面则需要考虑电脑、手机等智能设备。<br>3、捕获用况<br>从用户方面考虑，用户需要通过登陆注册的操作成为商家或者是顾客。通过修改信息，订单管理，订单查阅，修改订单来向系统读写信息。而顾客需要在此系统的主要任务是购物，他需要搜索浏览商品，管理购物车，以及购买商品，支付等操作。商家的主要任务则是管理自己商店的商品，将商品打包派送，修改货架信息。<br>从系统功能的角度看，在线购物系统需完成顾客购买商品，商家对于顾客的售后服务，如咨询与退换货<br>从场景的角度来看，在线购物系统需要涉及到物流来对商品进行派送运输，需要第三方支付平台来令用户完成支付，同时根据场景模拟，支付还可分为立即支付与货到付款等方式。<br>4、建立用况图<br>根据上述涉及到的参与者和捕获的用况来建立用况图，分析参与者与参与者，参与者与用况，用况与用况之间的关系。例如用户是顾客与商家的泛化，而用户与登陆注册，修改信息等用况是关联关系。订单管理与订单查询是包含关系，立即支付、货到付款与支付是继承关系，购买商品与购物车管理是扩展关系。<br>5、检查与调整<br>检查每个参与者是否都至少有一个用况关联，考虑了参与者与参与者是否有继承，考虑了用况的细化分解与用况之间关系的确立。</p><h3 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22784909/1670492888130-c3b7b6cf-143e-47d0-a47c-ecc88e4706f7.jpeg#averageHue=%23f7f7f7&from=url&id=PpUcW&originHeight=791&originWidth=761&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="用况描述"><a href="#用况描述" class="headerlink" title="用况描述"></a>用况描述</h3><h4 id="用况一"><a href="#用况一" class="headerlink" title="用况一"></a>用况一</h4><p>用况名：订单管理<br>简述：“订单管理”主要为用户，即顾客或商家提供订单的查询和更改<br>参与者：用户，顾客，商家<br>包含：包含订单查询和修改订单两个用况<br>扩展：无<br>继承：无<br>前置条件：用户登录成功<br>细节：</p><ol><li>在主界面，用户选择订单管理，进入界面</li><li>在订单管理界面，用户进行查询订单或直接选择订单</li><li>对于选中订单，用户可以进行修改或删除</li><li>修改完成后点击确认后结束</li></ol><p>后置条件：对于要修改的订单，修改信息必须填写完整<br>例外：</p><ul><li>用户点击确认时修改信息不完全</li></ul><p>（1）系统提示信息：修改信息未填写完全<br>（2）用户确认信息<br>（3）返回细节第3步<br>限制：对于顾客而言，可修改或删除的订单应是待付款订单<br>注释：无</p><h4 id="用况二"><a href="#用况二" class="headerlink" title="用况二"></a>用况二</h4><p>用况名：购买商品<br>简述：“购买商品”为商家顾客提供购买所需商品的提交订单和支付功能<br>参与者：顾客<br>包含：包含提交订单和支付两个用况<br>扩展：扩展它的用况有购物车管理<br>继承：无<br>前置条件：顾客登录成功<br>细节：<br>①基本流程</p><ol><li>客户在购物车或商品界面选择要确定购买的商品以及数量，点击提交订单</li><li>客户在订单页面填写收货地址等信息</li><li>选择支付方式，完成支付</li><li>系统提示交易成功</li></ol><p>②可选流程</p><ol><li>选择优惠方式（红包&#x2F;积分）</li><li>购买运费险</li></ol><p>后置条件：生成订单并变为待发货状态<br>例外：</p><ul><li>某商品数量不足或有购买数量限制<br>（1）系统提示信息：该商品剩余数量&#x2F;该商品限购数量<br>（2）顾客确认消息<br>（3）返回基本流程第1步 </li><li>所选择的的第三方支付系统资金不足<br>（1）系统提示信息：账户资金不足，请重新选择支付方式<br>（2）顾客确认信息<br>（3）返回基本流程第3步</li></ul><p>限制：下单数量不得超过上限<br>注释：无</p><h4 id="用况三"><a href="#用况三" class="headerlink" title="用况三"></a>用况三</h4><p>用况名：商品派送<br>简述：商家通过商品派送将顾客所购买的商品打包出货<br>参与者：商家，物流<br>包含：被商品管理所包含<br>扩展：无<br>继承：无<br>前置条件：商家登录成功<br>细节：</p><ol><li>待顾客下单后，发货状态会改为待发货，商家会确认顾客的订单信息，如顾客的收货地址与联系方式是否正确，顾客是否有备注要求，收款是否到达后台账户。</li><li>如订单有误，商家可以修改或取消订单，如无误，商家则分配订单到物流配送部门进行备货，出货的处理。</li><li>同时，商家还会根据线下配送情况修改网上订单的配送状态进行标识，如待发货，待收货等。</li></ol><p>后置条件：发货成功<br>例外：</p><ul><li><p>某商品存在物流限制无法送达顾客收货地点时<br>（1）商家提示顾客物流受限无法送达<br>（2）顾客选择退货处理</p></li><li><p>顾客订单超过设定处理时间</p><pre><code>（1）系统提示信息：顾客订单超过预定处理时间（2）商家确认信息（3）商家处理订单</code></pre></li></ul><p>限制：用户订单信息必须真实有效<br>注释：无</p><h4 id="用况四"><a href="#用况四" class="headerlink" title="用况四"></a>用况四</h4><p>用况名：修改上架商品<br>简述：商家想调整销售策略时，可以使用修改上架商品操作<br>参与者：商家<br>包含：被商品管理所包含<br>扩展：无<br>继承：无<br>前置条件：商家登录成功<br>细节：</p><ol><li>商家进入商品管理界面</li><li>商家根据最近的销售情况结合外部环境及政策来对上架商品的价格进行调整，也可查看上架商品的库存量，对热销商品进行补货，对滞销商品进行降价或者活动促销等操作。</li><li>如若有新品，商家也可点击添加商品，填写完商品的信息，点击确定，即可上架商品。</li></ol><p>后置条件：上架商品种类或信息改变<br>例外：</p><ul><li>上架新品时商品信息填写不完整<br>（1）系统提示信息：商品信息未填写完整<br>（2）商家确认消息<br>（3）返回商品信息填写界面</li><li>修改后的商品信息存在违规内容<br>（1）系统提示信息：商品内容违规请整改<br>（2）商家确认信息<br>（3）商家重新更改商品信息</li></ul><p>限制：无<br>注释：无</p><h4 id="用况五"><a href="#用况五" class="headerlink" title="用况五"></a>用况五</h4><p>用况名：支付<br>简述：顾客使用第三方支付平台进行支付来购买商品<br>参与者：顾客，第三方支付平台<br>包含：被购买商品所包含<br>扩展：无<br>继承：一般用况为支付，特殊用况为立即支付和货到付款<br>前置条件：顾客登录成功<br>细节：</p><ol><li>顾客选择支付方式</li><li>选择立即支付，顾客输入支付所需的信息并支付</li><li>选择货到付款，顾客收到商品，检查确认后签收付款</li><li>系统提示支付成功</li></ol><p>后置条件：账户扣款成功<br>例外：</p><ul><li>所选择的的第三方支付系统资金不足<br>（1）系统提示信息：账户资金不足，请重新选择支付方式<br>（2）顾客确认信息<br>（3）顾客重新选择支付方式</li></ul><p>限制：需实名认证后才可支付<br>注释：无</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="1）识别对象与类"><a href="#1）识别对象与类" class="headerlink" title="1）识别对象与类"></a>1）识别对象与类</h4><p>从系统边界、问题域、系统责任、名词代词和名词短语等角度出发，可以识别出的对象有游客、注册用户、商家、店铺、物流、商品、操作系统、电脑、手机、客服、交易订单、支付手段、购物车、订阅商铺等多种对象。<br>通过审查与筛选，从舍去无用对象，精简对象以及推迟到OOD考虑的对象等角度出发，发现如操作系统、电脑、手机等对象可以舍去，而商家和店铺则能够进行合并。<br>抽象出类并进行调整，将对象依据属性和操作进行分类，并对分好的类进行调整，如商家和顾客虽拥有共同部分，如用户名、账号、密码等，但两类属性与操作并不相同，则考虑建立一个用户类形成继承关系。</p><h4 id="2）类的属性与操作"><a href="#2）类的属性与操作" class="headerlink" title="2）类的属性与操作"></a>2）类的属性与操作</h4><p>识别出类的属性与操作、并对其进行审查与调整，如明确该属性或操作是否是否提供真正对系统有用信息、该属性是否描述的是这个类的特征，一个操作是否只完成一项明确定义的、相对完整而单一的功能。</p><h4 id="3）确定类之间的关系"><a href="#3）确定类之间的关系" class="headerlink" title="3）确定类之间的关系"></a>3）确定类之间的关系</h4><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>审查类的属性与操作不难发现用户类中如存在支付，管理商品等操作并不适合用户类的全部对象，管理商品应属于商家，而支付则属于顾客。因此因在用户类下建立两个特殊类：商家与顾客，来形成继承</p><h5 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h5><p>通过类的静态联系可以看出，如用户与商品，商家与客服售后，顾客与订单等类中都存在关联关系</p><h5 id="聚合与组合"><a href="#聚合与组合" class="headerlink" title="聚合与组合"></a>聚合与组合</h5><p>顾客与订阅店铺、购物车构成一个整体，且订阅店铺、购物车不能独立于顾客存在，因此为组合关系</p><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>商家对商品进行更新的同时，如果顾客订阅该店铺，顾客订阅店铺中的内容也会发生变化，因此两者存在依赖关系</p><h3 id="模型图-1"><a href="#模型图-1" class="headerlink" title="模型图"></a>模型图</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/22784909/1671176904859-a079d106-020b-45ff-96f7-fe9cbc791cca.jpeg"></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>软件开发方法这门课使我初步了解了面向对象的概念和它的基本思想，基本原则，并且基本掌握了UML语言的用法。通过实验，我对于如何建立需求模型——用况图，如何建立基本模型——类图有了更多的理解。<br>在建立需求模型中，我通过确定系统边界，通过交互识别参与者，捕获用况等方法建模得到了在线购物系统的用况图，并以此加深了对系统功能相互关系的理解，明白了外部事物如何使用系统以及系统所提供的功能，从而能更好地设计系统功能，使系统责任更加全面具体。<br>在建立基本模型中，我明白了对象和类与参与者的不同，并通过识别系统中的对象与类，确定了类的属性和操作以及类之间的关系后构建起在线购物系统的类图，在此过程中对于类的抽象和他们之间的各种关系有了更加深刻的理解，能够在实际问题中更好地通过编程构建类。<br>虽然最后因为种种原因这门课的内容并没有上完全，但它面向对象分析的思想和方法都对我有了一定的帮助，让我能够快速地分析出系统的功能以及结构，从而让编程变得更加轻松。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vmware虚拟机网卡不启动时的service NetworkManager修复</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E4%B8%8D%E5%90%AF%E5%8A%A8%E6%97%B6%E7%9A%84service%20NetworkManager%E4%BF%AE%E5%A4%8D.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/WSL%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA/Vmware/vmware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E5%8D%A1%E4%B8%8D%E5%90%AF%E5%8A%A8%E6%97%B6%E7%9A%84service%20NetworkManager%E4%BF%AE%E5%A4%8D.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-检查windows下的vmware虚拟机网络相关服务是否开启"><a href="#1-检查windows下的vmware虚拟机网络相关服务是否开启" class="headerlink" title="1.检查windows下的vmware虚拟机网络相关服务是否开启"></a>1.检查windows下的vmware虚拟机网络相关服务是否开启</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664006674805-ed9dc148-9ba3-476f-8b30-24f6c0d834fd.png#clientId=ufbcf30d8-aba0-4&from=paste&id=ub5b36fe7&name=image.png&originHeight=645&originWidth=1243&originalType=url&ratio=1&rotation=0&showTitle=false&size=386008&status=done&style=none&taskId=ucfcad8b1-69ba-4866-9c2b-c3b867621f4&title=" alt="image.png"></p><h1 id="2-检查虚拟接网络配置设置是否正确"><a href="#2-检查虚拟接网络配置设置是否正确" class="headerlink" title="2. 检查虚拟接网络配置设置是否正确"></a>2. 检查虚拟接网络配置设置是否正确</h1><p>检查vmware workstation的网络配置是否符合主机的虚拟网卡配置，若不确定就点击还原默认设置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664006758874-f3075bbe-e52a-484f-9bcd-8151979136f3.png#clientId=ufbcf30d8-aba0-4&from=paste&id=ue5ed1a88&name=image.png&originHeight=201&originWidth=296&originalType=url&ratio=1&rotation=0&showTitle=false&size=17849&status=done&style=none&taskId=ue1cdcddb-a846-4f33-a3e6-ce83c1fb467&title=" alt="image.png"></p><h1 id="3-检查虚拟机Ubuntu系统右上角的网络连接是否存在"><a href="#3-检查虚拟机Ubuntu系统右上角的网络连接是否存在" class="headerlink" title="3. 检查虚拟机Ubuntu系统右上角的网络连接是否存在"></a>3. 检查虚拟机Ubuntu系统右上角的网络连接是否存在</h1><p>若不存在，网络就可能连不上</p><h1 id="4-修复"><a href="#4-修复" class="headerlink" title="4. 修复"></a>4. 修复</h1><p>（1）删除NetworkManager缓存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure><p>（2）修改&#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/NetworkManager/NetworkManager.conf</span><br><span class="line"><span class="comment">#找到managed=false修改为：managed=true</span></span><br></pre></td></tr></table></figure><p>（3）重启NetworkManager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager restart</span><br></pre></td></tr></table></figure><p>就可以看到系统右上角出现了网络图标。</p><h1 id="5-重启虚拟机，搞定！"><a href="#5-重启虚拟机，搞定！" class="headerlink" title="5. 重启虚拟机，搞定！"></a>5. 重启虚拟机，搞定！</h1>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> WSL和虚拟机 </category>
          
          <category> Vmware </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL忘记密码的修改密码方法</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Mysql/MySQL%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%9A%84%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Mysql/MySQL%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%9A%84%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E6%96%B9%E6%B3%95.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：关闭Mysql服务"><a href="#第一步：关闭Mysql服务" class="headerlink" title="第一步：关闭Mysql服务"></a>第一步：关闭Mysql服务</h3><p>首先先停止mysql服务。可通过net stop mysql,以<strong>管理员权限</strong>操作<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005057837-4fed6c78-648f-4d7c-830c-50f54aa11848.png#averageHue=%2343413f&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=u9be83939&name=image.png&originHeight=183&originWidth=571&originalType=url&ratio=1&rotation=0&showTitle=false&size=19655&status=error&style=none&taskId=u2a74010e-57db-4a51-a81e-5e9f45def7c&title=" alt="image.png"></p><h3 id="第二步：跳过Mysql密码验证"><a href="#第二步：跳过Mysql密码验证" class="headerlink" title="第二步：跳过Mysql密码验证"></a>第二步：跳过Mysql密码验证</h3><p>进入命令提示符（管理员登陆）操作，进入mysql目录中bin文件夹下，使用mysqld -console –skip-grant-tables –shared-memory来跳过权限验证。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005082725-e63a9c51-ff24-489d-a576-87bbd6f405ac.png#averageHue=%23100f0e&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=u90e13dce&name=image.png&originHeight=204&originWidth=802&originalType=url&ratio=1&rotation=0&showTitle=false&size=20661&status=error&style=none&taskId=udc45f746-fb08-4f06-8f33-5e2cad91545&title=" alt="image.png"><br>输入执行后没有反馈，新开一个管理员窗口重新执行。（这是第二个窗口）<br>进入目录后，确保自己已经关闭了Mysql的服务：net stop mysql<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005035257-89b1f9a2-b9f4-4017-8e9b-aaf242ee4e93.png#averageHue=%2314110f&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=uc75291f0&name=image.png&originHeight=108&originWidth=456&originalType=url&ratio=1&rotation=0&showTitle=false&size=12012&status=error&style=none&taskId=uea61b3b6-5ff8-4b01-bde5-2b96ddc6a9e&title=" alt="image.png"><br>关闭Mysql服务之后，继续在D:\mysql-8.0.19-winx64\bin目录下进行操作：<br>输入mysqld -console –skip-grant-tables –shared-memory<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005104264-44f4f769-f36e-46f6-b1ff-c8b98b2c6281.png#averageHue=%23161411&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=u0ca4835a&name=image.png&originHeight=261&originWidth=1200&originalType=url&ratio=1&rotation=0&showTitle=false&size=61967&status=error&style=none&taskId=ub8ec94b7-32f5-4a9d-ad4e-67b734968c8&title=" alt="image.png"></p><h3 id="第三步：无密码方式进入Mysql"><a href="#第三步：无密码方式进入Mysql" class="headerlink" title="第三步：无密码方式进入Mysql"></a>第三步：无密码方式进入Mysql</h3><p>在上述步骤之后，再打开一个管理员模式运行的cmd.exe （这是第三个窗口）<br>进入mysql下的bin目录后，直接登录mysql<br>不需要通过net start mysql打开mysql服务<br>在命令行中输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\mysql-8.0.19-winx64\bin(此处输入自己电脑上的安装目录)</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>此时会显示让你输入密码，直接回车，就可以成功连接Mysql。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005190452-e9c4a92c-3b70-47ac-9225-6478e5216238.png#averageHue=%2321201f&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=ue941e532&name=image.png&originHeight=487&originWidth=832&originalType=url&ratio=1&rotation=0&showTitle=false&size=58449&status=error&style=none&taskId=u9cd356ad-4ad6-4f8a-bb87-2ac9bc2f150&title=" alt="image.png"></p><h3 id="第四步：将登陆密码设置为空"><a href="#第四步：将登陆密码设置为空" class="headerlink" title="第四步：将登陆密码设置为空"></a>第四步：将登陆密码设置为空</h3><p>输入代码，将密码设置为空（<strong>此时还不能直接修改密码，必须先设置为空，否则会报错</strong>）</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; (使用mysql数据表)</span><br><span class="line">update user set authentication_string=<span class="comment">&#x27;&#x27; where user=&#x27;root&#x27;;（将密码置为空）</span></span><br><span class="line">quit; (然后退出Mysql)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005237356-4e54f26e-41f4-4c2b-ade5-bd54bffa666b.png#averageHue=%23151413&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=uc645bcd4&name=image.png&originHeight=214&originWidth=690&originalType=url&ratio=1&rotation=0&showTitle=false&size=23949&status=error&style=none&taskId=ub4ae62bb-0f66-4cd7-b7d9-439c4eb4443&title=" alt="image.png"></p><h3 id="第五步：更改自己的登陆密码"><a href="#第五步：更改自己的登陆密码" class="headerlink" title="第五步：更改自己的登陆密码"></a>第五步：更改自己的登陆密码</h3><h4 id="1-关闭前两个cmd窗口-一定要关闭！-；"><a href="#1-关闭前两个cmd窗口-一定要关闭！-；" class="headerlink" title="1.关闭前两个cmd窗口(一定要关闭！)；"></a>1.关闭前两个cmd窗口(一定要关闭！)；</h4><h4 id="2-在第三个窗口中输入代码；"><a href="#2-在第三个窗口中输入代码；" class="headerlink" title="2.在第三个窗口中输入代码；"></a>2.在第三个窗口中输入代码；</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">stop</span> mysql(关闭mysql服务,虽然会显示没有开启服务，但是以防万一)</span><br><span class="line">net start mysql(再打开mysql服务)</span><br><span class="line">cd D:\mysql-<span class="number">8.0</span>.<span class="number">19</span>-winx64\bin  (此处输入自己电脑上的安装目录)</span><br><span class="line">mysql -u root -p</span><br><span class="line">(此处会显示输入密码，直接回车就好了，第四步我们已经将他置为空了)</span><br><span class="line">ALTER USER <span class="comment">&#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;（更改密码，此处密码已设置为root）</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664005359252-e86b4378-24de-4f43-b856-967237e360f0.png#averageHue=%23110f0e&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=u793ed696&name=image.png&originHeight=595&originWidth=845&originalType=url&ratio=1&rotation=0&showTitle=false&size=71797&status=error&style=none&taskId=u5bc0e8f9-8188-4062-8b2d-2a3bb6b3e68&title=" alt="image.png"></p><h4 id="3-验证密码是否修改成功"><a href="#3-验证密码是否修改成功" class="headerlink" title="3.验证密码是否修改成功"></a>3.验证密码是否修改成功</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit（退出mysql）</span><br><span class="line">mysql -u root -p </span><br><span class="line">(输入新密码，再次登录)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/22784909/1664006174639-faf4f971-d681-4b8c-97eb-fbd7684bd220.png#averageHue=%2311100f&clientId=uf90737c2-b207-4&errorMessage=unknown%20error&from=paste&id=udf3c5298&name=image.png&originHeight=377&originWidth=845&originalType=url&ratio=1&rotation=0&showTitle=false&size=43641&status=error&style=none&taskId=u8301db28-9ece-428b-aa70-6909b73a312&title=" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github 代理加速或 CDN 加速</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Github/github%20%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%E6%88%96%20CDN%20%E5%8A%A0%E9%80%9F.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Github/github%20%E4%BB%A3%E7%90%86%E5%8A%A0%E9%80%9F%E6%88%96%20CDN%20%E5%8A%A0%E9%80%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="WSL-使用proxy连接Github"><a href="#WSL-使用proxy连接Github" class="headerlink" title="WSL 使用proxy连接Github"></a>WSL 使用proxy连接Github</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=127.0.0.1 </span><br><span class="line"><span class="built_in">export</span> hostport=10808 // 取决于win的proxy工具设置的端口号</span><br><span class="line"><span class="built_in">export</span> HTTPS_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br><span class="line"><span class="built_in">export</span> HTTP_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;socks5://<span class="variable">$&#123;hostip&#125;</span>:<span class="variable">$&#123;hostport&#125;</span>&quot;</span>;</span><br></pre></td></tr></table></figure><p>下面的命令只针对github.com，在国内还可能会用到gitee.com，所以不能将所有的 git 站点都添加上代理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1086</span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.https://github.com.proxy</span><br></pre></td></tr></table></figure><p>如果没有代理也不要急，有专门的cdn加速：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global url.<span class="string">&quot;https://github.com.cnpmjs.org&quot;</span>.insteadOf <span class="string">&quot;https://github.com&quot;</span></span><br><span class="line">git config --global url.<span class="string">&quot;https://ghproxy.com&quot;</span>.insteadOf <span class="string">&quot;https://github.com&quot;</span> </span><br><span class="line">git config --global url.<span class="string">&quot;https://hub.fastgit.xyz/&quot;</span>.insteadOf <span class="string">&quot;https://github.com/&quot;</span></span><br></pre></td></tr></table></figure><p>因为没有官方 CDN，上面都是用爱发电，没准哪天就挂了。</p><h1 id="在Terminal中通过代理访问GitHub"><a href="#在Terminal中通过代理访问GitHub" class="headerlink" title="在Terminal中通过代理访问GitHub"></a>在Terminal中通过代理访问GitHub</h1><h3 id="通过代理访问GitHub"><a href="#通过代理访问GitHub" class="headerlink" title="通过代理访问GitHub"></a>通过代理访问GitHub</h3><p>从国内访问GitHub速度慢是一个困扰大家很久的问题，使用代理可以提高网页浏览和下载ZIP文件的速度。但是在Terminal中，git工具在访问<a href="https://github.com/">github.com</a>时，是不会经过代理的，这就导致了执行<code>clone</code>、<code>pull</code>、<code>push</code>等命令时，传输速度只有可怜的10KiB&#x2F;s。</p><blockquote><p>如果使用代理之后网页加载速度还是很慢，有可能是没有打开代理的 <strong>全局模式（Global Mode）</strong>。因为GitHub在国内没有被封锁，只是被限速了，所以有的代理会“智能”地忽略对<a href="https://github.com/">github.com</a>的访问请求。</p></blockquote><p>论坛上常见解决方法是更改<code>/etc/hosts</code>文件，但这个方法成功率不是很高，而且因为IP地址变动的问题，每次都要重新配置。还有一个方法是通过<a href="https://gitee.com/">gitee.com</a>来中转仓库，但是这只适合用于一次性的克隆，如果要经常获取别人的提交，这种方法就过于繁琐了。<br>下面我就来讲解一下怎么让git工具通过代理访问<a href="https://github.com/">github.com</a>。</p><hr><h2 id="第一步：配置代理"><a href="#第一步：配置代理" class="headerlink" title="第一步：配置代理"></a>第一步：配置代理</h2><p>从代理客户端设置中找到 <strong>允许其他设备连接本机代理</strong> 选项，并输入一个代理端口：<br><img src="https://img-blog.csdnimg.cn/2020120202074538.png#pic_center#id=JC2pN&originHeight=191&originWidth=349&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><strong>注意：</strong></p><ul><li>每个代理的设置界面可能不一样，但是应该都有这些选项。</li><li>0～1023端口为系统端口，所以这里选择1024～65535之间的端口。</li><li>如果有SOCKS5协议，也可以选择一个端口使用。</li></ul><h2 id="第二部：配置git工具"><a href="#第二部：配置git工具" class="headerlink" title="第二部：配置git工具"></a>第二部：配置git工具</h2><h3 id="设置git局部代理"><a href="#设置git局部代理" class="headerlink" title="设置git局部代理"></a>设置git局部代理</h3><p>如果你想在本地已有的仓库中，让<code>pull</code>或者<code>push</code>命令经过代理，就需要将git工具的代理设置为上一步中输入的端口（我的端口是41091）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd path/to/your/repo/</span><br><span class="line">$ git config http.proxy http://127.0.0.1:41091</span><br><span class="line">$ git config https.proxy https://127.0.0.1:41091</span><br><span class="line">$ git config --list # 查看设置结果</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>这里使用的是git工具的 <strong>局部代理</strong>（没有<code>--global</code>标示），所以仅该目录下的git命令会经过代理。</p></li><li><p>127.0.0.1是localhost的IP地址，如果你的代理不在同一个计算机上，就需要输入对应的IP地址。</p></li><li><p>如果上一步选择了SOCKS5协议，使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config http.proxy socks5://127.0.0.1:1090</span><br><span class="line">$ git config https.proxy socks5://127.0.0.1:1090</span><br></pre></td></tr></table></figure></li><li><p>如果想要停用代理，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --unset http.proxy</span><br><span class="line">$ git config --unset https.proxy</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置git全局代理"><a href="#设置git全局代理" class="headerlink" title="设置git全局代理"></a>设置git全局代理</h3><p>如果你想让<code>clone</code>命令经过代理，首先需要设置git工具的 <strong>全局代理</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy http://127.0.0.1:41091</span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:41091</span><br></pre></td></tr></table></figure><p>在<code>clone</code>完成之后，记得停用全局代理，否则之后所有的git命令都会经过代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --unset http.proxy</span><br><span class="line">$ git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>如果想要在克隆的文件夹中打开局部代理，可以参照第一种情况。</p><h2 id="第三部：访问GitHub"><a href="#第三部：访问GitHub" class="headerlink" title="第三部：访问GitHub"></a>第三部：访问GitHub</h2><p>现在就可以用代理的最高限速访问<a href="https://github.com/">github.com</a>啦！我在测试中，<code>git pull</code>的平均速度可以达到10MiB&#x2F;s。<br><img src="https://img-blog.csdnimg.cn/2020120202071050.png#pic_center#height=107&id=dSeIP&originHeight=214&originWidth=1056&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=&width=528"></p><hr><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>如果有的小伙伴不想在Terminal里设置git工具，还可以使用 <strong>GitHub Desktop</strong> （<a href="https://desktop.github.com/">点这里下载</a>）来管理本地的GitHub仓库。只要打开代理，不需要任何设置，GitHub Desktop就会自动经过代理访问GitHub的服务器。</p><h1 id="下载单个github文件夹（实际下载整个文件夹，速度还行）"><a href="#下载单个github文件夹（实际下载整个文件夹，速度还行）" class="headerlink" title="下载单个github文件夹（实际下载整个文件夹，速度还行）"></a>下载单个github文件夹（实际下载整个文件夹，速度还行）</h1><p>刚写了个库<a href="https://link.zhihu.com/?target=https://github.com/ykfe/dclone">dclone</a>,看了一眼应该是github上最简单的实现其他的库实现都写的特别复杂，可以让你只下载单个文件夹提升你的下载速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g dclone</span><br><span class="line">$ dclone <span class="attr">https</span>:<span class="comment">//github.com/ykfe/egg-react-ssr/tree/dev/example/ssr-with-loadable</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 WSL 在 VScode上用 LLVM + Clangd + LLDB高效编程 C++</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/c++/c++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8%20WSL%20%E5%9C%A8%20VScode%E4%B8%8A%E7%94%A8%20LLVM%20+%20Clangd%20+%20LLDB%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%20C++.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/c++/c++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E4%BD%BF%E7%94%A8%20WSL%20%E5%9C%A8%20VScode%E4%B8%8A%E7%94%A8%20LLVM%20+%20Clangd%20+%20LLDB%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B%20C++.html</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>想要在 <a href="https://so.csdn.net/so/search?q=VScode&spm=1001.2101.3001.7020">VScode</a> 上使用 clang 编译 + LLDB 调试 + clangd 自动补全这一套工具链。</p><h2 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h2><p>当前工具链版本最新为 13，但是 20.04 版本的 Ubuntu 最新为 12，默认为 10。</p><h3 id="安装版本-10"><a href="#安装版本-10" class="headerlink" title="安装版本 10"></a>安装版本 10</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang clangd llvm liblldb-dev </span><br></pre></td></tr></table></figure><h3 id="安装版本-12"><a href="#安装版本-12" class="headerlink" title="安装版本 12"></a>安装版本 12</h3><p>我用的是最新 12 版本的<br> 使用 update-alternative 来设置 clang 默认使用 12 版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang-12 clangd-12 llvm-12 liblldb-12-dev </span><br></pre></td></tr></table></figure><p><strong>可选：</strong><br> 如果你想后续均使用 12 版本，可以使用以下命令，默认将 clang 指向 12 版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-12 100</span><br><span class="line">sudo update-alternatives --install /usr/bin/llvm-dis llvm-dis /usr/bin/llvm-dis-12 100</span><br></pre></td></tr></table></figure><h2 id="VScode-插件"><a href="#VScode-插件" class="headerlink" title="VScode 插件"></a>VScode 插件</h2><p>必装：</p><ol><li>clangd</li><li>CodeLLDB</li></ol><p>选装：</p><ol><li>CMake</li><li>Clang-Format</li><li>Clang-Tidy</li></ol><h3 id="CodeLLDB"><a href="#CodeLLDB" class="headerlink" title="CodeLLDB"></a>CodeLLDB</h3><p>这里安装后需要下载一个包，一般会超时。</p><ol><li><p>查看自己架构，一般是 X86_64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname -m    </span><br><span class="line"># x86_64</span><br></pre></td></tr></table></figure></li><li><p>自己下载对应架构的包，<a href="https://github.com/vadimcn/vscode-lldb/releases">下载链接</a><br> 比如这里是 x86_64 ，直接在 WSL 里面运行以下命令下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/vadimcn/vscode-lldb/releases/download/v1.6.10/codelldb-x86_64-linux.vsix</span><br></pre></td></tr></table></figure></li><li><p>手动安装，选择刚刚下载到的安装包。图片参考<a href="https://blog.csdn.net/Dimuky/article/details/109373334">博客</a><br> <img src="https://img-blog.csdnimg.cn/2020102922474289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RpbXVreQ==,size_16,color_FFFFFF,t_70#pic_center#id=FfgLC&originHeight=954&originWidth=1654&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p></li></ol><h2 id="配置-VScode"><a href="#配置-VScode" class="headerlink" title="配置 VScode"></a>配置 VScode</h2><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><p>按下 Ctrl+Shift+P，输入setting(设置)，找到 WSL 的选项<br><img src="https://img-blog.csdnimg.cn/800ce80d1b2f4df1aebf21695264d004.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5rW35rab55qE5a2m5Lmg56yU6K6w,size_14,color_FFFFFF,t_70,g_se,x_16#id=lx2y0&originHeight=432&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br> 粘贴以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;clangd.arguments&quot;: [</span><br><span class="line">        &quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/build&quot;,//指定配置文件compelie_commands.json所在目录，这里有三种方法生成</span><br><span class="line">        // 在后台自动分析文件（基于complie_commands)</span><br><span class="line">        &quot;--background-index&quot;,</span><br><span class="line">        // 同时开启的任务数量</span><br><span class="line">        &quot;-j=12&quot;,</span><br><span class="line">        // &quot;--folding-ranges&quot;</span><br><span class="line">        // 告诉clangd用那个clang进行编译，路径参考which clang++的路径</span><br><span class="line">        &quot;--query-driver=/usr/bin/clang++&quot;,</span><br><span class="line">        // clang-tidy功能</span><br><span class="line">        &quot;--clang-tidy&quot;,</span><br><span class="line">        &quot;--clang-tidy-checks=performance-*,bugprone-*&quot;,</span><br><span class="line">        // 全局补全（会自动补充头文件）</span><br><span class="line">        &quot;--all-scopes-completion&quot;,</span><br><span class="line">        // 更详细的补全内容</span><br><span class="line">        &quot;--completion-style=detailed&quot;,</span><br><span class="line">        &quot;--function-arg-placeholders&quot;,</span><br><span class="line">        // 补充头文件的形式</span><br><span class="line">        &quot;--header-insertion=iwyu&quot;,</span><br><span class="line">        // pch优化的位置</span><br><span class="line">        &quot;--pch-storage=memory&quot;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成-clangd-配置文件"><a href="#生成-clangd-配置文件" class="headerlink" title="生成 clangd 配置文件"></a>生成 clangd 配置文件</h3><p>clangd 对每个项目都需要生成一个名为 compile_commands.json 的配置文件，参见<a href="https://_clang.llvm.org_docs_jsoncompilationdatabase/">官方文档</a></p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>通过<a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a>插件配合vscode来实现对c&#x2F;c++项目的断点调试支持。<br>另外我们还需要依赖vscode的C++插件才能进行调试支持</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> c++ </category>
          
          <category> c++环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一次Win下的C++环境搭建</title>
      <link href="/posts/%E8%AF%AD%E8%A8%80/c++/c++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Win%E4%B8%8B%E7%9A%84C++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
      <url>/posts/%E8%AF%AD%E8%A8%80/c++/c++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Win%E4%B8%8B%E7%9A%84C++%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<p>这套环境是VSCode+MinGW（MSYS2）&#x2F;Msvc+Clangd+Xmake的配置。<br>先安装<a href="../../../%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/Scoop">Scoop</a></p><h2 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h2><p>首先使用scoop安装msys2（在main bucket中就有）：<br><code>scoop install msys2 </code><br>msys2镜像源替换<br><a href="https://mirrors.ustc.edu.cn/help/msys2.html">https://mirrors.ustc.edu.cn/help/msys2.html</a><br>终端中输入<code>msys2</code>进入环境，下载minGW：<br><code>pacman -S mingw-w64-x86_64-toolchain </code><br>下面会提示选择哪些工具，如果不是硬盘空间实在有限的话，直接回车默认安装全部即可。<br>随后找到minGW的bin目录（这里推荐一手Listary，直接搜索<code>g++.exe</code>打开文件目录即可，非常方便），添加环境变量（环境变量一般重启才生效），此时GCC编译器就算是安装成功了。</p><h2 id="clangd"><a href="#clangd" class="headerlink" title="clangd"></a>clangd</h2><p>在vscode扩展商店中搜索clangd下载，完成后右下角会弹窗提醒你安装clangd server，点击Install即可直接安装，这一点非常便捷。</p><h3 id="Mingw"><a href="#Mingw" class="headerlink" title="Mingw"></a>Mingw</h3><p>clangd默认直接绑定了VS路径下的MSVC库，如果需要修改为MinGW则要改动target。<br>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">* Clangd *</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径，这里我设置了mingw的路径，但似乎没有效果（clangd仍然链接到了MSVC当中）</span></span><br><span class="line">  <span class="string">&quot;--query-driver=D:\\Scoop\\apps\\msys2\\current\\mingw64\\bin\\x86_64-w64-mingw32-g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0\\x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//设置链接目标，这里改成了GNU，即对应MinGW</span></span><br><span class="line">  <span class="string">&quot;--target=x86_64-w64-windows-gnu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>逐一解释：</p><ul><li>header-insetion:是否自动引入头文件，这里设置的是从不。</li><li>completion-style:设置提示格式，这里设置的是展示所有细节。</li><li>query-driver：设置clangd server的驱动库路径，这里我设置了mingw的路径，但似乎没有效果（clangd仍然链接到了MSVC当中）</li><li>std：设置c++标准</li><li>-I：设置用户自定义的库路径</li><li>–target：设置链接目标，这里改成了GNU，即对应MinGW</li></ul><h3 id="msvc"><a href="#msvc" class="headerlink" title="msvc"></a>msvc</h3><p>msvc编译器较快（推荐）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment"> * Clangd *</span></span><br><span class="line"><span class="comment"> **********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径</span></span><br><span class="line">  <span class="string">&quot;--query-driver=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\HostX64\\x64\\cl.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="xmake"><a href="#xmake" class="headerlink" title="xmake"></a>xmake</h2><p>设置工具链：<br><code>xmake f -p mingw --mingw=D:\Scoop\apps\msys2\current\mingw64  -c</code><br>贴一段xmake的配置代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;c11&quot;</span>,<span class="string">&quot;cxx11&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;P2_6_1&quot;</span>)</span><br><span class="line">set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">add_files(<span class="string">&quot;src/chapter2/practice_2_6_1.cpp&quot;</span>)</span><br><span class="line">add_includedirs(<span class="string">&quot;src/includes&quot;</span>)</span><br></pre></td></tr></table></figure><p>这款工具也可以在scoop中直接下载，vscode也提供了官方插件快速操作（不过我觉得命令行已经够傻白甜了），推荐大家使用。<br>同时它也可以根据lua脚本直接生成CmakeList文件（也就是向下兼容Cmake），这个功能我没有深入体验过，感兴趣的可以尝试一下。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>通过<a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a>插件配合vscode来实现对c&#x2F;c++项目的断点调试支持。<br>另外我们还需要依赖vscode的C++插件才能进行调试支持</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
          <category> c++ </category>
          
          <category> c++环境搭建 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>zimfw美化zsh终端</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/%E7%BE%8E%E5%8C%96zsh%E7%BB%88%E7%AB%AF.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/%E7%BE%8E%E5%8C%96zsh%E7%BB%88%E7%AB%AF.html</url>
      
        <content type="html"><![CDATA[<h2 id="zsh安装"><a href="#zsh安装" class="headerlink" title="zsh安装"></a>zsh安装</h2><ul><li><p>查看自己系统是否存在zsh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure></li><li><p>查看是否是使用的 zsh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure></li><li><p>ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"># ubuntu下载安装zsh</span><br><span class="line">apt install zsh -y</span><br><span class="line"># 切换</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>第一次进入 Zsh 会自动出现一个配置界面，这个界面可以根据需要自定义 Zsh。</p></li></ul><p><img src="https://img.linux.net.cn/data/attachment/album/202101/18/223907orolqh0e4td0i040.png"></p><p>在这里输入 <code>1</code> 就可以进入配置界面了。</p><p><img src="https://img.linux.net.cn/data/attachment/album/202101/18/223908l84l8f9rddlbqh9h.png"></p><p>配置界面中各个菜单代表的意思分别是：</p><ul><li><code>1</code>：设置命令历史记录相关的选项</li><li><code>2</code>：设置命令补全系统</li><li><code>3</code>：设置热建</li><li><code>4</code>：选择各种常见的选项，只需要选择“On”或者“Off”</li><li><code>0</code>：退出，并使用空白（默认）配置</li><li><code>a</code>：终止设置并退出</li><li><code>q</code>：退出</li></ul><p>这里根据提示，然后按照你自己的喜好配置就可以了。配置好后，会在你的用户目录下生成 <code>.zshrc</code> 文件。然后我们要去这个文件中启用插件和主题。</p><h3 id="Ubuntu-安装插件"><a href="#Ubuntu-安装插件" class="headerlink" title="Ubuntu 安装插件"></a>Ubuntu 安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh-autosuggestions zsh-syntax-highlighting autojump exa</span><br></pre></td></tr></table></figure><p> <a href="https://github.com/wting/autojump">autojump</a><br>实现目录间的快速跳转。<br>但如果使用「autojump」，只需要输入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ j 路径关键词</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-0bc84a1adac8a6fda4c87f48e78bb416_1440w.webp"></p><p>可以看到直接跳进该路径下了。</p><p>「autojump」会按照关键词使用频率做一个排序，有的时候有一些路径有相似的关键词时，使用「tab」可以查看排序，例如：</p><p><img src="https://pic3.zhimg.com/80/v2-84b8032c7dd65d3fb26ff32e211e2576_1440w.webp"></p><p>想访问哪一个，输入相应的数字即可。</p><ol><li>autojump 只能跳转到已经用<code>cd</code>进入过的目录，无法跳转到没有用<code>cd</code>进入过的目录。即使用 cd 进入过一个特定的目录才会被记录到 autojump 的数据库中，才可以使用 autojump 进行跳转。</li><li>自动跳转不支持<code>-</code>开头的目录。<br> <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestion</a><br>基于历史记录，进行命令的推荐和补全。<br> <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a><br>对输入的命令提供高亮显示和语法检查。<br> <a href="https://github.com/ogham/exa">exa</a><br>用于替代原生的 <code>ls</code>，通过不同的颜色来更好地区分文件的类型及相关的元属性。</li></ol><h2 id="powerlevel10k安装"><a href="#powerlevel10k安装" class="headerlink" title="powerlevel10k安装"></a>powerlevel10k安装</h2><p>打开此链接<a href="https://github.com/romkatv/powerlevel10k">github</a>，进入到库里面，按照安装步骤：</p><ol><li>安装字体：随便下载一个字体，我是下载了第一个，然后双击下载文件，最后我们开启terminal，点击偏好设置，在字体那个地方点击更改，右上角搜索Meslo就能看到你安装的字体<br><img src="https://img-blog.csdnimg.cn/20210318085858743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbnNzczIwMTEyMDEx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>安装powerlevel10k<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/module/powerlevel10k </span><br></pre></td></tr></table></figure></li></ol><p>你要是用着之后想换的话直接在命令行里加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure><h2 id="zsh-vi-mod"><a href="#zsh-vi-mod" class="headerlink" title="zsh vi mod"></a>zsh vi mod</h2><p><a href="https://github.com/jeffreytse/zsh-vi-mode#custom-escape-key">jeffreytse&#x2F;zsh-vi-mode: 💻 A better and friendly vi(vim) mode plugin for ZSH. (github.com)</a><br>使用vi模式编辑命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/mirrors_jeffreytse/zsh-vi-mode.git ~/module/zsh-vi-mode</span><br></pre></td></tr></table></figure><h2 id="fzf-tab"><a href="#fzf-tab" class="headerlink" title="fzf-tab"></a>fzf-tab</h2><p><a href="https://github.com/Aloxaf/fzf-tab">Aloxaf&#x2F;fzf-tab: Replace zsh’s default completion selection menu with fzf! (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fzf</span><br><span class="line">git clone https://gitee.com/mirrors_Aloxaf/fzf-tab.git ~/module/fzf-tab</span><br></pre></td></tr></table></figure><h2 id="x2F-zshrc"><a href="#x2F-zshrc" class="headerlink" title="~&#x2F;.zshrc"></a>~&#x2F;.zshrc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line">source /usr/share/autojump/autojump.zsh </span><br><span class="line">source ~/module/zsh-vi-mode/zsh-vi-mode.plugin.zsh</span><br><span class="line">source ~/module/powerlevel10k/powerlevel10k.zsh-theme</span><br><span class="line">source ~/module/fzf-tab/fzf-tab.plugin.zsh</span><br><span class="line">alias ls=&quot;exa&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 终端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>powershell美化</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/powershell%E7%BE%8E%E5%8C%96.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E7%BB%88%E7%AB%AF/powershell%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装-NF-字体"><a href="#安装-NF-字体" class="headerlink" title="安装 NF 字体"></a>安装 NF 字体</h3><p>后面介绍的一些功能会有显示一些特殊字符的需求，所以这里我们要提前安装一些支持特殊字符的字体。而 <a href="https://link.zhihu.com/?target=https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a> 这个项目，包含了众多适配过特殊字符的字体，可以放心使用。这里推荐 <code>Meslo-Nerd-Fonts</code>，可以在 scoop 中安装。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># scoop默认没有开启nerd-fonts分类，需要开启才能安装相关字体</span><br><span class="line">scoop bucket add nerd-fonts</span><br><span class="line"># 安装字体时需要在管理员权限的终端中运行</span><br><span class="line">scoop install Meslo-NF-Mono</span><br></pre></td></tr></table></figure><h3 id="Windows-Terminal-终端-选项"><a href="#Windows-Terminal-终端-选项" class="headerlink" title="Windows Terminal (终端) 选项"></a>Windows Terminal (终端) 选项</h3><p>然后再来配置一下 Windows Terminal (终端) ，点击下拉菜单选择设置打开设置标签页，然后依次修改以下选项：</p><ul><li>启动 -&gt; 默认配置文件，改为 Powershell，如果你已经安装了 Powershell 7.2，这里应当可以自动搜索到。否则可能需要手动编辑配置文件。</li><li>启动 -&gt; 默认终端应用程序，改为 Windows Terminal (终端) 。</li><li>外观 -&gt; 在选项卡中显示亚力克效果，选择启用。</li><li>配色方案，这里可以根据自己喜好调整。</li><li>配置文件默认值 -&gt; 外观 -&gt; 字体，改为 <code>MesloLGS NF</code> 字体，字号按照自己屏幕大小选择，再开启亚力克效果，透明度选择 70% 左右。</li></ul><p>这样一来，Windows Terminal (终端) 的配置就算完成了。当然如果你对自带的配色方案不满意，也可以从网络上寻找一些好看的配色方案， 其他设置也可以根据自己喜好进行修改，这里就不多做介绍了。</p><h2 id="对所有终端生效"><a href="#对所有终端生效" class="headerlink" title="对所有终端生效"></a>对所有终端生效</h2><p>在终端中配置只能在当前终端生效，为了让它能够在所有 Powershell 中永久生效，需要在配置文件中编辑。</p><p>在 Powershell 中运行以下命令，用 vscode 打开 Powershell 的配置文件，如果你没有 vscode，也可以改成 notepad 用记事本来编辑配置文件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code $PROFILE</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\powerlevel10k_rainbow.omp.json&quot; | Invoke-Expression</span><br><span class="line"></span><br><span class="line">Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -EditMode Emacs</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -BellStyle None</span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-posh"><a href="#安装-oh-my-posh" class="headerlink" title="安装 oh-my-posh"></a>安装 oh-my-posh</h2><p>oh-my-posh 是一个 Powershell 的主题项目，可以将 Powershell 美化成类似 ohmyzsh 的效果。安装 oh-my-posh 也很简单，运行下面的命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install oh-my-posh</span><br></pre></td></tr></table></figure><p>当然这里还有很多其他主题可供选择，<a href="https://link.zhihu.com/?target=https://ohmyposh.dev/docs/themes">https://ohmyposh.dev/docs/themes</a>。如果你不喜欢这些主题，甚至还可以自己编写 ohmyposh 主题。</p><h2 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h2><p>想让 Powershell 也拥有提示和补全功能？PSReadLine 可以帮你，这是一个可以增强终端体验的工具。</p><h3 id="安装-PSReadLine"><a href="#安装-PSReadLine" class="headerlink" title="安装 PSReadLine"></a>安装 PSReadLine</h3><p>确保你使用的是 Powershell 7.2，然后运行下面的命令。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine -AllowPrerelease -Force</span><br><span class="line"># 或者你喜欢稳定版</span><br><span class="line">Install-Module PSReadLine -Scope CurrentUser</span><br></pre></td></tr></table></figure><h3 id="使用-PSReadLine"><a href="#使用-PSReadLine" class="headerlink" title="使用 PSReadLine"></a>使用 PSReadLine</h3><p>要使用 PSReadLine，同样需要在 <code>$PROFILE</code> 中添加一些配置，可以参考<a href="https://link.zhihu.com/?target=https://docs.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline">官方文档</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Import-Module PSReadLine</span><br><span class="line">Set-PSReadLineOption -EditMode Emacs</span><br><span class="line">Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line">Set-PSReadLineOption -BellStyle None</span><br><span class="line">Set-PSReadLineKeyHandler -Chord &#x27;Ctrl+d&#x27; -Function DeleteChar</span><br></pre></td></tr></table></figure><h2 id="UNIX-工具链"><a href="#UNIX-工具链" class="headerlink" title="UNIX 工具链"></a>UNIX 工具链</h2><p>然后我们来安装各种命令行下的工具链。我们可以先借此试用一下 scoop。我们用 scoop 去搜索 sed：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search sed</span><br></pre></td></tr></table></figure><p>然后可以发现，busybox， gow 和 unxutils 这三个仓库提供了 sed 这个命令：<br>搜了一下之后发现好像 busybox 还在更新，其他两个仓库已经是很久以前的了。所以我们来安装 busybox：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install busybox</span><br></pre></td></tr></table></figure><p>安装完成之后，来试用一下：</p><p><img src="https://pic3.zhimg.com/80/v2-b2bfe2f0507e0c0f12f23d035c84d0da_1440w.webp"></p><p>输出 ls 命令结果的前几行</p><p>删除Powershell中的ls</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove-Alias ls</span><br></pre></td></tr></table></figure><p>这个包还提供了很多常用工具，基本可以满足日常需要，大家可以都试一下。</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>Linux 最好用的命令是什么？sudo！一键切换管理员权限，Powershell 每次发现忘了开管理员，就得重开一个，很麻烦的有没有！</p><p>所以我们来给 Windows 装一个 sudo：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop search sudo</span><br></pre></td></tr></table></figure><p>然后就可以爽到飞起了。以后不管什么命令失败，都可以 sudo 试一试。</p><h2 id="z-lua"><a href="#z-lua" class="headerlink" title="z.lua"></a>z.lua</h2><h3 id="安装-z-lua"><a href="#安装-z-lua" class="headerlink" title="安装 z.lua"></a>安装 z.lua</h3><p>z 是一个 linux 下知名的终端目录跳转插件，可以智能的帮助我们在多个目录中跳转。不过这个插件是用 shell 语言写成的，所以速度并不理想。因此就有了 z.lua 这个项目，是用 lua 脚本语言重新实现 z 的功能，速度更快，兼容性也更好。</p><p>因为是用 lua 语言写成的，所以首先需要安装 lua 语言，这很简单，直接用 scoop 安装即可。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install lua</span><br></pre></td></tr></table></figure><p>然后需要下载 z.lua 项目，这里推荐直接用 git 将项目克隆到用户主目录下。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/skywind3000/z.lua.git</span><br></pre></td></tr></table></figure><p>然后在 <code>$PROFILE</code> 中添加下面一行，这样以后在使用终端的时候都可以用 <code>z</code> 命令来实现跳转了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Expression (&amp; &#123; (lua $HOME/z.lua/z.lua --init powershell once enhanced) -join &quot;`n&quot; &#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-z-lua"><a href="#使用-z-lua" class="headerlink" title="使用 z.lua"></a>使用 z.lua</h3><p>那么这个东西到底要怎么用呢？其实很简单。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 首先需要在终端中切换几次不同的目录，ab是两个路径不同的目录</span><br><span class="line">cd a</span><br><span class="line">cd b</span><br><span class="line"># 然后z.lua就会记住切换的选择，下次直接输入目录名甚至一部分即可实现跳转</span><br><span class="line">z a</span><br><span class="line">z b</span><br></pre></td></tr></table></figure><p>这个项目是咱们国内大佬写的，所以还有官方的中文文档，对 z.lua 的使用方法有更加详细和深入的讲解，务必要阅读一遍，之后你就可以用它来实现畅快的目录跳转了，<a href="https://link.zhihu.com/?target=https://github.com/skywind3000/z.lua/blob/master/README.cn">https://github.com/skywind3000/z.lua/blob/master/README.cn.md</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 终端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用graphviz绘图</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/%E4%BD%BF%E7%94%A8graphviz%E7%BB%98%E5%9B%BE.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E5%85%B6%E4%BB%96/%E4%BD%BF%E7%94%A8graphviz%E7%BB%98%E5%9B%BE.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日常的开发工作中，为代码添加注释是代码可维护性的一个重要方面，但是仅仅提供注释是不够的，特别是当系统功能越来越复杂，涉及到的模块越来越多的时候，仅仅靠代码就很难从宏观的层次去理解。因此我们需要图例的支持，图例不仅仅包含功能之间的交互，也可以包含复杂的数据结构的示意图，数据流向等。<br>但是，常用的UML建模工具，如<code>Visio</code>等都略显复杂，且体积庞大。对于开发人员，特别是后台开发人员来说，命令行，脚本才是最友好的，而图形界面会很大程度的限制开发效率。相对于鼠标，键盘才是开发人员最好的朋友。</p><h3 id="graphviz简介"><a href="#graphviz简介" class="headerlink" title="graphviz简介"></a>graphviz简介</h3><p>本文介绍一个高效而简洁的绘图工具<code>graphviz</code>。<code>graphviz</code>是贝尔实验室开发的一个开源的工具包，它使用一个特定的<code>DSL</code>(领域特定语言): <code>dot</code>作为脚本语言，然后使用布局引擎来解析此脚本，并完成自动布局。<code>graphviz</code>提供丰富的导出格式，如常用的图片格式，SVG，PDF格式等。<br><code>graphviz</code>中包含了众多的布局器：</p><ul><li><code>dot</code> 默认布局方式，主要用于有向图</li><li><code>neato</code> 基于spring-model(又称force-based)算法</li><li><code>twopi</code> 径向布局</li><li><code>circo</code> 圆环布局</li><li><code>fdp</code> 用于无向图</li></ul><p><code>graphviz</code>的设计初衷是对<code>有向图/无向图</code>等进行自动布局，开发人员使用dot脚本定义图形元素，然后选择算法进行布局，最终导出结果。<br>首先，在dot脚本中定义图的顶点和边，顶点和边都具有各自的属性，比如形状，颜色，填充模式，字体，样式等。然后使用合适的布局算法进行布局。布局算法除了绘制各个顶点和边之外，需要尽可能的将顶点均匀的分布在画布上，并且尽可能的减少边的交叉(如果交叉过多，就很难看清楚顶点之间的关系了)。所以使用<code>graphviz</code>的一般流程为：</p><ul><li>定义一个图，并向图中添加需要的顶点和边</li><li>为顶点和边添加样式</li><li>使用布局引擎进行绘制</li></ul><p>一旦熟悉这种开发模式，就可以快速的将你的想法绘制出来。配合一个良好的编辑器(vim&#x2F;emacs)等，可以极大的提高开发效率，与常见的GUI应用的所见即所得模式对应，此模式称为所思即所得。比如在我的机器上，使用Sublime Text 编辑<code>dot</code>脚本，然后将<code>F7/Cmd-B</code>映射为调用<code>dot引擎</code>去绘制当前脚本，并打开一个新的窗口来显示运行结果：<br><img src="https://icodeit.org/images/2015/11/workspace-resized.png#id=FpXBL&originHeight=575&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>对于开发人员而言，经常会用到的图形绘制可能包括：函数调用关系，一个复杂的数据结构，系统的模块组成，抽象语法树等。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>graphviz包含3中元素，<code>图</code>，<code>顶点</code>和<code>边</code>。每个元素都可以具有各自的属性，用来定义字体，样式，颜色，形状等。下面是一些简单的示例，可以帮助我们快速的了解graphviz的基本用法。</p><h4 id="第一个graphviz图"><a href="#第一个graphviz图" class="headerlink" title="第一个graphviz图"></a>第一个graphviz图</h4><p>比如，要绘制一个有向图，包含4个节点<code>a,b,c,d</code>。其中<code>a</code>指向<code>b</code>，<code>b</code>和<code>c</code>指向<code>d</code>。可以定义下列脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">a;</span><br><span class="line">b;</span><br><span class="line">c;</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>dot</code>布局方式，绘制出来的效果如下：<br><img src="https://icodeit.org/images/2012/01/clip_image004.gif#id=hxgXl&originHeight=251&originWidth=179&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>默认的顶点中的文字为定义顶点变量的名称，形状为椭圆。边的默认样式为黑色实线箭头，我们可以在脚本中做一下修改，将顶点改为<code>方形</code>，边改为<code>虚线</code>。</p><h4 id="定义顶点和边的样式"><a href="#定义顶点和边的样式" class="headerlink" title="定义顶点和边的样式"></a>定义顶点和边的样式</h4><p>在<code>digraph</code>的花括号内，添加顶点和边的新定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br></pre></td></tr></table></figure><p>则绘制的效果如下：<br><img src="https://icodeit.org/images/2012/01/clip_image006.gif#id=JVRXm&originHeight=259&originWidth=179&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h4 id="进一步修改顶点和边样式"><a href="#进一步修改顶点和边样式" class="headerlink" title="进一步修改顶点和边样式"></a>进一步修改顶点和边样式</h4><p>进一步，我们将顶点<code>a</code>的颜色改为<code>淡绿色</code>，并将<code>c</code>到<code>d</code>的边改为<code>红色</code>，脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line">c;</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绘制的结果如下：<br><img src="https://icodeit.org/images/2012/01/clip_image008.gif#id=YCWr8&originHeight=259&originWidth=179&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>应当注意到，顶点和边都接受属性的定义，形式为在顶点和边的定义之后加上一个由方括号括起来的<code>key-value</code>列表，每个<code>key-value</code>对由逗号隔开。如果图中顶点和边采用统一的风格，则可以在图定义的首部定义<code>node</code>, <code>edge</code>的属性。比如上图中，定义所有的顶点为方框，所有的边为虚线，在具体的顶点和边之后定义的属性将覆盖此全局属性。如特定与<code>a</code>的绿色，<code>c</code>到<code>d</code>的边的红色。</p><h4 id="以图片为节点"><a href="#以图片为节点" class="headerlink" title="以图片为节点"></a>以图片为节点</h4><p>除了颜色，节点还可以使用图片。不过需要注意的是，在使用图片作为节点的时候，需要将本来的形状设置为<code>none</code>，并且将<code>label</code>置为空字符串，避免出现文字对图片的干扰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line">c [shape=&quot;none&quot;, image=&quot;logos/browser-icon-chrome-resized.png&quot;, label=&quot;&quot;];</span><br><span class="line">d;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://icodeit.org/images/2015/11/image-node.png#id=NcCoJ&originHeight=275&originWidth=179&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="子图的绘制"><a href="#子图的绘制" class="headerlink" title="子图的绘制"></a>子图的绘制</h3><p>graphviz支持子图，即图中的部分节点和边相对对立(软件的模块划分经常如此)。比如，我们可以将顶点c和d归为一个子图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">digraph abc&#123;</span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">edge [style=&quot;dashed&quot;];</span><br><span class="line"> </span><br><span class="line">a [style=&quot;filled&quot;, color=&quot;black&quot;, fillcolor=&quot;chartreuse&quot;];</span><br><span class="line">b;</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_cd&#123;</span><br><span class="line">    label=&quot;c and d&quot;;</span><br><span class="line">    bgcolor=&quot;mintcream&quot;;</span><br><span class="line">    c;</span><br><span class="line">    d;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">a -&gt; b;</span><br><span class="line">b -&gt; d;</span><br><span class="line">c -&gt; d [color=&quot;red&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>c</code>和<code>d</code>划分到<code>cluster_cd</code>这个子图中，标签为<code>c and d</code>,并添加背景色，以方便与主图区分开，绘制结果如下：<br><img src="https://icodeit.org/images/2012/01/clip_image010.gif#id=EWtIs&originHeight=285&originWidth=200&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>应该注意的是，子图的名称必须以<code>cluster</code>开头，否则<code>graphviz</code>无法设别。</p><h4 id="数据结构的可视化"><a href="#数据结构的可视化" class="headerlink" title="数据结构的可视化"></a>数据结构的可视化</h4><p>实际开发中，经常要用到的是对复杂数据结构的描述，<code>graphviz</code>提供完善的机制来绘制此类图形。</p><h5 id="一个hash表的数据结构"><a href="#一个hash表的数据结构" class="headerlink" title="一个hash表的数据结构"></a>一个hash表的数据结构</h5><p>比如一个hash表的内容，可能具有下列结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct st_hash_type &#123;</span><br><span class="line">    int (*compare) ();</span><br><span class="line">    int (*hash) ();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">struct st_table_entry &#123;</span><br><span class="line">    unsigned int hash;</span><br><span class="line">    char *key;</span><br><span class="line">    char *record;</span><br><span class="line">    st_table_entry *next;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">struct st_table &#123;</span><br><span class="line">    struct st_hash_type *type;</span><br><span class="line">    int num_bins; /* slot count */</span><br><span class="line">    int num_entries; /* total number of entries */</span><br><span class="line">    struct st_table_entry **bins; /* slot */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="绘制hash表的数据结构"><a href="#绘制hash表的数据结构" class="headerlink" title="绘制hash表的数据结构"></a>绘制hash表的数据结构</h5><p>从代码上看，由于结构体存在引用关系，不够清晰，如果层次较多，则很难以记住各个结构之间的关系，我们可以通过下图来更清楚的展示：<br><img src="https://icodeit.org/images/2012/01/clip_image012.gif#id=WbIua&originHeight=341&originWidth=264&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">digraph st2&#123;</span><br><span class="line">fontname = &quot;Verdana&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line">rankdir=TB;</span><br><span class="line"> </span><br><span class="line">node [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;skyblue&quot;, shape=&quot;record&quot;];</span><br><span class="line"> </span><br><span class="line">edge [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;crimson&quot;, style=&quot;solid&quot;];</span><br><span class="line"> </span><br><span class="line">st_hash_type [label=&quot;&#123;&lt;head&gt;st_hash_type|(*compare)|(*hash)&#125;&quot;];</span><br><span class="line">st_table_entry [label=&quot;&#123;&lt;head&gt;st_table_entry|hash|key|record|&lt;next&gt;next&#125;&quot;];</span><br><span class="line">st_table [label=&quot;&#123;st_table|&lt;type&gt;type|num_bins|num_entries|&lt;bins&gt;bins&#125;&quot;];</span><br><span class="line"> </span><br><span class="line">st_table:bins -&gt; st_table_entry:head;</span><br><span class="line">st_table:type -&gt; st_hash_type:head;</span><br><span class="line">st_table_entry:next -&gt; st_table_entry:head [style=&quot;dashed&quot;, color=&quot;forestgreen&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该注意到，在顶点的形状为<code>record</code>的时候，<code>label</code>属性的语法比较奇怪，但是使用起来非常灵活。比如，用竖线”|”隔开的串会在绘制出来的节点中展现为一条分隔符。用<code>&lt;&gt;</code>括起来的串称为锚点，当一个节点具有多个锚点的时候，这个特性会非常有用，比如节点<code>st_table</code>的<code>type</code>属性指向<code>st_hash_type</code>，第4个属性指向<code>st_table_entry</code>等，都是通过锚点来实现的。<br>我们发现，使用默认的<code>dot</code>布局后，绿色的这条边覆盖了数据结构<code>st_table_entry</code>，并不美观，因此可以使用别的布局方式来重新布局，如使用<code>circo</code>算法：<br><img src="https://icodeit.org/images/2012/01/clip_image014.gif#id=KE1ex&originHeight=149&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>则可以得到更加合理的布局结果。</p><h4 id="hash表的实例"><a href="#hash表的实例" class="headerlink" title="hash表的实例"></a>hash表的实例</h4><p>另外，这个hash表的一个实例如下：<br><img src="https://icodeit.org/images/2012/01/clip_image016.gif#id=p6x0X&originHeight=212&originWidth=553&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">digraph st&#123;</span><br><span class="line">fontname = &quot;Verdana&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line">rankdir = LR;</span><br><span class="line">rotate = 90;</span><br><span class="line"> </span><br><span class="line">node [ shape=&quot;record&quot;, width=.1, height=.1];</span><br><span class="line">node [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;skyblue&quot;, shape=&quot;record&quot;];</span><br><span class="line"> </span><br><span class="line">edge [fontname = &quot;Verdana&quot;, fontsize = 10, color=&quot;crimson&quot;, style=&quot;solid&quot;];</span><br><span class="line">node [shape=&quot;plaintext&quot;];</span><br><span class="line"> </span><br><span class="line">st_table [label=&lt;</span><br><span class="line">    &lt;table border=&quot;0&quot; cellborder=&quot;1&quot; cellspacing=&quot;0&quot; align=&quot;left&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;st_table&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;num_bins=5&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;num_entries=3&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td port=&quot;bins&quot;&gt;bins&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&gt;];</span><br><span class="line"> </span><br><span class="line">node [shape=&quot;record&quot;];</span><br><span class="line">num_bins [label=&quot; &lt;b1&gt; | &lt;b2&gt; | &lt;b3&gt; | &lt;b4&gt; | &lt;b5&gt; &quot;, height=2];</span><br><span class="line">node[ width=2 ];</span><br><span class="line"> </span><br><span class="line">entry_1 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;next&#125;&quot;];</span><br><span class="line">entry_2 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;null&#125;&quot;];</span><br><span class="line">entry_3 [label=&quot;&#123;&lt;e&gt;st_table_entry|&lt;next&gt;null&#125;&quot;];</span><br><span class="line"> </span><br><span class="line">st_table:bins -&gt; num_bins:b1;</span><br><span class="line">num_bins:b1 -&gt; entry_1:e;</span><br><span class="line">entry_1:next -&gt; entry_2:e;</span><br><span class="line">num_bins:b3 -&gt; entry_3:e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中可以看到，节点的<code>label</code>属性支持类似于<code>HTML</code>语言中的TABLE形式的定义，通过行列的数目来定义节点的形状，从而使得节点的组成更加灵活。</p><h4 id="软件模块组成图"><a href="#软件模块组成图" class="headerlink" title="软件模块组成图"></a>软件模块组成图</h4><p>Apache httpd 模块关系<br><img src="https://icodeit.org/images/2012/01/clip_image018.gif#id=T4J0x&originHeight=301&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在实际的开发中，随着系统功能的完善，软件整体的结构会越来越复杂，通常开发人员会将软件划分为可理解的多个子模块，各个子模块通过协作，完成各种各样的需求。<br>下面有个例子，是某软件设计时的一个草稿：<br><img src="https://icodeit.org/images/2012/01/clip_image020.gif#id=ANKMT&originHeight=433&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>IDP支持层为一个相对独立的子系统，其中包括如数据库管理器，配置信息管理器等模块，另外为了提供更大的灵活性，将很多其他的模块抽取出来作为外部模块，而支持层提供一个模块管理器，来负责加载&#x2F;卸载这些外部的模块集合。<br>这些模块间的关系较为复杂，并且有部分模块关系密切，应归类为一个子系统中，上图对应的<code>dot</code>脚本为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">digraph idp_modules&#123;</span><br><span class="line"> </span><br><span class="line">rankdir = TB;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 12;</span><br><span class="line"> </span><br><span class="line">node [ fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, shape = &quot;record&quot; ]; </span><br><span class="line">edge [ fontname = &quot;Microsoft YaHei&quot;, fontsize = 12 ];</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_sl&#123;</span><br><span class="line">        label=&quot;IDP支持层&quot;;</span><br><span class="line">        bgcolor=&quot;mintcream&quot;;</span><br><span class="line">        node [shape=&quot;Mrecord&quot;, color=&quot;skyblue&quot;, style=&quot;filled&quot;];</span><br><span class="line">        network_mgr [label=&quot;网络管理器&quot;];</span><br><span class="line">        log_mgr [label=&quot;日志管理器&quot;];</span><br><span class="line">        module_mgr [label=&quot;模块管理器&quot;];</span><br><span class="line">        conf_mgr [label=&quot;配置管理器&quot;];</span><br><span class="line">        db_mgr [label=&quot;数据库管理器&quot;];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    subgraph cluster_md&#123;</span><br><span class="line">        label=&quot;可插拔模块集&quot;;</span><br><span class="line">        bgcolor=&quot;lightcyan&quot;;</span><br><span class="line">        node [color=&quot;chartreuse2&quot;, style=&quot;filled&quot;];</span><br><span class="line">        mod_dev [label=&quot;开发支持模块&quot;];</span><br><span class="line">        mod_dm [label=&quot;数据建模模块&quot;];</span><br><span class="line">        mod_dp [label=&quot;部署发布模块&quot;];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">mod_dp -&gt; mod_dev [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dp -&gt; mod_dm [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dp -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">mod_dev -&gt; mod_dm [label=&quot;依赖...&quot;];</span><br><span class="line">mod_dev -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">mod_dm -&gt; module_mgr [label=&quot;安装...&quot;, color=&quot;yellowgreen&quot;, arrowhead=&quot;none&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h4><p>有限自动机示意图<br><img src="https://icodeit.org/images/2012/01/clip_image022.gif#id=eGVjJ&originHeight=304&originWidth=253&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>上图是一个简易有限自动机，接受<code>a</code>及<code>a</code>结尾的任意长度的串。其脚本定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">digraph automata_0 &#123;</span><br><span class="line">size = &quot;8.5, 11&quot;;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line"> </span><br><span class="line">node [shape = circle, fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line"> </span><br><span class="line">0 [ style = filled, color=lightgrey ];</span><br><span class="line">2 [ shape = doublecircle ];</span><br><span class="line"> </span><br><span class="line">0 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">0 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line">1 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">1 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line">2 -&gt; 2 [ label = &quot;a &quot; ];</span><br><span class="line">2 -&gt; 1 [ label = &quot;other &quot; ];</span><br><span class="line"> </span><br><span class="line">&quot;Machine: a&quot; [ shape = plaintext ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形状值为plaintext的表示不用绘制边框，仅展示纯文本内容，这个在绘图中，绘制指示性的文本时很有用，如上图中的<code>Machine: a</code>。</p><h4 id="OSGi中模块的生命周期图"><a href="#OSGi中模块的生命周期图" class="headerlink" title="OSGi中模块的生命周期图"></a>OSGi中模块的生命周期图</h4><p>OSGi中，模块具有生命周期，从安装到卸载，可能的状态具有已安装，已就绪，正在启动，已启动，正在停止，已卸载等。如下图所示：<br><img src="https://icodeit.org/images/2012/01/clip_image024.gif#id=hAQLS&originHeight=640&originWidth=344&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>对应的脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">digraph module_lc&#123;</span><br><span class="line">rankdir=TB;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 12;</span><br><span class="line"> </span><br><span class="line">node [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, shape = &quot;Mrecord&quot;, color=&quot;skyblue&quot;, style=&quot;filled&quot;]; </span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 12, color=&quot;darkgreen&quot; ];</span><br><span class="line"> </span><br><span class="line">installed [label=&quot;已安装状态&quot;];</span><br><span class="line">resolved [label=&quot;已就绪状态&quot;];</span><br><span class="line">uninstalled [label=&quot;已卸载状态&quot;];</span><br><span class="line">starting [label=&quot;正在启动&quot;];</span><br><span class="line">active [label=&quot;已激活(运行)状态&quot;];</span><br><span class="line">stopping [label=&quot;正在停止&quot;];</span><br><span class="line">start [label=&quot;&quot;, shape=&quot;circle&quot;, width=0.5, fixedsize=true, style=&quot;filled&quot;, color=&quot;black&quot;];</span><br><span class="line"> </span><br><span class="line">start -&gt; installed [label=&quot;安装&quot;];</span><br><span class="line">installed -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">installed -&gt; resolved [label=&quot;准备&quot;];</span><br><span class="line">installed -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">resolved -&gt; installed [label=&quot;更新&quot;];</span><br><span class="line">resolved -&gt; uninstalled [label=&quot;卸载&quot;];</span><br><span class="line">resolved -&gt; starting [label=&quot;启动&quot;];</span><br><span class="line">starting -&gt; active [label=&quot;&quot;];</span><br><span class="line">active -&gt; stopping [label=&quot;停止&quot;];</span><br><span class="line">stopping -&gt; resolved [label=&quot;&quot;]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他实例"><a href="#其他实例" class="headerlink" title="其他实例"></a>其他实例</h3><p>一棵简单的抽象语法树(AST)<br>表达式 <code>(3+4)*5</code> 在编译时期，会形成一棵语法树，一边在计算时，先计算<code>3+4</code>的值，最后与5相乘。<br><img src="https://icodeit.org/images/2012/01/clip_image026.gif#id=Vx2cG&originHeight=251&originWidth=227&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>对应的脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">digraph ast&#123;</span><br><span class="line">fontname = &quot;Microsoft YaHei&quot;;</span><br><span class="line">fontsize = 10;</span><br><span class="line"> </span><br><span class="line">node [shape = circle, fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">edge [fontname = &quot;Microsoft YaHei&quot;, fontsize = 10];</span><br><span class="line">node [shape=&quot;plaintext&quot;];</span><br><span class="line"> </span><br><span class="line">mul [label=&quot;mul(*)&quot;];</span><br><span class="line">add [label=&quot;add(+)&quot;];</span><br><span class="line"> </span><br><span class="line">add -&gt; 3</span><br><span class="line">add -&gt; 4;</span><br><span class="line">mul -&gt; add;</span><br><span class="line">mul -&gt; 5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简单的UML类图"><a href="#简单的UML类图" class="headerlink" title="简单的UML类图"></a>简单的UML类图</h4><p>下面是一简单的UML类图，<code>Dog</code>和<code>Cat</code>都是<code>Animal</code>的子类，<code>Dog</code>和<code>Cat</code>同属一个包，且有可能有联系<code>(0..n)</code>。<br><img src="https://icodeit.org/images/2012/01/clip_image028.gif#id=DRA3J&originHeight=424&originWidth=245&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line"> </span><br><span class="line">fontname = &quot;Courier New&quot;</span><br><span class="line">fontsize = 10</span><br><span class="line"> </span><br><span class="line">node [ fontname = &quot;Courier New&quot;, fontsize = 10, shape = &quot;record&quot; ];</span><br><span class="line">edge [ fontname = &quot;Courier New&quot;, fontsize = 10 ];</span><br><span class="line"> </span><br><span class="line">Animal [ label = &quot;&#123;Animal |+ name : String\l+ age : int\l|+ die() : void\l&#125;&quot; ];</span><br><span class="line"> </span><br><span class="line">    subgraph clusterAnimalImpl&#123;</span><br><span class="line">        bgcolor=&quot;yellow&quot;</span><br><span class="line">        Dog [ label = &quot;&#123;Dog||+ bark() : void\l&#125;&quot; ];</span><br><span class="line">        Cat [ label = &quot;&#123;Cat||+ meow() : void\l&#125;&quot; ];</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">edge [ arrowhead = &quot;empty&quot; ];</span><br><span class="line"> </span><br><span class="line">Dog-&gt;Animal;</span><br><span class="line">Cat-&gt;Animal;</span><br><span class="line">Dog-&gt;Cat [arrowhead=&quot;none&quot;, label=&quot;0..*&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="状态图-1"><a href="#状态图-1" class="headerlink" title="状态图"></a>状态图</h4><p><img src="https://icodeit.org/images/2012/01/clip_image030.gif#id=Y93zj&originHeight=251&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">digraph finite_state_machine &#123;</span><br><span class="line">rankdir = LR;</span><br><span class="line">size = &quot;8,5&quot;</span><br><span class="line"> </span><br><span class="line">node [shape = doublecircle]; </span><br><span class="line"> </span><br><span class="line">LR_0 LR_3 LR_4 LR_8;</span><br><span class="line"> </span><br><span class="line">node [shape = circle];</span><br><span class="line"> </span><br><span class="line">LR_0 -&gt; LR_2 [ label = &quot;SS(B)&quot; ];</span><br><span class="line">LR_0 -&gt; LR_1 [ label = &quot;SS(S)&quot; ];</span><br><span class="line">LR_1 -&gt; LR_3 [ label = &quot;S($end)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_6 [ label = &quot;SS(b)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_5 [ label = &quot;SS(a)&quot; ];</span><br><span class="line">LR_2 -&gt; LR_4 [ label = &quot;S(A)&quot; ];</span><br><span class="line">LR_5 -&gt; LR_7 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_5 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_6 -&gt; LR_6 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_6 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_7 -&gt; LR_8 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_7 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">LR_8 -&gt; LR_6 [ label = &quot;S(b)&quot; ];</span><br><span class="line">LR_8 -&gt; LR_5 [ label = &quot;S(a)&quot; ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123; </span><br><span class="line">    rankdir=&quot;LR&quot;; </span><br><span class="line">    node[shape=&quot;point&quot;, width=0, height=0]; </span><br><span class="line">    edge[arrowhead=&quot;none&quot;, style=&quot;dashed&quot;] </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        LC[shape=&quot;plaintext&quot;]; </span><br><span class="line">        LC -&gt; step00 -&gt; step01 -&gt; step02 -&gt; step03 -&gt; step04 -&gt; step05; </span><br><span class="line">    &#125; </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        Agency[shape=&quot;plaintext&quot;];</span><br><span class="line">        Agency -&gt; step10 -&gt; step11 -&gt; step12 -&gt; step13 -&gt; step14 -&gt; step15; </span><br><span class="line">    &#125; </span><br><span class="line">    &#123; </span><br><span class="line">        rank=&quot;same&quot;; </span><br><span class="line">        edge[style=&quot;solided&quot;];</span><br><span class="line">        Agent[shape=&quot;plaintext&quot;];</span><br><span class="line">        Agent -&gt; step20 -&gt; step21 -&gt; step22 -&gt; step23 -&gt; step24 -&gt; step25; </span><br><span class="line">    &#125; </span><br><span class="line">    step00 -&gt; step10 [label=&quot;sends email new custumer&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step11 -&gt; step01 [label=&quot;declines&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step12 -&gt; step02 [label=&quot;accepts&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step13 -&gt; step23 [label=&quot;forward to&quot;, arrowhead=&quot;normal&quot;]; </span><br><span class="line">    step24 -&gt; step14; </span><br><span class="line">    step14 -&gt; step04 [arrowhead=&quot;normal&quot;]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rankdir=&quot;LR&quot;</code>表示，布局从左<code>L</code>到右<code>R</code>。可以看到，在代码中有<code>&#123;&#125;</code>括起来的部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    rank=&quot;same&quot;; </span><br><span class="line">    edge[style=&quot;solided&quot;];</span><br><span class="line">    Agency[shape=&quot;plaintext&quot;];</span><br><span class="line">    Agency -&gt; step10 -&gt; step11 -&gt; step12 -&gt; step13 -&gt; step14 -&gt; step15; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个<code>rank=&quot;same&quot;</code>的block中的所有节点都会在同一条线上。我们设置了所有的线为虚线，但是在该block中，将线改为<code>solided</code>。<br><img src="https://icodeit.org/images/2015/11/seq.png#id=hXPl8&originHeight=341&originWidth=576&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>事实上，从<code>dot</code>的语法及上述的示例中，很容易看出，dot脚本很容易被其他语言生成。比如，使用一些简单的数据库查询就可以生成数据库中的ER图的dot脚本。<br>如果你追求高效的开发速度，并希望快速的将自己的想法画出来，那么<code>graphviz</code>是一个很不错的选择。<br>当然，<code>graphviz</code>也有一定的局限，比如绘制时序图(序列图)就很难实现。<code>graphviz</code>的节点出现在画布上的位置事实上是不确定的，依赖于所使用的布局算法，而不是在脚本中出现的位置，这可能使刚开始接触<code>graphviz</code>的开发人员有点不适应。<code>graphviz</code>的强项在于自动布局，当图中的顶点和边的数目变得很多的时候，才能很好的体会这一特性的好处：<br><img src="https://icodeit.org/images/2012/01/clip_image034.gif#id=jMAKQ&originHeight=498&originWidth=554&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>比如上图，或者较上图更复杂的图，如果采用手工绘制显然是不可能的，只能通过<code>graphviz</code>提供的自动布局引擎来完成。如果仅用于展示模块间的关系，子模块与子模块间通信的方式，模块的逻辑位置等，<code>graphviz</code>完全可以胜任，但是如果图中对象的物理位置必须是准确的，如节点A必须位于左上角，节点B必须与A相邻等特性，使用<code>graphviz</code>则很难做到。毕竟，它的强项是自动布局，事实上，所有的节点对与布局引擎而言，权重在初始时都是相同的，只是在渲染之后，节点的大小，形状等特性才会影响权重。<br>本文只是初步介绍了<code>graphviz</code>的简单应用，如图的定义，顶点&#x2F;边的属性定义，如果运行等，事实上还有很多的属性，如画布的大小，字体的选择，颜色列表等，大家可以通过<code>graphviz</code>的官网来找到更详细的资料。<br>文中的代码都已经在<a href="https://github.com/abruzzi/graphviz-scripts">Github</a>上。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/Hexo.html"/>
      <url>/posts/%E9%85%8D%E7%BD%AE/%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/Hexo.html</url>
      
        <content type="html"><![CDATA[<h3 id="Node-Js-安装"><a href="#Node-Js-安装" class="headerlink" title="Node.Js 安装"></a><em>Node.Js 安装</em></h3><p>安装完成后，要查看我们是否安装成功，可以打开命令提示符（<code>Win + R</code>），输入 <code>cmd</code> 打开控制台，输入如下命令，如果出现对应版本号，说明安装成功了；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>由于下载包是从国外服务器，所以速度较慢，因此我们推荐用阿里的国内镜像进行设置；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a><em>Hexo 安装</em></h3><p>在你的硬盘上找个地儿，用来存放你的博客文件，比如我的就在 <code>D:personalFiles/github/blog</code>，这个文件夹你可以根据自己的喜好来设置。然后从命令台进入当前文件夹，接下来就是安装过程了；</p><ol><li>首先安装 Hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><ol start="2"><li>新建一个文件夹用于存放你的博客，比如我的是 <code>blog</code>，然后进入该文件夹，并用如下命令进行初始化并安装必备组件；</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="3"><li>然后输入如下命令，然后在浏览器中打开 <code>http://localhost:4000</code>；</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 新建博客</span><br><span class="line">hexo new &quot;博客名&quot;</span><br><span class="line"># 生成静态网页</span><br><span class="line">hexo g</span><br><span class="line"># 打开本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="创建-Github-Pages-仓库"><a href="#创建-Github-Pages-仓库" class="headerlink" title="创建 Github Pages 仓库"></a>创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code>(<font color="#00b050">最好均为小写字母</font>)</li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。<br>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h1 id="在Obsidian中执行Shell命令"><a href="#在Obsidian中执行Shell命令" class="headerlink" title="在Obsidian中执行Shell命令"></a>在Obsidian中执行Shell命令</h1><p>而Shell commands可以在Obsidian中设置好命令，并通过Obsidian的命令面板或快捷键快速运行。</p><p><img src="https://pic4.zhimg.com/80/v2-a579b34c2402729861c2be558bdfb247_1440w.webp"></p><p>在插件设置面板中添加命令：</p><p><img src="https://pic3.zhimg.com/80/v2-f4b041dd0aaf01f3a86e2718462547ca_1440w.webp"></p><p>运行博客：</p><ul><li>Shell commands没有显示终端窗口的功能，所以需要我们启动powershell再传入命令</li><li>有了终端窗口我们才可以在窗口中按Ctrl + C关闭Hexo服务，否则它会一直占用端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start powershell <span class="string">&#x27;-NoExit -Command start http://localhost:4000 ; cd Blog ; hexo s&#x27;</span></span><br></pre></td></tr></table></figure><p>打开站点和主题配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start Blog/_config.yml</span><br><span class="line">start Blog/themes/butterfly4.3.1/_config.yml</span><br></pre></td></tr></table></figure><p>然后修改默认执行环境为PowerShell 5：</p><p><img src="https://pic1.zhimg.com/80/v2-3561fa18b0ba16fa41444591b01fd26c_1440w.webp"></p><p>点这个按钮可以执行测试我们的命令：</p><p><img src="https://pic3.zhimg.com/80/v2-c204e805f9e56f69849284e950d50832_1440w.webp"></p><p>如果你遇到了这个错误：<code>hexo:无法加载文件C:\Users\xxx\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。</code>只需在Windows设置&gt;更新和安全&gt;开发者选项，找到PowerShell，点下应用即可：</p><p><img src="https://pic4.zhimg.com/80/v2-114a5d6d9c9c05a44c0838a578488d27_1440w.webp"></p><p>Ctrl+P打开命令面板，输入Shell commands即可找到我们定义好的命令：</p><p><img src="https://pic3.zhimg.com/80/v2-cb7def9bfb09a1f311d588116168593e_1440w.webp"></p><p>可以为每个命令设置下别名，就是在命令面板显示的名字：</p><p><img src="https://pic1.zhimg.com/80/v2-bd8b6dc91a000281e82f6e409974931c_1440w.webp"></p><p><img src="https://pic3.zhimg.com/80/v2-044211d6000cee24a31a0ba2a0fa5a76_1440w.webp"></p><p>在Hotkeys面板中为我们的命令设置好快捷键，就可以通过快捷键快速执行命令了：</p><p><img src="https://pic1.zhimg.com/80/v2-53ea25309ccc79fdaabdabfa9bbaf658_1440w.webp"></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
          <category> 博客配置 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
